{
  "db": [
    {
      "meta": {
        "exported_on": 1432432115320,
        "version": "003"
      },
      "data": {
        "posts": [
          {
            "id": 2,
            "uuid": "618f872b-4f3c-4039-87fe-e6d96326a484",
            "title": "We're Back!",
            "slug": "what-is-this",
            "markdown": "As some of you may know, ReactJS News started out as a hacker news type site focused on letting anyone post links to their latest React creations. A couple months back, I had to travel and didn't have internet access for a few months. During this time the server crashed, we were using a meteor app just by doing `meteor up`, pretty stupid, I know. Now that I'm back, myself and [Jorge](https://github.com/vasco3) are working on making this site more awesome than it ever was. \n\n##What's Coming\nThe new landing page is a dedicated blog running [Ghost](http://ghost.org). I plan to personally post a collection of the latest React news every week. I know that the official React blog ran by [@Vjeux](https://twitter.com/vjeux) also does this, but he's even told me he hardly has time to do it. I'm looking for more people interested in React to become a contributor. If anyone is interested, please tweet us [@ReactJSNews](http://twitter.com/ReactJSNews).\nNext up, Jorge and I are working on a custom content management system built using React and Flux that will handle our community section. It's aimed to be just like Hacker News. You can star it on github and even help with the development if you're interested, the repo is [here](https://github.com/Legitcode/ReactJSNews). Since this site is running on a VM, we might add an IRC server, Minecraft, or something else if the community wants us to.\n\n##Anything Else?\nThat's about it for now. I would like to feature some React video tutorials that people have made. I've also been thinking of making some myself. If you like this project, please follow us on Twitter or leave a comment with some suggestions!\n\nOh yeah, a simple logo for our sidebar would look nice :P",
            "html": "<p>As some of you may know, ReactJS News started out as a hacker news type site focused on letting anyone post links to their latest React creations. A couple months back, I had to travel and didn't have internet access for a few months. During this time the server crashed, we were using a meteor app just by doing <code>meteor up</code>, pretty stupid, I know. Now that I'm back, myself and <a href=\"https://github.com/vasco3\">Jorge</a> are working on making this site more awesome than it ever was. </p>\n\n<h2 id=\"whatscoming\">What's Coming</h2>\n\n<p>The new landing page is a dedicated blog running <a href=\"http://ghost.org\">Ghost</a>. I plan to personally post a collection of the latest React news every week. I know that the official React blog ran by <a href=\"https://twitter.com/vjeux\">@Vjeux</a> also does this, but he's even told me he hardly has time to do it. I'm looking for more people interested in React to become a contributor. If anyone is interested, please tweet us <a href=\"http://twitter.com/ReactJSNews\">@ReactJSNews</a>. <br />\nNext up, Jorge and I are working on a custom content management system built using React and Flux that will handle our community section. It's aimed to be just like Hacker News. You can star it on github and even help with the development if you're interested, the repo is <a href=\"https://github.com/Legitcode/ReactJSNews\">here</a>. Since this site is running on a VM, we might add an IRC server, Minecraft, or something else if the community wants us to.</p>\n\n<h2 id=\"anythingelse\">Anything Else?</h2>\n\n<p>That's about it for now. I would like to feature some React video tutorials that people have made. I've also been thinking of making some myself. If you like this project, please follow us on Twitter or leave a comment with some suggestions!</p>\n\n<p>Oh yeah, a simple logo for our sidebar would look nice :P</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1413170383381,
            "created_by": 1,
            "updated_at": 1413218124032,
            "updated_by": 1,
            "published_at": 1413173141083,
            "published_by": 1
          },
          {
            "id": 3,
            "uuid": "8e8ec7b3-bffe-48e2-8216-0e38c2369653",
            "title": "This Week in React: Oct 20",
            "slug": "this-week-in-react-october-17th",
            "markdown": "This is the first weekly roundup on ReactJS News! We've been busy working on making this site awesome for you guys, and it's coming along. Let's get started.\n\n##React DnD\nFirst off, we've got a [React Drag n' drop library](https://github.com/gaearon/react-dnd). I've had to make something like this at work, but this would have been so much easier to use. Creating a drop target with this mixin is very easy, as we can see from its documentation:\n\n```\nvar { DragDropMixin } = require('react-dnd'),\n    ItemTypes = require('./ItemTypes');\n\nvar ImageBlock = React.createClass({\n  mixins: [DragDropMixin],\n\n  configureDragDrop(registerType) {\n\n    registerType(ItemTypes.IMAGE, {\n\n      // dropTarget, when specified, is { acceptDrop(item)?, canDrop(item)? enter(item)?, over(item)?, leave(item)? }\n      dropTarget: {\n        acceptDrop(image) {\n          // Do something with image! for example,\n          DocumentActionCreators.setImage(this.props.blockId, image);\n        }\n      }\n    });\n  },\n\n  render() {\n\n    // {...this.dropTargetFor(ItemTypes.IMAGE)} will expand into\n    // { onDragEnter: (handled by mixin), onDragOver: (handled by mixin), onDragLeave: (handled by mixin), onDrop: (handled by mixin) }.\n\n    return (\n      <div {...this.dropTargetFor(ItemTypes.IMAGE)}>\n        {this.props.image &&\n          <img src={this.props.image.url} />\n        }\n      </div>\n    );\n  }\n);\n```\nWant to play around with it? Check out [this JSFiddle](http://jsbin.com/sutopepobu/1/edit?html,js,output)!\n##Morearty.js\n[Morearty.js](https://github.com/moreartyjs/moreartyjs) aims to help those who need more advanced state handling in React. What's cool is that component state is transferred to sub-components in a binding attribute and can be retrieved using a custom method. This can be really useful when you have two components interacting together. Creating states (contexts) in morearty is pretty simple: \n```\nvar Ctx = Morearty.createContext(\n  { // initial state\n    nowShowing: 'all',\n    items: [{\n      title: 'My first task',\n      completed: false,\n      editing: false\n    }]\n  },\n  { // configuration\n    requestAnimationFrameEnabled: true\n  }\n);\n```\nTake a look at [the docs](https://github.com/moreartyjs/moreartyjs) for more information.\n\nThat's all that was sent in this week. I've been super busy trying to get our news section up and running. It's been hard since I just took on a second job. Please send in anything you make to our Twitter [@ReactJSNews](http://twitter.com/reactjsnews). Before you leave, take a look at some of these React articles I found interesting this week:\n\n- [Swarm.js+React — real-time, offline-ready Holy Grail web apps](http://swarmjs.github.io/articles/todomvc/)\n- [React Art - drawing vectors in React](https://github.com/reactjs/react-art)\n- [Learning React.js: Getting Started and Concepts](http://scotch.io/tutorials/javascript/learning-react-getting-started-and-concepts)\n\n**Interesting Stackoverflow Posts**\n\n- [Flux: return values from AJAX to the component](http://stackoverflow.com/questions/26451659/flux-return-values-from-ajax-to-the-component)\n- [What is the best way for interacting between Components in Reactjs?](http://stackoverflow.com/questions/26407273/what-is-the-best-way-for-interacting-between-components-in-reactjs)\n- [How to reset a React component?](http://stackoverflow.com/questions/26358144/how-to-reset-a-reactjs-element)\n- [In single page apps, is it standard to do sorting and filtering on the server?](http://stackoverflow.com/questions/26352300/in-single-page-apps-is-it-standard-to-do-sorting-and-filtering-on-the-server)\n",
            "html": "<p>This is the first weekly roundup on ReactJS News! We've been busy working on making this site awesome for you guys, and it's coming along. Let's get started.</p>\n\n<h2 id=\"reactdnd\">React DnD</h2>\n\n<p>First off, we've got a <a href=\"https://github.com/gaearon/react-dnd\">React Drag n' drop library</a>. I've had to make something like this at work, but this would have been so much easier to use. Creating a drop target with this mixin is very easy, as we can see from its documentation:</p>\n\n<pre><code>var { DragDropMixin } = require('react-dnd'),  \n    ItemTypes = require('./ItemTypes');\n\nvar ImageBlock = React.createClass({  \n  mixins: [DragDropMixin],\n\n  configureDragDrop(registerType) {\n\n    registerType(ItemTypes.IMAGE, {\n\n      // dropTarget, when specified, is { acceptDrop(item)?, canDrop(item)? enter(item)?, over(item)?, leave(item)? }\n      dropTarget: {\n        acceptDrop(image) {\n          // Do something with image! for example,\n          DocumentActionCreators.setImage(this.props.blockId, image);\n        }\n      }\n    });\n  },\n\n  render() {\n\n    // {...this.dropTargetFor(ItemTypes.IMAGE)} will expand into\n    // { onDragEnter: (handled by mixin), onDragOver: (handled by mixin), onDragLeave: (handled by mixin), onDrop: (handled by mixin) }.\n\n    return (\n      &lt;div {...this.dropTargetFor(ItemTypes.IMAGE)}&gt;\n        {this.props.image &amp;&amp;\n          &lt;img src={this.props.image.url} /&gt;\n        }\n      &lt;/div&gt;\n    );\n  }\n);\n</code></pre>\n\n<p>Want to play around with it? Check out <a href=\"http://jsbin.com/sutopepobu/1/edit?html,js,output\">this JSFiddle</a>!  </p>\n\n<h2 id=\"moreartyjs\">Morearty.js</h2>\n\n<p><a href=\"https://github.com/moreartyjs/moreartyjs\">Morearty.js</a> aims to help those who need more advanced state handling in React. What's cool is that component state is transferred to sub-components in a binding attribute and can be retrieved using a custom method. This can be really useful when you have two components interacting together. Creating states (contexts) in morearty is pretty simple: </p>\n\n<pre><code>var Ctx = Morearty.createContext(  \n  { // initial state\n    nowShowing: 'all',\n    items: [{\n      title: 'My first task',\n      completed: false,\n      editing: false\n    }]\n  },\n  { // configuration\n    requestAnimationFrameEnabled: true\n  }\n);\n</code></pre>\n\n<p>Take a look at <a href=\"https://github.com/moreartyjs/moreartyjs\">the docs</a> for more information.</p>\n\n<p>That's all that was sent in this week. I've been super busy trying to get our news section up and running. It's been hard since I just took on a second job. Please send in anything you make to our Twitter <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a>. Before you leave, take a look at some of these React articles I found interesting this week:</p>\n\n<ul>\n<li><a href=\"http://swarmjs.github.io/articles/todomvc/\">Swarm.js+React — real-time, offline-ready Holy Grail web apps</a></li>\n<li><a href=\"https://github.com/reactjs/react-art\">React Art - drawing vectors in React</a></li>\n<li><a href=\"http://scotch.io/tutorials/javascript/learning-react-getting-started-and-concepts\">Learning React.js: Getting Started and Concepts</a></li>\n</ul>\n\n<p><strong>Interesting Stackoverflow Posts</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/26451659/flux-return-values-from-ajax-to-the-component\">Flux: return values from AJAX to the component</a></li>\n<li><a href=\"http://stackoverflow.com/questions/26407273/what-is-the-best-way-for-interacting-between-components-in-reactjs\">What is the best way for interacting between Components in Reactjs?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/26358144/how-to-reset-a-reactjs-element\">How to reset a React component?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/26352300/in-single-page-apps-is-it-standard-to-do-sorting-and-filtering-on-the-server\">In single page apps, is it standard to do sorting and filtering on the server?</a></li>\n</ul>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1413178330466,
            "created_by": 1,
            "updated_at": 1414618817715,
            "updated_by": 1,
            "published_at": 1413843737761,
            "published_by": 1
          },
          {
            "id": 4,
            "uuid": "0381b7b8-64fb-4201-bfed-da19554f8dce",
            "title": "About",
            "slug": "about",
            "markdown": "Will write this soon....",
            "html": "<p>Will write this soon....</p>",
            "image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1413846861391,
            "created_by": 1,
            "updated_at": 1413846861391,
            "updated_by": 1,
            "published_at": 1413846861396,
            "published_by": 1
          },
          {
            "id": 5,
            "uuid": "1ac6bcbd-4908-4110-9569-e8050f4eb645",
            "title": "Contact",
            "slug": "contact",
            "markdown": "For now, you can leave a comment anywhere on this site or tweet us [@ReactJSNews](http://twitter.com/reactjsnews).",
            "html": "<p>For now, you can leave a comment anywhere on this site or tweet us <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a>.</p>",
            "image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1413846935120,
            "created_by": 1,
            "updated_at": 1413846935120,
            "updated_by": 1,
            "published_at": 1413846935121,
            "published_by": 1
          },
          {
            "id": 6,
            "uuid": "51a6599b-26f8-4659-b688-99784f9e5af3",
            "title": "This Week in Tweets: Oct 21",
            "slug": "tweets-week-in-reactjs-october-20th",
            "markdown": "I will try to gather all the interesting stuff I've seen during this last week. Feel free to comment and suggest more tweets.\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<center>\n<table>\n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"en\"><p>Build A Real-Time Twitter Stream with Node and React.js <a href=\"http://t.co/dSQZWdlnb2\">http://t.co/dSQZWdlnb2</a> <a href=\"https://twitter.com/hashtag/javascript?src=hash\">#javascript</a> by <a href=\"https://twitter.com/ken_wheeler\">@ken_wheeler</a> via <a href=\"https://twitter.com/scotch_io\">@scotch_io</a></p>&mdash; Scotch Development (@scotch_io) <a href=\"https://twitter.com/scotch_io/status/524602517041451008\">October 21, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Learning React.js: Getting Started and Concepts ♥ Scotch <a href=\"http://t.co/uIsRYwd7I0\">http://t.co/uIsRYwd7I0</a> <a href=\"https://twitter.com/hashtag/REACTJS?src=hash\">#REACTJS</a> <a href=\"https://twitter.com/hashtag/JS?src=hash\">#JS</a></p>&mdash; Guillaume Goupil (@gllmgpl) <a href=\"https://twitter.com/gllmgpl/status/524227920202854401\">October 20, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<table>\n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Community Round-up #23 is up and it&#39;s a special edition on Flux! <a href=\"http://t.co/wBsjWBnRTD\">http://t.co/wBsjWBnRTD</a></p>&mdash; React (@reactjs) <a href=\"https://twitter.com/reactjs/status/523134831325368320\">October 17, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" data-cards=\"hidden\" lang=\"es\"><p>Here&#39;s a long, well-curated list of <a href=\"https://twitter.com/hashtag/ReactJS?src=hash\">#ReactJS</a> resources, tutorials, videos, components... tons of stuff, <a href=\"https://twitter.com/hashtag/FluxJS?src=hash\">#FluxJS</a> too. <a href=\"https://t.co/mFJ1EtqRBU\">https://t.co/mFJ1EtqRBU</a></p>&mdash; Bill Fisher (@fisherwebdev) <a href=\"https://twitter.com/fisherwebdev/status/522641614737793024\">October 16, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<table>\n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>ReactElements in React 0.12 - The way to faster and simpler React classes in ES6. <a href=\"https://t.co/nzj3EKcRdu\">https://t.co/nzj3EKcRdu</a></p>&mdash; Sebastian Markbåge (@sebmarkbage) <a href=\"https://twitter.com/sebmarkbage/status/522087835193856001\">October 14, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Love waking up to new uses of React - real-time, offline-ready holy grail apps w/swarm.js <a href=\"http://t.co/eFlAe1Azfl\">http://t.co/eFlAe1Azfl</a></p>&mdash; James “Jimmy” Long (@jlongster) <a href=\"https://twitter.com/jlongster/status/522029490244165632\">October 14, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" lang=\"en\"><p>Now with nested routes and http API data:&#10;<a href=\"http://t.co/l5ndTOCg20\">http://t.co/l5ndTOCg20</a>&#10;&#10;The App:&#10;<a href=\"https://t.co/P6g6nBz0uV\">https://t.co/P6g6nBz0uV</a>&#10;&#10;Go ahead, disable JavaScript :)</p>&mdash; Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/522078970079346689\">October 14, 2014</a></blockquote>\n</center>",
            "html": "<p>I will try to gather all the interesting stuff I've seen during this last week. Feel free to comment and suggest more tweets.</p>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p><center>  </p>\n\n<table>  \n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"en\"><p>Build A Real-Time Twitter Stream with Node and React.js <a href=\"http://t.co/dSQZWdlnb2\">http://t.co/dSQZWdlnb2</a> <a href=\"https://twitter.com/hashtag/javascript?src=hash\">#javascript</a> by <a href=\"https://twitter.com/ken_wheeler\">@ken_wheeler</a> via <a href=\"https://twitter.com/scotch_io\">@scotch_io</a></p>&mdash; Scotch Development (@scotch_io) <a href=\"https://twitter.com/scotch_io/status/524602517041451008\">October 21, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Learning React.js: Getting Started and Concepts ♥ Scotch <a href=\"http://t.co/uIsRYwd7I0\">http://t.co/uIsRYwd7I0</a> <a href=\"https://twitter.com/hashtag/REACTJS?src=hash\">#REACTJS</a> <a href=\"https://twitter.com/hashtag/JS?src=hash\">#JS</a></p>&mdash; Guillaume Goupil (@gllmgpl) <a href=\"https://twitter.com/gllmgpl/status/524227920202854401\">October 20, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<table>  \n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Community Round-up #23 is up and it&#39;s a special edition on Flux! <a href=\"http://t.co/wBsjWBnRTD\">http://t.co/wBsjWBnRTD</a></p>&mdash; React (@reactjs) <a href=\"https://twitter.com/reactjs/status/523134831325368320\">October 17, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" data-cards=\"hidden\" lang=\"es\"><p>Here&#39;s a long, well-curated list of <a href=\"https://twitter.com/hashtag/ReactJS?src=hash\">#ReactJS</a> resources, tutorials, videos, components... tons of stuff, <a href=\"https://twitter.com/hashtag/FluxJS?src=hash\">#FluxJS</a> too. <a href=\"https://t.co/mFJ1EtqRBU\">https://t.co/mFJ1EtqRBU</a></p>&mdash; Bill Fisher (@fisherwebdev) <a href=\"https://twitter.com/fisherwebdev/status/522641614737793024\">October 16, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<table>  \n    <tr>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>ReactElements in React 0.12 - The way to faster and simpler React classes in ES6. <a href=\"https://t.co/nzj3EKcRdu\">https://t.co/nzj3EKcRdu</a></p>&mdash; Sebastian Markbåge (@sebmarkbage) <a href=\"https://twitter.com/sebmarkbage/status/522087835193856001\">October 14, 2014</a></blockquote></td>\n        <td><blockquote class=\"twitter-tweet\" lang=\"es\"><p>Love waking up to new uses of React - real-time, offline-ready holy grail apps w/swarm.js <a href=\"http://t.co/eFlAe1Azfl\">http://t.co/eFlAe1Azfl</a></p>&mdash; James “Jimmy” Long (@jlongster) <a href=\"https://twitter.com/jlongster/status/522029490244165632\">October 14, 2014</a></blockquote></td>\n    </tr>\n</table>\n\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" lang=\"en\"><p>Now with nested routes and http API data:&#10;<a href=\"http://t.co/l5ndTOCg20\">http://t.co/l5ndTOCg20</a>&#10;&#10;The App:&#10;<a href=\"https://t.co/P6g6nBz0uV\">https://t.co/P6g6nBz0uV</a>&#10;&#10;Go ahead, disable JavaScript :)</p>&mdash; Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/522078970079346689\">October 14, 2014</a></blockquote>  \n\n<p></center></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 4,
            "created_at": 1413850994471,
            "created_by": 4,
            "updated_at": 1413925440981,
            "updated_by": 4,
            "published_at": 1413851454584,
            "published_by": 4
          },
          {
            "id": 7,
            "uuid": "e137d719-ab74-4e8e-bf78-a7f6b36987af",
            "title": "TWiR: A Conference is Coming!",
            "slug": "twir-a-conference-is-coming",
            "markdown": "##ReactJS Conf!\nIn this second installment of _This Week in React_ we've got some awesome news! [React Conf](http://conf.reactjs.com/) is coming January 28-29. If you're interested in becoming a presenter, you can apply [here](http://conf.reactjs.com/call-for-presenters.html). \n\nYou probably don't care, but I'll be going (along with hopefully the rest of the ReactJSNews team). I plan on blogging throughout the conference, this way you can experience some of the talks if even if you can't make it. The best part is going  meeting some of the React community!\n\n##What's new this week?\n\nI always encourage people to tweet me [@ReactJSNews](http://twitter.com/reactjsnews) with any of their creations. It's an easy way to get your stuff out there. \n\nFirst up, we've got the [biggest React resource](https://github.com/enaqx/awesome-react) I've ever seen. As of writing this, it's peaked at [#10 on hackernews](https://news.ycombinator.com/item?id=8515192). Check it out if you're looking to learn literally anything dealing with React. Take my word for it, it's probably there.\n\n####Components\nThe first component we've got is a [custom number input field](https://github.com/tleunen/react-number-editor) made by [@Tommy](http://twitter.com/Tommy). It seems to act like a hybrind input / slider field. The component has quite a few options, the example given can be seen here:\n```\n<NumberEditor min={0} max={1} step={0.01} decimals={2} onValueChange={onValueChange} />\n```\nYou can find all the options [on github]((https://github.com/tleunen/react-number-editor).\n\n[**Domain Driven Forms**](https://github.com/gcanti/tcomb-form)  by [@GiulioCanti](https://twitter.com/GiulioCanti) is an awesome library for generating html forms through javascript. Creating a form is just too easy: \n```\nvar t = require('tcomb-form');\n\n// define a type\nvar Person = t.struct({\n  name: t.Str,\n  surname: t.Bool\n});\n\n// create the form\nvar Form = t.form.createForm(Person);\n```\nNow that for form is created all you need to do is reference it in a React component: `<Form />`. \n\n[**React Select**](https://github.com/JedWatson/react-select) is another form based component. I just realized that every component being featured this week deals with forms! That wasn't planned, I swear! Anyways, this component aims to make generating select boxes easier. I like that it makes asynchronously addding options easy. Here's an example with async enabled:\n```\nvar getOptions = function(input, callback) {\n    setTimeout(function() {\n        callback(null, {\n            options: [\n                { value: 'one', label: 'One' },\n                { value: 'two', label: 'Two' }\n            ],\n            complete: true\n        });\n    }, 500);\n};\n\n<Select\n    name=\"form-field-name\"\n    value=\"one\"\n    asyncOptions={getOptions}\n/>\n```\n\n##React Articles\n[Easier UI Reasoning with Unidirectional Dataflow and Immutable Data](http://open.bekk.no/easier-reasoning-with-unidirectional-dataflow-and-immutable-data)\n\n[Why you might not need MVC with React.js](http://www.code-experience.com/why-you-might-not-need-mvc-with-reactjs/)\n##Cool Links\n\n[Embedded SVG icon sets and Reactjs](https://github.com/tleunen/react-number-editor)\n\n[Glenjamin's favorite NPM modules](https://github.com/glenjamin/node_modules/wiki)\n\n[Bitcoin Sidechains](http://avc.com/2014/10/sidechains/)\n\n[Verizon Wireless injecting tracking UIDs into HTTP requests](https://news.ycombinator.com/item?id=8500131)\n\n[Immutable JS](https://github.com/facebook/immutable-js)\n\n[Strengthening 2-Step Verification with Security Key ](http://googleonlinesecurity.blogspot.com/2014/10/strengthening-2-step-verification-with.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+GoogleOnlineSecurityBlog+%28Google+Online+Security+Blog%29)\n\n[FFS SSL](http://wingolog.org/archives/2014/10/17/ffs-ssl)\n\n[How do you communicate if you won't hit an estimate?](https://news.ycombinator.com/item?id=8482673)\n",
            "html": "<h2 id=\"reactjsconf\">ReactJS Conf!</h2>\n\n<p>In this second installment of <em>This Week in React</em> we've got some awesome news! <a href=\"http://conf.reactjs.com/\">React Conf</a> is coming January 28-29. If you're interested in becoming a presenter, you can apply <a href=\"http://conf.reactjs.com/call-for-presenters.html\">here</a>. </p>\n\n<p>You probably don't care, but I'll be going (along with hopefully the rest of the ReactJSNews team). I plan on blogging throughout the conference, this way you can experience some of the talks if even if you can't make it. The best part is going  meeting some of the React community!</p>\n\n<h2 id=\"whatsnewthisweek\">What's new this week?</h2>\n\n<p>I always encourage people to tweet me <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> with any of their creations. It's an easy way to get your stuff out there. </p>\n\n<p>First up, we've got the <a href=\"https://github.com/enaqx/awesome-react\">biggest React resource</a> I've ever seen. As of writing this, it's peaked at <a href=\"https://news.ycombinator.com/item?id=8515192\">#10 on hackernews</a>. Check it out if you're looking to learn literally anything dealing with React. Take my word for it, it's probably there.</p>\n\n<h4 id=\"components\">Components</h4>\n\n<p>The first component we've got is a <a href=\"https://github.com/tleunen/react-number-editor\">custom number input field</a> made by <a href=\"http://twitter.com/Tommy\">@Tommy</a>. It seems to act like a hybrind input / slider field. The component has quite a few options, the example given can be seen here:  </p>\n\n<pre><code>&lt;NumberEditor min={0} max={1} step={0.01} decimals={2} onValueChange={onValueChange} /&gt;  \n</code></pre>\n\n<p>You can find all the options <a href=\"(https://github.com/tleunen/react-number-editor\">on github</a>.</p>\n\n<p><a href=\"https://github.com/gcanti/tcomb-form\"><strong>Domain Driven Forms</strong></a>  by <a href=\"https://twitter.com/GiulioCanti\">@GiulioCanti</a> is an awesome library for generating html forms through javascript. Creating a form is just too easy: </p>\n\n<pre><code>var t = require('tcomb-form');\n\n// define a type\nvar Person = t.struct({  \n  name: t.Str,\n  surname: t.Bool\n});\n\n// create the form\nvar Form = t.form.createForm(Person);  \n</code></pre>\n\n<p>Now that for form is created all you need to do is reference it in a React component: <code>&lt;Form /&gt;</code>. </p>\n\n<p><a href=\"https://github.com/JedWatson/react-select\"><strong>React Select</strong></a> is another form based component. I just realized that every component being featured this week deals with forms! That wasn't planned, I swear! Anyways, this component aims to make generating select boxes easier. I like that it makes asynchronously addding options easy. Here's an example with async enabled:</p>\n\n<pre><code>var getOptions = function(input, callback) {  \n    setTimeout(function() {\n        callback(null, {\n            options: [\n                { value: 'one', label: 'One' },\n                { value: 'two', label: 'Two' }\n            ],\n            complete: true\n        });\n    }, 500);\n};\n\n&lt;Select  \n    name=\"form-field-name\"\n    value=\"one\"\n    asyncOptions={getOptions}\n/&gt;\n</code></pre>\n\n<h2 id=\"reactarticles\">React Articles</h2>\n\n<p><a href=\"http://open.bekk.no/easier-reasoning-with-unidirectional-dataflow-and-immutable-data\">Easier UI Reasoning with Unidirectional Dataflow and Immutable Data</a></p>\n\n<p><a href=\"http://www.code-experience.com/why-you-might-not-need-mvc-with-reactjs/\">Why you might not need MVC with React.js</a></p>\n\n<h2 id=\"coollinks\">Cool Links</h2>\n\n<p><a href=\"https://github.com/tleunen/react-number-editor\">Embedded SVG icon sets and Reactjs</a></p>\n\n<p><a href=\"https://github.com/glenjamin/node_modules/wiki\">Glenjamin's favorite NPM modules</a></p>\n\n<p><a href=\"http://avc.com/2014/10/sidechains/\">Bitcoin Sidechains</a></p>\n\n<p><a href=\"https://news.ycombinator.com/item?id=8500131\">Verizon Wireless injecting tracking UIDs into HTTP requests</a></p>\n\n<p><a href=\"https://github.com/facebook/immutable-js\">Immutable JS</a></p>\n\n<p><a href=\"http://googleonlinesecurity.blogspot.com/2014/10/strengthening-2-step-verification-with.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+GoogleOnlineSecurityBlog+%28Google+Online+Security+Blog%29\">Strengthening 2-Step Verification with Security Key </a></p>\n\n<p><a href=\"http://wingolog.org/archives/2014/10/17/ffs-ssl\">FFS SSL</a></p>\n\n<p><a href=\"https://news.ycombinator.com/item?id=8482673\">How do you communicate if you won't hit an estimate?</a></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1414432224152,
            "created_by": 1,
            "updated_at": 1414618806928,
            "updated_by": 1,
            "published_at": 1414515935677,
            "published_by": 1
          },
          {
            "id": 8,
            "uuid": "7dd4b3bd-e2bb-48b7-8a9b-0e5353c1639d",
            "title": "Before You Dive Into React",
            "slug": "before-you-dive-into-react",
            "markdown": "Recently, I've been trying to teach a friend how to use ReactJS. This has been a somewhat challenging thing for him to understand as this would be his first library other than jQuery. In order to help other beginners, my friend [Alex](https://github.com/rodneystrong) and I put together this blog style dialog that we ran into while I was in the process of teaching him the basics. I hope this post serves as a really helpful extension of the [official documentation](http://facebook.github.io/react/docs/getting-started.html) and covers questions that you may have about React.\n",
            "html": "<p>Recently, I've been trying to teach a friend how to use ReactJS. This has been a somewhat challenging thing for him to understand as this would be his first library other than jQuery. In order to help other beginners, my friend <a href=\"https://github.com/rodneystrong\">Alex</a> and I put together this blog style dialog that we ran into while I was in the process of teaching him the basics. I hope this post serves as a really helpful extension of the <a href=\"http://facebook.github.io/react/docs/getting-started.html\">official documentation</a> and covers questions that you may have about React.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "draft",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1414698064595,
            "created_by": 1,
            "updated_at": 1414698064595,
            "updated_by": 1,
            "published_at": null,
            "published_by": null
          },
          {
            "id": 9,
            "uuid": "db1a2cc6-7209-4b2b-8795-6dfbe6ed0a83",
            "title": "This Week in Tweets",
            "slug": "this-week-in-tweets",
            "markdown": "I'm too busy to get a full post up this week, hopefully these tweets will suffice!\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> <a href=\"http://t.co/TVsw27rjJC\">http://t.co/TVsw27rjJC</a> , <a href=\"http://t.co/JbWQqi1m58\">http://t.co/JbWQqi1m58</a>. With React (react-bootstrap, traceur, webpack) it was really easy to build</p>&mdash; koorchik (@koorchik) <a href=\"https://twitter.com/koorchik/status/529619222121697281\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> <a href=\"https://twitter.com/eiriklv\">@eiriklv</a>&#39;s <a href=\"http://t.co/OzUa3L92z7\">http://t.co/OzUa3L92z7</a> is an amazing <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> site. Infinite scrolling, masonry, fast. Blog- <a href=\"http://t.co/U4dsWb1HXv\">http://t.co/U4dsWb1HXv</a></p>&mdash; Jeff Winkler (@winkler1) <a href=\"https://twitter.com/winkler1/status/529594852745699328\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> an admin dashboard for my site with React and Chartjs <a href=\"http://t.co/GKo0yBL4DQ\">http://t.co/GKo0yBL4DQ</a></p>&mdash; Yongzhi Huang (@whyzhi) <a href=\"https://twitter.com/whyzhi/status/529438259731263488\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/reactjs\">@reactjs</a> <a href=\"https://twitter.com/Vjeux\">@Vjeux</a> <a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> Understanding <a href=\"https://twitter.com/hashtag/Reactjs?src=hash\">#Reactjs</a> and reimplementing it from scratch <a href=\"https://t.co/VbO2XNJVYj\">https://t.co/VbO2XNJVYj</a></p>&mdash; Giulio Canti (@GiulioCanti) <a href=\"https://twitter.com/GiulioCanti/status/527437980043313152\">October 29, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Why we should stop using Grunt &amp; Gulp <a href=\"http://t.co/imaz0U6OCi\">http://t.co/imaz0U6OCi</a></p>&mdash; Jorge Cuadra (@Cuadraman) <a href=\"https://twitter.com/Cuadraman/status/529680621522538496\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>marty 0.0.0 <a href=\"https://t.co/5KmdaXEx2n\">https://t.co/5KmdaXEx2n</a> A React.js/Flux Framework</p>&mdash; npm_tweets (@npm_tweets) <a href=\"https://twitter.com/npm_tweets/status/529699730537070592\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>The lack of React.js swag is painful.</p>&mdash; Trek Glowacki (@trek) <a href=\"https://twitter.com/trek/status/529620930469707777\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Highlights of the Secret Santa page: <a href=\"https://twitter.com/reactjs\">@reactjs</a>, react-router, and nodeject DI. Fun project to work on. Architecture thanks to <a href=\"https://twitter.com/jo_asakura\">@jo_asakura</a>.</p>&mdash; Brian Holt (@holtbt) <a href=\"https://twitter.com/holtbt/status/529346794442854400\">November 3, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>immutable-js has now its first official release and a website :) <a href=\"http://t.co/CEyi89ognu\">http://t.co/CEyi89ognu</a></p>&mdash; React (@reactjs) <a href=\"https://twitter.com/reactjs/status/528318148676947968\">October 31, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/fkadev\">@fkadev</a> This is how i&#39;ve been using it with React if you are interested <a href=\"https://t.co/dsqXQahuFv\">https://t.co/dsqXQahuFv</a></p>&mdash; Vjeux (@Vjeux) <a href=\"https://twitter.com/Vjeux/status/527873902761213952\">October 30, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Understanding React and reimplementing it from scratch Part 1: Views&#10;<a href=\"https://t.co/tToEt31yvt\">https://t.co/tToEt31yvt</a>&#10;<a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a></p>&mdash; React JS France (@ReactJSFrance) <a href=\"https://twitter.com/ReactJSFrance/status/527514410022359041\">October 29, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> subreddit <a href=\"http://t.co/wAEuwaUATv\">http://t.co/wAEuwaUATv</a></p>&mdash; Elijah Luigi Mañor (@elijahmanor) <a href=\"https://twitter.com/elijahmanor/status/527082569914150912\">October 28, 2014</a></blockquote>",
            "html": "<p>I'm too busy to get a full post up this week, hopefully these tweets will suffice!  </p>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>  \n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> <a href=\"http://t.co/TVsw27rjJC\">http://t.co/TVsw27rjJC</a> , <a href=\"http://t.co/JbWQqi1m58\">http://t.co/JbWQqi1m58</a>. With React (react-bootstrap, traceur, webpack) it was really easy to build</p>&mdash; koorchik (@koorchik) <a href=\"https://twitter.com/koorchik/status/529619222121697281\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> <a href=\"https://twitter.com/eiriklv\">@eiriklv</a>&#39;s <a href=\"http://t.co/OzUa3L92z7\">http://t.co/OzUa3L92z7</a> is an amazing <a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> site. Infinite scrolling, masonry, fast. Blog- <a href=\"http://t.co/U4dsWb1HXv\">http://t.co/U4dsWb1HXv</a></p>&mdash; Jeff Winkler (@winkler1) <a href=\"https://twitter.com/winkler1/status/529594852745699328\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> an admin dashboard for my site with React and Chartjs <a href=\"http://t.co/GKo0yBL4DQ\">http://t.co/GKo0yBL4DQ</a></p>&mdash; Yongzhi Huang (@whyzhi) <a href=\"https://twitter.com/whyzhi/status/529438259731263488\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/reactjs\">@reactjs</a> <a href=\"https://twitter.com/Vjeux\">@Vjeux</a> <a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> Understanding <a href=\"https://twitter.com/hashtag/Reactjs?src=hash\">#Reactjs</a> and reimplementing it from scratch <a href=\"https://t.co/VbO2XNJVYj\">https://t.co/VbO2XNJVYj</a></p>&mdash; Giulio Canti (@GiulioCanti) <a href=\"https://twitter.com/GiulioCanti/status/527437980043313152\">October 29, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Why we should stop using Grunt &amp; Gulp <a href=\"http://t.co/imaz0U6OCi\">http://t.co/imaz0U6OCi</a></p>&mdash; Jorge Cuadra (@Cuadraman) <a href=\"https://twitter.com/Cuadraman/status/529680621522538496\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>marty 0.0.0 <a href=\"https://t.co/5KmdaXEx2n\">https://t.co/5KmdaXEx2n</a> A React.js/Flux Framework</p>&mdash; npm_tweets (@npm_tweets) <a href=\"https://twitter.com/npm_tweets/status/529699730537070592\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>The lack of React.js swag is painful.</p>&mdash; Trek Glowacki (@trek) <a href=\"https://twitter.com/trek/status/529620930469707777\">November 4, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Highlights of the Secret Santa page: <a href=\"https://twitter.com/reactjs\">@reactjs</a>, react-router, and nodeject DI. Fun project to work on. Architecture thanks to <a href=\"https://twitter.com/jo_asakura\">@jo_asakura</a>.</p>&mdash; Brian Holt (@holtbt) <a href=\"https://twitter.com/holtbt/status/529346794442854400\">November 3, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>immutable-js has now its first official release and a website :) <a href=\"http://t.co/CEyi89ognu\">http://t.co/CEyi89ognu</a></p>&mdash; React (@reactjs) <a href=\"https://twitter.com/reactjs/status/528318148676947968\">October 31, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/fkadev\">@fkadev</a> This is how i&#39;ve been using it with React if you are interested <a href=\"https://t.co/dsqXQahuFv\">https://t.co/dsqXQahuFv</a></p>&mdash; Vjeux (@Vjeux) <a href=\"https://twitter.com/Vjeux/status/527873902761213952\">October 30, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Understanding React and reimplementing it from scratch Part 1: Views&#10;<a href=\"https://t.co/tToEt31yvt\">https://t.co/tToEt31yvt</a>&#10;<a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a></p>&mdash; React JS France (@ReactJSFrance) <a href=\"https://twitter.com/ReactJSFrance/status/527514410022359041\">October 29, 2014</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a href=\"https://twitter.com/hashtag/reactjs?src=hash\">#reactjs</a> subreddit <a href=\"http://t.co/wAEuwaUATv\">http://t.co/wAEuwaUATv</a></p>&mdash; Elijah Luigi Mañor (@elijahmanor) <a href=\"https://twitter.com/elijahmanor/status/527082569914150912\">October 28, 2014</a></blockquote>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1415125203737,
            "created_by": 1,
            "updated_at": 1415125648567,
            "updated_by": 1,
            "published_at": 1415125553950,
            "published_by": 1
          },
          {
            "id": 10,
            "uuid": "62d3b106-84df-4097-b517-964a4caed8f4",
            "title": "The State of Flux",
            "slug": "the-state-of-flux",
            "markdown": "Facebook announced Flux at F8 in April as an application paradigm to complement React. But Flux has been pretty nebulous, as there hasn’t been much code released. The examples in Facebook’s Flux repository gave a better idea of its overall composition, but there was still a ton of boilerplate involved, and that’s usually where a library comes along to bring some level of abstraction and convenience.\n\nAssuming a prior knowledge of Flux’s inner workings, here’s a comparison of the following Flux libraries that have been developed by the community:\n\n- Reflux https://github.com/spoike/refluxjs\n- Barracks https://github.com/yoshuawuyts/barracks\n- Delorean http://deloreanjs.com/\n- Fluxy https://github.com/jmreidy/fluxy\n- Fluxxor http://fluxxor.com/\n- McFly http://kenwheeler.github.io/mcfly/\n\n## In keeping with the Action - Dispatcher - Store - View paradigm\n\n- Reflux merges Actions and the Dispatcher together (so Stores listen to Actions, not dispatched events)\n- Barracks basically removes Action Creators, and very tightly couples the Dispatcher and its Stores together (so the View dispatches events directly)\n- Delorean keeps all the same, but technically doesn’t have singleton Stores\n- Fluxy keeps all the same\n- Fluxxor keeps all the same\n- McFly keeps all the same\n\n## In handling asynchronous requests\n\nGeneral usage within Flux is straightforward - the one thing that is not exactly intuitive is handling asynchronous requests. This could be considered a Flux design pattern question, but general consensus from engineers at Facebook suggest that asynchronous writes actually do not belong in Stores, but in Action Creators. Asynchronous reads could belong in either.\n\nI think it is favorable to handle asynchronous requests in actions rather than stores because:\n\n1. It is a more consistent pattern to how data flows through the rest of the system\n2. Multiple stores could be interested in listening to the success or failure of a request (such as a generic error handler store), and you typically don’t want to invoke actions from directly within your stores\n\nThat said, here are a variety of different approaches to handling/facilitating asynchronous requests:\n\n- Reflux does not hinder developers from the above convention in any way - one can simply set up action \"listeners,\" which could invoke the asynchronous request and invoke other actions upon completion. This pattern has been illustrated [here](https://github.com/WRidder/react-spa/blob/master/src/actions/resourceActions.js#L24-L51) or [here](https://gist.github.com/simenbrekken/de69d3ce27ea5934c8b2). Regardless, a solution is not necessarily intuitive as it may be in a library like Fluxy\n- Barracks emphasizes the use of waitFor as it actually handles asynchronicity correctly using a concept of middleware chains. This actually seems like it works totally fine for asynchronous writes\n- Delorean doesn’t do anything in particular\n- Fluxy has a built-in concept of serviceActions that directly facilitates asynchronous requests. A serviceAction will send ${ACTION} upon invocation and subsequently ${ACTION}_COMPLETED or ${ACTION}_FAILED upon completion. Fluxy's dispatcher also has a dispatcher that actually handles waitFor correctly (as opposed to just staggering the order of synchronous calls as Facebook’s Flux Dispatcher or Yahoo’s Dispatchr do), supported with the Bluebird Promises library\n- Fluxxor doesn’t do anything in particular (though it contains some good documentation that arrives at the same conclusions as Fluxy)\n- McFly may actually inadvertently not allow multiple events to be dispatched asynchronously from a single action (since it seems to expect a synchronous payload object to be returned). So the action factory may actually hinder putting asynchronous requests in actions and force you to handle it in your stores\n\n## Added Value\n\n- Reflux actually offers a ton of convenience methods in unique ways you won’t find in these other libraries. Your stores can listen to other stores and aggregate data across other stores. Creating actions and stores for those actions is particularly easy and can be done without a lot of code. The main impetus for Reflux was that the author didn’t like that stores basically had to compare strings to determine what action had taken place and what it should do, which is very fair. The result is that you don’t have to maintain a list of Constants (or compare strings) everywhere like in the Facebook examples - you basically create actions and you set up listeners on those actions, which honestly makes a lot of sense. A side effect of this is that you don't need to maintain true Constants - multiple stores can essentially have the same API, the same action names, and there is no conflict as there would be with other Flux implementations.\n- Barracks boasts a minimal API surface area, which is actually something to behold - there are only 3 functions exposed. But it seems like, in these 3 functions, you can actually get everything you need\n- Delorean boasts that it is framework agnostic (React, Flight, Ractive, etc) and it is small (4K gzipped). It really is the only library that doesn’t seem straight up married to React in its demo code\n- Fluxy leverages Mori in stores for immutable data structures, so that your components’ shouldComponentUpdate can be ridiculously fast, but that also means you need to use Mori syntax for everything within your stores. It also keeps a history of your store state, so you basically get the ability to undo for free. As mentioned above, the idea of serviceActions basically gives you asynchronous actions for free, without any extra work\n- Fluxxor provides convenience create methods for a lot of setup as well as a StoreWatchMixin so that components can listen to Stores without a lot of boilerplate\n- McFly provides helper factories to facilitate the creation of actions and stores. It also contains a typical store listener mixin for components\n\n## Shortcomings\n\n- Reflux seems a bit bulletproof at this point - it *does* stray from the \"canonical\" Facebook Flux architecture, but it still seems fully featured and, to my attention, there are no legitimate architectural concerns\n- Barracks makes a pretty large departure from the canonical Flux architecture by getting rid of action creators and tightly coupling the dispatcher and the stores together. This perhaps comes at the expense of flexibility. If your actions only ever affect one store, there’s no real problem, but if you hypothetically had a single action that should be handled by multiple stores, there’s no good, clean way to handle this (though I wonder how much this happens in the real world). Since Barracks is such a departure from all of these other implementations, if you needed something more conventional later, you’d probably have a hard time migrating and end up having to rewrite/rearchitecture much of your code\n- Delorean doesn’t stray much from the “canonical” Facebook Flux architecture - the only thing is that its stores aren’t singletons, but that’s rather nitpicky\n- Fluxy doesn’t stray much from the “canonical” Facebook Flux architecture\n- Fluxxor doesn’t stray much from the “canonical” Facebook Flux architecture\n- McFly’s helper factory to create actions basically makes you return one payload that will be dispatched (from the documentation, it looks like it needs to be synchronous)\n\n## Takeaways\n\nIf you want to stick to Flux as purely as possible, use Fluxxor, Delorean, or McFly.\n\nIf you want convenience and novelty, Reflux and Fluxy will give you a pretty fun experience.\n\nIf you are feeling rebellious or want a truly minimal surface area, go with Barracks.\n\n## Corrections\n\n7/17/14: Corrections to Reflux\n\n- Handling asynchronous requests had read: \"Reflux’s design doesn’t exactly fit with the above paradigm, since an asynchronous read or write can’t be run from an action. It would have to be run from a Store - if other Stores were interested in whether the action succeeded or failed, you would either have to invoke follow up actions from within the Store or make interested Stores listen to changes in that Store, since that’s also a unique capability of Reflux.\"\n- Shortcomings had read: \"Reflux has a listenTo component mixin to listen to changes in your store, but you still have to do more work than other libraries - you still have to set up both onChange and onInit methods that I’d expect to be equivalent and could be abstracted away if you enforced the presence of a function like getStoreData in either the component or the Store.\" Actually, Reflux provides a connect method that removes your need for onChange in general cases. You still may need to declare your initial state.\n- Shortcomings had also read: \"As aforementioned, Reflux also does not have a straightforward solution to handling asynchronous requests\" which was not true and was fixed under the \"Handling Asynchronous Requests\" section",
            "html": "<p>Facebook announced Flux at F8 in April as an application paradigm to complement React. But Flux has been pretty nebulous, as there hasn’t been much code released. The examples in Facebook’s Flux repository gave a better idea of its overall composition, but there was still a ton of boilerplate involved, and that’s usually where a library comes along to bring some level of abstraction and convenience.</p>\n\n<p>Assuming a prior knowledge of Flux’s inner workings, here’s a comparison of the following Flux libraries that have been developed by the community:</p>\n\n<ul>\n<li>Reflux <a href=\"https://github.com/spoike/refluxjs\">https://github.com/spoike/refluxjs</a></li>\n<li>Barracks <a href=\"https://github.com/yoshuawuyts/barracks\">https://github.com/yoshuawuyts/barracks</a></li>\n<li>Delorean <a href=\"http://deloreanjs.com/\">http://deloreanjs.com/</a></li>\n<li>Fluxy <a href=\"https://github.com/jmreidy/fluxy\">https://github.com/jmreidy/fluxy</a></li>\n<li>Fluxxor <a href=\"http://fluxxor.com/\">http://fluxxor.com/</a></li>\n<li>McFly <a href=\"http://kenwheeler.github.io/mcfly/\">http://kenwheeler.github.io/mcfly/</a></li>\n</ul>\n\n<h2 id=\"inkeepingwiththeactiondispatcherstoreviewparadigm\">In keeping with the Action - Dispatcher - Store - View paradigm</h2>\n\n<ul>\n<li>Reflux merges Actions and the Dispatcher together (so Stores listen to Actions, not dispatched events)</li>\n<li>Barracks basically removes Action Creators, and very tightly couples the Dispatcher and its Stores together (so the View dispatches events directly)</li>\n<li>Delorean keeps all the same, but technically doesn’t have singleton Stores</li>\n<li>Fluxy keeps all the same</li>\n<li>Fluxxor keeps all the same</li>\n<li>McFly keeps all the same</li>\n</ul>\n\n<h2 id=\"inhandlingasynchronousrequests\">In handling asynchronous requests</h2>\n\n<p>General usage within Flux is straightforward - the one thing that is not exactly intuitive is handling asynchronous requests. This could be considered a Flux design pattern question, but general consensus from engineers at Facebook suggest that asynchronous writes actually do not belong in Stores, but in Action Creators. Asynchronous reads could belong in either.</p>\n\n<p>I think it is favorable to handle asynchronous requests in actions rather than stores because:</p>\n\n<ol>\n<li>It is a more consistent pattern to how data flows through the rest of the system  </li>\n<li>Multiple stores could be interested in listening to the success or failure of a request (such as a generic error handler store), and you typically don’t want to invoke actions from directly within your stores</li>\n</ol>\n\n<p>That said, here are a variety of different approaches to handling/facilitating asynchronous requests:</p>\n\n<ul>\n<li>Reflux does not hinder developers from the above convention in any way - one can simply set up action \"listeners,\" which could invoke the asynchronous request and invoke other actions upon completion. This pattern has been illustrated <a href=\"https://github.com/WRidder/react-spa/blob/master/src/actions/resourceActions.js#L24-L51\">here</a> or <a href=\"https://gist.github.com/simenbrekken/de69d3ce27ea5934c8b2\">here</a>. Regardless, a solution is not necessarily intuitive as it may be in a library like Fluxy</li>\n<li>Barracks emphasizes the use of waitFor as it actually handles asynchronicity correctly using a concept of middleware chains. This actually seems like it works totally fine for asynchronous writes</li>\n<li>Delorean doesn’t do anything in particular</li>\n<li>Fluxy has a built-in concept of serviceActions that directly facilitates asynchronous requests. A serviceAction will send ${ACTION} upon invocation and subsequently ${ACTION}<em>COMPLETED or ${ACTION}</em>FAILED upon completion. Fluxy's dispatcher also has a dispatcher that actually handles waitFor correctly (as opposed to just staggering the order of synchronous calls as Facebook’s Flux Dispatcher or Yahoo’s Dispatchr do), supported with the Bluebird Promises library</li>\n<li>Fluxxor doesn’t do anything in particular (though it contains some good documentation that arrives at the same conclusions as Fluxy)</li>\n<li>McFly may actually inadvertently not allow multiple events to be dispatched asynchronously from a single action (since it seems to expect a synchronous payload object to be returned). So the action factory may actually hinder putting asynchronous requests in actions and force you to handle it in your stores</li>\n</ul>\n\n<h2 id=\"addedvalue\">Added Value</h2>\n\n<ul>\n<li>Reflux actually offers a ton of convenience methods in unique ways you won’t find in these other libraries. Your stores can listen to other stores and aggregate data across other stores. Creating actions and stores for those actions is particularly easy and can be done without a lot of code. The main impetus for Reflux was that the author didn’t like that stores basically had to compare strings to determine what action had taken place and what it should do, which is very fair. The result is that you don’t have to maintain a list of Constants (or compare strings) everywhere like in the Facebook examples - you basically create actions and you set up listeners on those actions, which honestly makes a lot of sense. A side effect of this is that you don't need to maintain true Constants - multiple stores can essentially have the same API, the same action names, and there is no conflict as there would be with other Flux implementations.</li>\n<li>Barracks boasts a minimal API surface area, which is actually something to behold - there are only 3 functions exposed. But it seems like, in these 3 functions, you can actually get everything you need</li>\n<li>Delorean boasts that it is framework agnostic (React, Flight, Ractive, etc) and it is small (4K gzipped). It really is the only library that doesn’t seem straight up married to React in its demo code</li>\n<li>Fluxy leverages Mori in stores for immutable data structures, so that your components’ shouldComponentUpdate can be ridiculously fast, but that also means you need to use Mori syntax for everything within your stores. It also keeps a history of your store state, so you basically get the ability to undo for free. As mentioned above, the idea of serviceActions basically gives you asynchronous actions for free, without any extra work</li>\n<li>Fluxxor provides convenience create methods for a lot of setup as well as a StoreWatchMixin so that components can listen to Stores without a lot of boilerplate</li>\n<li>McFly provides helper factories to facilitate the creation of actions and stores. It also contains a typical store listener mixin for components</li>\n</ul>\n\n<h2 id=\"shortcomings\">Shortcomings</h2>\n\n<ul>\n<li>Reflux seems a bit bulletproof at this point - it <em>does</em> stray from the \"canonical\" Facebook Flux architecture, but it still seems fully featured and, to my attention, there are no legitimate architectural concerns</li>\n<li>Barracks makes a pretty large departure from the canonical Flux architecture by getting rid of action creators and tightly coupling the dispatcher and the stores together. This perhaps comes at the expense of flexibility. If your actions only ever affect one store, there’s no real problem, but if you hypothetically had a single action that should be handled by multiple stores, there’s no good, clean way to handle this (though I wonder how much this happens in the real world). Since Barracks is such a departure from all of these other implementations, if you needed something more conventional later, you’d probably have a hard time migrating and end up having to rewrite/rearchitecture much of your code</li>\n<li>Delorean doesn’t stray much from the “canonical” Facebook Flux architecture - the only thing is that its stores aren’t singletons, but that’s rather nitpicky</li>\n<li>Fluxy doesn’t stray much from the “canonical” Facebook Flux architecture</li>\n<li>Fluxxor doesn’t stray much from the “canonical” Facebook Flux architecture</li>\n<li>McFly’s helper factory to create actions basically makes you return one payload that will be dispatched (from the documentation, it looks like it needs to be synchronous)</li>\n</ul>\n\n<h2 id=\"takeaways\">Takeaways</h2>\n\n<p>If you want to stick to Flux as purely as possible, use Fluxxor, Delorean, or McFly.</p>\n\n<p>If you want convenience and novelty, Reflux and Fluxy will give you a pretty fun experience.</p>\n\n<p>If you are feeling rebellious or want a truly minimal surface area, go with Barracks.</p>\n\n<h2 id=\"corrections\">Corrections</h2>\n\n<p>7/17/14: Corrections to Reflux</p>\n\n<ul>\n<li>Handling asynchronous requests had read: \"Reflux’s design doesn’t exactly fit with the above paradigm, since an asynchronous read or write can’t be run from an action. It would have to be run from a Store - if other Stores were interested in whether the action succeeded or failed, you would either have to invoke follow up actions from within the Store or make interested Stores listen to changes in that Store, since that’s also a unique capability of Reflux.\"</li>\n<li>Shortcomings had read: \"Reflux has a listenTo component mixin to listen to changes in your store, but you still have to do more work than other libraries - you still have to set up both onChange and onInit methods that I’d expect to be equivalent and could be abstracted away if you enforced the presence of a function like getStoreData in either the component or the Store.\" Actually, Reflux provides a connect method that removes your need for onChange in general cases. You still may need to declare your initial state.</li>\n<li>Shortcomings had also read: \"As aforementioned, Reflux also does not have a straightforward solution to handling asynchronous requests\" which was not true and was fixed under the \"Handling Asynchronous Requests\" section</li>\n</ul>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 3,
            "created_at": 1415309291692,
            "created_by": 3,
            "updated_at": 1418867582950,
            "updated_by": 3,
            "published_at": 1415309386316,
            "published_by": 3
          },
          {
            "id": 11,
            "uuid": "93abd394-0408-4674-b357-1e78e0c431c8",
            "title": "React Conf Ticket Giveaway",
            "slug": "react-conf-ticket-giveaway",
            "markdown": "The first ever React conference is happening in January at Facebook's headquarters. The sad part is that the demand is so high, not everyone who wants to go will be able to. This is part of the reason I'll be giving away a ticket. The other reason is to create more tutorials and guides for the community. You're probably wondering what that has to do with a giveaway, but you're about to find out!\n\n##The Details\n\nThere's a few small guidelines I have. If you're interested in getting a free ticket you need to do one of two things:\n\n**Create a Blog Post**\n\n- Must be at least 300 words, excluding code examples\n- It has to be completely original\n- You must be okay with me posting it on this site, credit will be given to the author.\n\n**Make a video**\n\nIf blogging isn't your thing, you have the option of creating a video tutorial.\n\n- It must be at least five minutes long\n- needs to have the source code available\n\n##Conclusion\n\nI hope to see everyone at the conference, so please try to make it out! Just to make sure everyone understands, this is only a giveaway for a ticket, not a flight, room, or anything else. You can submit your article or video to zackifyatgmail.com. They must be unique and not something you've already made. Leave a comment with any questions or tweet [@ReactJSNews](http://twitter.com/ReactJSNews)! ",
            "html": "<p>The first ever React conference is happening in January at Facebook's headquarters. The sad part is that the demand is so high, not everyone who wants to go will be able to. This is part of the reason I'll be giving away a ticket. The other reason is to create more tutorials and guides for the community. You're probably wondering what that has to do with a giveaway, but you're about to find out!</p>\n\n<h2 id=\"thedetails\">The Details</h2>\n\n<p>There's a few small guidelines I have. If you're interested in getting a free ticket you need to do one of two things:</p>\n\n<p><strong>Create a Blog Post</strong></p>\n\n<ul>\n<li>Must be at least 300 words, excluding code examples</li>\n<li>It has to be completely original</li>\n<li>You must be okay with me posting it on this site, credit will be given to the author.</li>\n</ul>\n\n<p><strong>Make a video</strong></p>\n\n<p>If blogging isn't your thing, you have the option of creating a video tutorial.</p>\n\n<ul>\n<li>It must be at least five minutes long</li>\n<li>needs to have the source code available</li>\n</ul>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I hope to see everyone at the conference, so please try to make it out! Just to make sure everyone understands, this is only a giveaway for a ticket, not a flight, room, or anything else. You can submit your article or video to zackifyatgmail.com. They must be unique and not something you've already made. Leave a comment with any questions or tweet <a href=\"http://twitter.com/ReactJSNews\">@ReactJSNews</a>! </p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1417204703673,
            "created_by": 1,
            "updated_at": 1417205361531,
            "updated_by": 1,
            "published_at": 1417205361532,
            "published_by": 1
          },
          {
            "id": 12,
            "uuid": "6fa54bfc-c663-48ca-9176-00dbc919a543",
            "title": "Building a test suite in React JS",
            "slug": "building-a-test-suite-in-react-js",
            "markdown": "I'm primarily a Rails developer but everyday I seem to be writing more and more front end JavaScript. While writing Ruby, tests are a given part of the process. This is not the case with JavaScript. I've always found that odd and I've also written enough JavaScript to intimately know how frustrating it can be. \n\nIt's a delight writing Ruby with a test suite so why is it acceptable that most JavaScript goes into production without automated tests? I believe difficulty and fear are the culprit. It's hard to get started; the tooling, workflow and even what to test are foreign. Rather than continue to deal with difficult JavaScript applications I decided to learn how to develop a test suite.\n\nI've also been writing a lot of JavaScript with [React](http://facebook.github.io/react/). I could write a length post on why React is great library for building user interfaces, I will one day, but for now I want to mention that my test suite targets React. Another reason to mention this is that React is very conducive to testing, hopefully this becomes more apparent with my examples.\n\nIf React is a bit of a new concept to you I highly suggest taking ten minutes to work through the [official tutorial](http://facebook.github.io/react/docs/tutorial.html) - it's a worthy investment.\n\n## Application Setup\n\nIf you'd like to follow along by writing code (I strongly suggest you do) you need should clone this boilerplate for a quick start.\n\n`git clone https://github.com/jarsbe/react-webpack-boilerplate test-suite`\n\n`cd test-suite`\n\n`npm install`\n\nFirstly we need something to test. The application we'll create is simply (stupid) point of sale tool. There will be two components; an `App` component which contains a list of items and a `Checkout` component which contains a list of all selected items. The `Checkout` component also has a counter for the total number of selected items. An item can be selected by clicking on it. I told you it was simple!\n\nIf you are coding along replace the `main.js` file with the following code.\n\n```\nvar React = require('react'),\n    App = require('./app');\n\nReact.render(<App />, document.body);\n```\n\nNext remove the `component.js` file and create the `app.js` and `checkout.js` files.\n\n```\nvar React = require('react'),\n    Checkout = require('./checkout');\n\nvar App = React.createClass({\n\n  onSelectItem: function(index) {\n    var item = this.props.items[index];\n    \n    this.setState({\n      selectedItems: this.state.selectedItems.concat(item)\n    });\n  },\n\n  getInitialState: function() {\n    return {\n      selectedItems: [] \n    };\n  },\n\n  getDefaultProps: function() {\n    return {\n      items: [{ title: 'Bread' }, { title: 'Milk' }, { title: 'Cheese' }]  \n    };\n  },\n\n  render: function() {\n    var listItems = this.props.items.map(function(item, i) {\n      return <li key={\"item\" + i} onClick={this.onSelectItem.bind(null, i)}>{item.title}</li>\n    }.bind(this));\n\n    return (\n      <div> \n        <ul>{listItems}</ul>\n\n        <Checkout items={this.state.selectedItems} />\n      </div>\n    );\n  }\n});\n\nmodule.exports = App;\n```\n\n```\nvar React = require('react');\n\nvar Checkout = React.createClass({\n\n  render: function() {\n    var listItems = this.props.items.map(function(item, i) {\n      return <li key={\"selectedItem\" + i}>{item.title}</li>\n    });\n    var count = listItems.length;\n    return (\n      <div>\n        <ul>\n          {listItems}\n        </ul>\n        <span>{count}</span>\n      </div>\n    );\n  }\n});\n\nmodule.exports = Checkout;\n```\n\nTake 5 minutes to read how the application works. To run the application execute `webpack -w` (install [webpack](https://www.npmjs.org/package/webpack) if you need it), in another terminal change directory into the site `cd site` and run a server `python -m SimpleHTTPServer`. Now the application is available on `http://localhost:8000`. Time to get testing.\n\n## Testing Setup\n\nTo build a test suite we need tools. Facebook uses [Jest](https://facebook.github.io/jest/), which is a layer upon [Jasmine](http://jasmine.github.io/). Jest offers automatic mocking and uses [JSDom](https://github.com/tmpvar/jsdom) for running tests in the command line (rather than the browser). Automatic mocking is useful since we'll be testing components in isolation, all of our dependencies will be mocked by Jest. Take a look [here](https://facebook.github.io/jest/docs/automatic-mocking.html) for more information on automatic mocking. Along with Jest we need [React Tools](https://www.npmjs.org/package/react-tools) to transform any JSX during testing, this is optional but very helpful.\n\nTo install these tools.\n\n`npm install jest-cli react-tools --save-dev`\n\nTo transform JSX a helper function is required. In a `support` folder create a `preprocessor.js` file to do the work.\n\n```\nvar ReactTools = require('react-tools');\n\nmodule.exports = {\n  process: function(src) {\n    return ReactTools.transform(src);\n  }\n};\n```\n\nTo use the preprocessor add this configuration inside the `package.json` file. It adds test script and informs Jest of the preprocessor function. It also makes sure that React itself is not automatically mocked!\n\n```\n\"scripts\": {\n  \"test\": \"jest\"\n},\n\"jest\": {\n  \"scriptPreprocessor\": \"<rootDir>/support/preprocessor.js\",\n  \"unmockedModulePathPatterns\": [\n    \"<rootDir>/node_modules/react\"\n  ]\n}\n```\n\nNext add a folder called `__tests__` in the root directory. Jest is magical enough to automatically run any test in any files sitting in this directory.\n\nJust for sanity run `npm test`. Jest should run and everything should pass with flying colours.\n\n## Testing\n\nNow the moment we've been waiting for, writing tests. Here's a spoiler - all the hard work has been done. The original goal of this post was to learn how to setup a JavaScript test suite. With that out of the way everything else is an implementation detail but ending it here wouldn't be much fun, so on to the tests.\n\nThe simplest component is the `Checkout`. It accepts only one property `items` and generates a list from those `items`. The `Checkout` also calculates a total `items` count.\n\nTo get this component tested create a `checkout-test.js` file inside the `__tests__` directory. It also needs some boilerplate code like so.\n\n```\njest.dontMock('../components/checkout.js');\n\nvar React = require('react/addons'),\n    Checkout = require('../components/checkout.js'),\n    TestUtils = React.addons.TestUtils;\n\ndescribe('Checkout', function() {\n\n  it('renders each item as a li', function() {\n  \n  });\n\n  it('displays the items count', function(){\n  \n  });\n});\n```\n\nHere Jest is told not to mock the `Checkout` component then all the necessary dependencies are required. Finally there are two empty tests; one to check each item is rendered, the next to make sure the item count is correct.\n\nTo get these tests running you need to create an instance of the component, give it some items to render and finally select the DOM nodes to test.\n\n```\ndescribe('Checkout', function() {\n\n  var CheckoutElement = TestUtils.renderIntoDocument(\n    <Checkout items={[{ title: 'test' }, { title: 'test' }]} />\n  );\n\n  var items = TestUtils.scryRenderedDOMComponentsWithTag(CheckoutElement, 'li');\n  var count = TestUtils.findRenderedDOMComponentWithTag(CheckoutElement, 'span');  \n...}\n```\n\nThe final piece of the puzzle is to add the expectations to each test. \n\n```\n...\nit('renders each item as a li', function() {\n  expect(items.length).toEqual(2);\n});\n\nit('displays the items count', function(){\n  expect(count.getDOMNode().textContent).toEqual('2');\n});\n```\n\nNice and simple. We make sure there are two `li` nodes and that the items count is correct. The nice thing about React is that it's simple to test. The `Checkout` component is given data and the tests make sure it renders as expected. You can see this pattern again after testing the `App` component. \n\n```\njest.dontMock('../components/app.js');\n\nvar React = require('react/addons'),\n    App = require('../components/app.js'),\n    TestUtils = React.addons.TestUtils;\n\ndescribe('App', function() {\n\n  var AppElement = TestUtils.renderIntoDocument(<App/>);\n\n  var list = TestUtils.scryRenderedDOMComponentsWithTag(AppElement, 'ul')[0];\n  var items = TestUtils.scryRenderedDOMComponentsWithTag(AppElement, 'li');\n\n  it('has 3 default items', function() {\n    expect(list.props.children.length).toEqual(3);\n  });\n\n  it('has no selected items', function() {\n    expect(AppElement.state.selectedItems.length).toEqual(0);\n  });\n\n  describe('clicking an item', function() {\n    it('adds it to the selected items', function() {\n      TestUtils.Simulate.click(items[0]);\n      expect(AppElement.state.selectedItems.length).toEqual(1);\n    });\n  });\n});\n```\n\nThese tests follow the same create a component, give it data and expect output pattern. There's also the added complexity of component state and function calls. Clicking an item in the `App` list should add that item to the `Checkout` list. This happens via a state change in `App`. The only thing we need to test is that clicking on an item adds it to the state's selected items array.\n\n## Conclusion\n\nBefore embarking on building this test suite I had never tested any JavaScript code. It feels silly that I have put it off for so long after realising how simple and similar (to RSpec) it is. I'm also fully away that React makes this testing quite simple, given the patterns explained above. Hopefully this has helped you banish some of the fear behind testing JavaScript too.\n\nA few things that helped me was figuring out where to look in the documentation. Since I'm using 3 different tools (Jest, Jasmine & React Tools) it was confusing at first. I got started by looking at [Jest](https://facebook.github.io/jest/docs/tutorial-react.html#content) specifically the React section and then reading the API (which is very concise). Next I had a look through both the [Jasmine Guide](http://jasmine.github.io/2.0/introduction.html) and the [React Test Utils](http://facebook.github.io/react/docs/test-utils.html). It's a bit strange looking through 3 sets of documentation, but they work surprisingly well together. \n\nAs a final note you may have noticed everything is using CommonJS like modules. As a Rails developer this is very foreign and almost a reason to avoid testing all together. Don't fret however, you can have your cake and eat it too. I strongly suggest reading James McCann's post on incorporating [Webpack with Rails](http://www.jamesmccann.nz/2014/11/27/bundling-npm-modules-through-webpack-and-rails-asset-pipeline.html).  ",
            "html": "<p>I'm primarily a Rails developer but everyday I seem to be writing more and more front end JavaScript. While writing Ruby, tests are a given part of the process. This is not the case with JavaScript. I've always found that odd and I've also written enough JavaScript to intimately know how frustrating it can be. </p>\n\n<p>It's a delight writing Ruby with a test suite so why is it acceptable that most JavaScript goes into production without automated tests? I believe difficulty and fear are the culprit. It's hard to get started; the tooling, workflow and even what to test are foreign. Rather than continue to deal with difficult JavaScript applications I decided to learn how to develop a test suite.</p>\n\n<p>I've also been writing a lot of JavaScript with <a href=\"http://facebook.github.io/react/\">React</a>. I could write a length post on why React is great library for building user interfaces, I will one day, but for now I want to mention that my test suite targets React. Another reason to mention this is that React is very conducive to testing, hopefully this becomes more apparent with my examples.</p>\n\n<p>If React is a bit of a new concept to you I highly suggest taking ten minutes to work through the <a href=\"http://facebook.github.io/react/docs/tutorial.html\">official tutorial</a> - it's a worthy investment.</p>\n\n<h2 id=\"applicationsetup\">Application Setup</h2>\n\n<p>If you'd like to follow along by writing code (I strongly suggest you do) you need should clone this boilerplate for a quick start.</p>\n\n<p><code>git clone https://github.com/jarsbe/react-webpack-boilerplate test-suite</code></p>\n\n<p><code>cd test-suite</code></p>\n\n<p><code>npm install</code></p>\n\n<p>Firstly we need something to test. The application we'll create is simply (stupid) point of sale tool. There will be two components; an <code>App</code> component which contains a list of items and a <code>Checkout</code> component which contains a list of all selected items. The <code>Checkout</code> component also has a counter for the total number of selected items. An item can be selected by clicking on it. I told you it was simple!</p>\n\n<p>If you are coding along replace the <code>main.js</code> file with the following code.</p>\n\n<pre><code>var React = require('react'),  \n    App = require('./app');\n\nReact.render(&lt;App /&gt;, document.body);  \n</code></pre>\n\n<p>Next remove the <code>component.js</code> file and create the <code>app.js</code> and <code>checkout.js</code> files.</p>\n\n<pre><code>var React = require('react'),  \n    Checkout = require('./checkout');\n\nvar App = React.createClass({\n\n  onSelectItem: function(index) {\n    var item = this.props.items[index];\n\n    this.setState({\n      selectedItems: this.state.selectedItems.concat(item)\n    });\n  },\n\n  getInitialState: function() {\n    return {\n      selectedItems: [] \n    };\n  },\n\n  getDefaultProps: function() {\n    return {\n      items: [{ title: 'Bread' }, { title: 'Milk' }, { title: 'Cheese' }]  \n    };\n  },\n\n  render: function() {\n    var listItems = this.props.items.map(function(item, i) {\n      return &lt;li key={\"item\" + i} onClick={this.onSelectItem.bind(null, i)}&gt;{item.title}&lt;/li&gt;\n    }.bind(this));\n\n    return (\n      &lt;div&gt; \n        &lt;ul&gt;{listItems}&lt;/ul&gt;\n\n        &lt;Checkout items={this.state.selectedItems} /&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nmodule.exports = App;  \n</code></pre>\n\n<pre><code>var React = require('react');\n\nvar Checkout = React.createClass({\n\n  render: function() {\n    var listItems = this.props.items.map(function(item, i) {\n      return &lt;li key={\"selectedItem\" + i}&gt;{item.title}&lt;/li&gt;\n    });\n    var count = listItems.length;\n    return (\n      &lt;div&gt;\n        &lt;ul&gt;\n          {listItems}\n        &lt;/ul&gt;\n        &lt;span&gt;{count}&lt;/span&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nmodule.exports = Checkout;  \n</code></pre>\n\n<p>Take 5 minutes to read how the application works. To run the application execute <code>webpack -w</code> (install <a href=\"https://www.npmjs.org/package/webpack\">webpack</a> if you need it), in another terminal change directory into the site <code>cd site</code> and run a server <code>python -m SimpleHTTPServer</code>. Now the application is available on <code>http://localhost:8000</code>. Time to get testing.</p>\n\n<h2 id=\"testingsetup\">Testing Setup</h2>\n\n<p>To build a test suite we need tools. Facebook uses <a href=\"https://facebook.github.io/jest/\">Jest</a>, which is a layer upon <a href=\"http://jasmine.github.io/\">Jasmine</a>. Jest offers automatic mocking and uses <a href=\"https://github.com/tmpvar/jsdom\">JSDom</a> for running tests in the command line (rather than the browser). Automatic mocking is useful since we'll be testing components in isolation, all of our dependencies will be mocked by Jest. Take a look <a href=\"https://facebook.github.io/jest/docs/automatic-mocking.html\">here</a> for more information on automatic mocking. Along with Jest we need <a href=\"https://www.npmjs.org/package/react-tools\">React Tools</a> to transform any JSX during testing, this is optional but very helpful.</p>\n\n<p>To install these tools.</p>\n\n<p><code>npm install jest-cli react-tools --save-dev</code></p>\n\n<p>To transform JSX a helper function is required. In a <code>support</code> folder create a <code>preprocessor.js</code> file to do the work.</p>\n\n<pre><code>var ReactTools = require('react-tools');\n\nmodule.exports = {  \n  process: function(src) {\n    return ReactTools.transform(src);\n  }\n};\n</code></pre>\n\n<p>To use the preprocessor add this configuration inside the <code>package.json</code> file. It adds test script and informs Jest of the preprocessor function. It also makes sure that React itself is not automatically mocked!</p>\n\n<pre><code>\"scripts\": {\n  \"test\": \"jest\"\n},\n\"jest\": {\n  \"scriptPreprocessor\": \"&lt;rootDir&gt;/support/preprocessor.js\",\n  \"unmockedModulePathPatterns\": [\n    \"&lt;rootDir&gt;/node_modules/react\"\n  ]\n}\n</code></pre>\n\n<p>Next add a folder called <code>__tests__</code> in the root directory. Jest is magical enough to automatically run any test in any files sitting in this directory.</p>\n\n<p>Just for sanity run <code>npm test</code>. Jest should run and everything should pass with flying colours.</p>\n\n<h2 id=\"testing\">Testing</h2>\n\n<p>Now the moment we've been waiting for, writing tests. Here's a spoiler - all the hard work has been done. The original goal of this post was to learn how to setup a JavaScript test suite. With that out of the way everything else is an implementation detail but ending it here wouldn't be much fun, so on to the tests.</p>\n\n<p>The simplest component is the <code>Checkout</code>. It accepts only one property <code>items</code> and generates a list from those <code>items</code>. The <code>Checkout</code> also calculates a total <code>items</code> count.</p>\n\n<p>To get this component tested create a <code>checkout-test.js</code> file inside the <code>__tests__</code> directory. It also needs some boilerplate code like so.</p>\n\n<pre><code>jest.dontMock('../components/checkout.js');\n\nvar React = require('react/addons'),  \n    Checkout = require('../components/checkout.js'),\n    TestUtils = React.addons.TestUtils;\n\ndescribe('Checkout', function() {\n\n  it('renders each item as a li', function() {\n\n  });\n\n  it('displays the items count', function(){\n\n  });\n});\n</code></pre>\n\n<p>Here Jest is told not to mock the <code>Checkout</code> component then all the necessary dependencies are required. Finally there are two empty tests; one to check each item is rendered, the next to make sure the item count is correct.</p>\n\n<p>To get these tests running you need to create an instance of the component, give it some items to render and finally select the DOM nodes to test.</p>\n\n<pre><code>describe('Checkout', function() {\n\n  var CheckoutElement = TestUtils.renderIntoDocument(\n    &lt;Checkout items={[{ title: 'test' }, { title: 'test' }]} /&gt;\n  );\n\n  var items = TestUtils.scryRenderedDOMComponentsWithTag(CheckoutElement, 'li');\n  var count = TestUtils.findRenderedDOMComponentWithTag(CheckoutElement, 'span');  \n...}\n</code></pre>\n\n<p>The final piece of the puzzle is to add the expectations to each test. </p>\n\n<pre><code>...\nit('renders each item as a li', function() {  \n  expect(items.length).toEqual(2);\n});\n\nit('displays the items count', function(){  \n  expect(count.getDOMNode().textContent).toEqual('2');\n});\n</code></pre>\n\n<p>Nice and simple. We make sure there are two <code>li</code> nodes and that the items count is correct. The nice thing about React is that it's simple to test. The <code>Checkout</code> component is given data and the tests make sure it renders as expected. You can see this pattern again after testing the <code>App</code> component. </p>\n\n<pre><code>jest.dontMock('../components/app.js');\n\nvar React = require('react/addons'),  \n    App = require('../components/app.js'),\n    TestUtils = React.addons.TestUtils;\n\ndescribe('App', function() {\n\n  var AppElement = TestUtils.renderIntoDocument(&lt;App/&gt;);\n\n  var list = TestUtils.scryRenderedDOMComponentsWithTag(AppElement, 'ul')[0];\n  var items = TestUtils.scryRenderedDOMComponentsWithTag(AppElement, 'li');\n\n  it('has 3 default items', function() {\n    expect(list.props.children.length).toEqual(3);\n  });\n\n  it('has no selected items', function() {\n    expect(AppElement.state.selectedItems.length).toEqual(0);\n  });\n\n  describe('clicking an item', function() {\n    it('adds it to the selected items', function() {\n      TestUtils.Simulate.click(items[0]);\n      expect(AppElement.state.selectedItems.length).toEqual(1);\n    });\n  });\n});\n</code></pre>\n\n<p>These tests follow the same create a component, give it data and expect output pattern. There's also the added complexity of component state and function calls. Clicking an item in the <code>App</code> list should add that item to the <code>Checkout</code> list. This happens via a state change in <code>App</code>. The only thing we need to test is that clicking on an item adds it to the state's selected items array.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Before embarking on building this test suite I had never tested any JavaScript code. It feels silly that I have put it off for so long after realising how simple and similar (to RSpec) it is. I'm also fully away that React makes this testing quite simple, given the patterns explained above. Hopefully this has helped you banish some of the fear behind testing JavaScript too.</p>\n\n<p>A few things that helped me was figuring out where to look in the documentation. Since I'm using 3 different tools (Jest, Jasmine &amp; React Tools) it was confusing at first. I got started by looking at <a href=\"https://facebook.github.io/jest/docs/tutorial-react.html#content\">Jest</a> specifically the React section and then reading the API (which is very concise). Next I had a look through both the <a href=\"http://jasmine.github.io/2.0/introduction.html\">Jasmine Guide</a> and the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a>. It's a bit strange looking through 3 sets of documentation, but they work surprisingly well together. </p>\n\n<p>As a final note you may have noticed everything is using CommonJS like modules. As a Rails developer this is very foreign and almost a reason to avoid testing all together. Don't fret however, you can have your cake and eat it too. I strongly suggest reading James McCann's post on incorporating <a href=\"http://www.jamesmccann.nz/2014/11/27/bundling-npm-modules-through-webpack-and-rails-asset-pipeline.html\">Webpack with Rails</a>.  </p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "How  to build a React JS test suite",
            "meta_description": "Learn how to setup a test suite for React JS with Jest and Webpack.",
            "author_id": 6,
            "created_at": 1417918432339,
            "created_by": 6,
            "updated_at": 1418083392685,
            "updated_by": 6,
            "published_at": 1418083156796,
            "published_by": 6
          },
          {
            "id": 13,
            "uuid": "a8c655be-51e9-4689-b863-792b8972c693",
            "title": "Setting up Rails with React and Jest",
            "slug": "setting-up-rails-for-react-and-jest",
            "markdown": "[React](http://facebook.github.io/react/) is Awesome! [Rails](http://rubyonrails.org/) is Awesome! [Jest](https://facebook.github.io/jest/) is awesome! Using Jest with React in Rails should be Awesome Cubed... and yet it seems so difficult. \n\nRecently, the author was in a position where a legacy project wanted to redesign the front-end while keeping the Rails backend. The project decided to go with a React based redesign phased in, piecemeal, over time. Eventually the old JavaScript would just disappear.\n\nThe old JavaScripts had no unit testing, only some integration testing through Cucumber and Selenium. A key requirement of the new front-end was to add unit-testing to the JavaScripts, hopefully getting to a point where the team could practice some [TDD](http://en.wikipedia.org/wiki/Test-driven_development) (despite DHH's proclamation that TDD is dead).\n\nOther guides provided quite a bit of insight on the direction to take. Oliver Lance's [Rails, React, Browserify: Packaging your React components](https://medium.com/@olance/rails-react-browserify-e315001d5974) article was especially useful. However, it did not address testing. Integration tests were possible using Oliver's setup, but Jest was unusable.\n\nThis article seeks to provide a decent setup for using React in Rails, with all Node packages, Jest test functionality, and react_ujs Rails helpers. We accomplish this using two sweet gems, [react-rails](https://github.com/reactjs/react-rails) and [browserify-rails](https://github.com/browserify-rails/browserify-rails), and a little bit of glue.\n\n*All of the code used in this article is available on [GitHub](https://github.com/HurricaneJames/rex).*\n\n\nBasic Rails Setup\n=================\nWe assume a working knowledge of [Rails](http://rubyonrails.org/). However, as a simple scaffolding upon which to build, we will be using the following setup.\n\n1. `rails new rex -T`\n\n2. Remove Turbolinks *(technically optional)*\n  * from the `Gemfile`\n\n            # Gemfile\n            source 'https://rubygems.org'\n\n            gem 'rails', '4.1.8'\n            gem 'sqlite3'\n\n            gem 'sass-rails', '~> 4.0.3'\n            gem 'coffee-rails', '~> 4.0.0'\n            gem 'uglifier', '>= 1.3.0'\n            gem 'therubyracer',  platforms: :ruby\n\n            gem 'jquery-rails'\n            gem 'jbuilder', '~> 2.0'\n            gem 'spring',        group: :development\n            gem 'thin'\n\n  * from `application.js`\n\n            // app/assets/javascripts/application.js\n            //= require jquery\n            //= require jquery_ujs\n            //= require_tree .\n\n3. `cd rex; bundle install`\n\n4. `rails generate controller pages index --no-helper --no-assets --no-controller-specs --no-view-specs`\n\n5. Update Rails routes root to new `pages#index`.\n\n        # config/routes.rb\n        Rails.application.routes.draw do\n          get 'pages/index'\n          root to: 'pages#index'\n        end\n\n\nAdd in React-Rails\n==================\nThe best part of [React-Rails](https://github.com/reactjs/react-rails) is the React UJS and the view helpers. However, the stable versions of react-rails only contain react.js. Hopefully the react-rails project will correct this shortcoming in the future as react_ujs is the most valuable part of the gem. In the meantime, use the 1.0.0.pre branch directly from [GitHub](https://github.com/).\n\n1. Add 'react-rails' to the Gemfile.\n    \n        echo \"gem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'\" >> Gemfile\n\n2. `bundle install`\n\n3. Add react-rails to the application config.\n\n        # config/application.rb\n        config.react.variant      = :production\n        config.react.addons       = true\n\n4. Setup react-rails for development mode.\n\n        # config/environments/development.rb\n        config.react.variant = :development\n\n5. Add React to application by adding react via two sprocket includes `//= require react` and `//= require react_ujs`. This will change in the next section, but only slightly.\n\n    * First, create a new `components.js` file which will include all of our React components.\n\n            // app/assets/javascripts/components.js\n            //= require react\n            //= require react_ujs\n\n    * Then update `application.js` by removing the `require_tree` directive and including the new `components.js` code.\n\n            // app/assets/javascripts/application.js\n            //= require jquery\n            //= require jquery_ujs\n            //= require components\n\nAt this point it is possible to create React components by placing them in the `components.js` file and calling them with `react_component 'ComponentName', {props}`. in the Rails views. However, there are some limitations. First, it cannot make use of Jest for testing, though Jasmine and full integration tests should work. Second, it is not possible to `require()` any node packages. For example, many React applications will want to include node packages like the [es6-promise](https://www.npmjs.com/package/es6-promise) or [reflux](https://www.npmjs.com/package/reflux) packages.\n\n\n\nBrowserify-Rails\n================\nThe general solution for adding CommonJS and `require()` for React is to use a package like [browserify](http://browserify.org/). Fortunately, there's a gem for that: [browserify-rails](https://github.com/browserify-rails/browserify-rails). Installation is fairly straight forward.\n\n1. Verify that [Node](http://nodejs.org/) is installed.\n\n2. Add browserify-rails to the gemfile.\n\n        echo \"gem 'browserify-rails', '~>0.5'\" >> Gemfile\n\n3. `bundle install`\n\n4. Create a package.json file.\n\n        {\n          \"name\": \"rex-app\",\n          \"devDependencies\": {\n            \"browserify\": \"~>6.3\",\n            \"browserify-incremental\": \"^1.4.0\",\n            \"reactify\": \"^0.17.1\"\n          },\n          \"engines\": {\n            \"node\": \">=0.10.0\"\n          }\n        }\n        \n    **Important!** Any package that needs to be `require()`d should be added to the devDependencies of `package.json`.\n    \n    **Update:** 2015-02-11\n    The browserify-rails was updated to use browserify-incremental. This means we need to add 'browserify-incremental' to your package.json. Trying to use browserify-rails without browserify-incremental will appear to work fine, but will throw an exception when making changes to JavaScript files and refreshing the page. Please add the following to your package.json file to work with browserify-rails 0.7.2 and above.\n    \n            \"browserify-incremental\": \"^1.4.0\"\n\n5. `npm install`\n    * Note: add `/node_modules` to the `.gitignore` file if git is being used.\n\n6. Enable converstion of JSX to JS by adding the following param to `config/application.rb`\n\n        config.browserify_rails.commandline_options = \"--transform reactify --extension=\\\".jsx\\\"\"\n\n7. Create a `components/` directory in `app/assets/javascripts/`. All React components will go in this directory.\n\n8. Add components.\n\n        //app/assets/javascripts/components/DemoComponent.jsx\n        var DemoComponent = React.createClass({displayName: 'Demo Component',\n          render: function() {\n            return <div>Demo Component</div>;\n          }\n        });\n\n        // each file will export exactly one component\n        module.exports = DemoComponent;\n\n9. Update `components.js` to link required modules from the components directory.\n\n        // note that this is a global assignment, it will be discussed further below\n        DemoComponent = require('./components/DemoComponent');\n\n10. Add the demo component into our view.\n\n        <h1>/app/views/pages/index.html.erb</h1>\n        <%= react_component 'DemoComponent', {} %>\n\nThis setup gives us `require()`. However, there are some things to note. First, do not `require('react')` via CommonJS `require()`. React is being loaded globaly by react-rails via the sprocket `//= require react` directive. A second inclusion will cause React to throw errors. Second, each and every single component that should be available globally needs to be `require()`d in `components.js`. CommonJS does not have an equivalent to the sprocket `//= require_tree` directive.\n\n\nFixing Browserify/React-Rails\n=============================\nProblem, `require('react')` is necessary if we want to use Jest. The solution so far provides `require()` for other libraries, but not `require('react')`. So, how to get this crucial last requirement. Presently, the only workable solution is to ignore the `react.js` asset provided by react-rails and use the Node version instead.\n\n1. Replace `//= require react` with `require('react')` in `component.js`\n\n        //app/assets/javascripts/components.js\n        //= require_self\n        //= require react_ujs\n        \n        React = require('react');\n        \n        // put components here\n        DemoComponent = require('./components/DemoComponent');\n\n    `//= require_self` is called before `//= require react_ujs`. This allows `react.js` to be loaded from node modules instead of react-rails.\n\n2. Update `package.json` with the following in `devDependencies`:\n\n        \"react\": \"^0.12.0\",\n        \"react-tools\": \"^0.12.1\"\n\n3. Run `npm install` again.\n\n4. Add `var React = require('react');` to your top of each of your components. For example:\n\n        //app/assets/javascripts/components/DemoComponent.jsx\n        var React = require('react');\n        \n        var DemoComponent = React.createClass({displayName: 'Demo Component',\n          render: function() {\n            return <div>Demo Component</div>;\n          }\n        });\n        \n        module.exports = DemoComponent;\n\nNow we can `require('react')`, export the component via `module.exports`, and inject components with `react_component` Rails view helpers.\n\n\nJest\n====\nWe can finally get going with [Jest](https://facebook.github.io/jest/). Jest is based on Jasmine and used by Facebook to test React. It automatically mocks out all modules except those being tested, it can run tests in parallel, and it runs in a fake DOM implementation. Bottom line, Jest is awesome.\n\nHowever, Jest really wants a CommonJS structure where everything is included via `require()`. That is why we had to go through all the trouble in the previous sections. Fortunately, now that the hard work is done, making Jest work is relatively easy. It requires updating `package.json`, creating a new directory, and adding a couple of script files.\n\n1. Create a directory for the tests in `app/assets/javascripts/components/__tests__`.\n    \n    Note that Rails generally puts tests in a `test/` or `spec/` directory. However, it is easier to put Jest tests in a `__tests__` directory under the actual components. Otherwise, the test `require()` statements end up with lots of brittle, ugly `../../../app/assets/javascripts/components/[component]`s.\n    \n    Placing the tests here has one slight complication though. Sprocket's `//= require_tree` will include the tests as part of the build. This should not be an issue as the `components/` directory should not be part of any `//= require_tree` directive anyway, as that also would break the CommonJS structure we use.\n\n2. Create a file `app/assets/components/javascripts/__tests__/preprocessor.js` to convert any JSX to JS (remember that browserify-rails does this via reactify when running via Rails).\n\n        //app/assets/javascripts/components/__tests__/preprocessor.js\n        var ReactTools = require('react-tools');\n\n        module.exports = {\n          process: function(src) {\n            return ReactTools.transform(src);\n          }\n        };\n\n3. Add and configure Jest in the `package.json`\n\n\n        \"devDependencies\": {\n          \"jest-cli\": \"^0.2.0\",\n        },\n        \"scripts\": {\n          \"test\": \"node ./node_modules/jest-cli/bin/jest.js\"\n        },\n        \"jest\": {\n          \"rootDir\": \"./app/assets/javascripts/components\",\n          \"scriptPreprocessor\": \"<rootDir>/__tests__/preprocessor.js\",\n          \"moduleFileExtensions\": [ \"js\", \"jsx\"],\n          \"unmockedModulePathPatterns\": [\n            \"react\"\n          ],\n          \"testFileExtensions\": [\"js\", \"jsx\"],\n          \"testPathIgnorePatterns\": [ \"preprocessor.js\" ]\n        }\n\n    * `rootDir` points to the components directory (Jest will automatically load the __tests__ path by default).\n    * `scriptPreprocessor` points to our JSX preprocessor script.\n    * `umockedModulePathPatterns` tells Jest not to mock out React, which we need for our components to work.\n    * `testPathIgnorePatterns` tells Jest to ignore our JSX preprocessor. Placing `preprocessor.js` in a different directory would eliminate the need for this directive. However, this feels cleaner.\n\n4. `npm install`\n\n5. Create a test for our demo component.\n\n\n        // app/assets/javascripts/components/__tests__/DemoComponent-test.jsx\n        jest.dontMock('../DemoComponent');\n\n        describe('DemoComponent', function() {\n          it('should tell use it is a demo component', function() {\n            var React = require('react/addons');\n            var TestUtils = React.addons.TestUtils;\n            var DemoComponent = require('../DemoComponent');\n            var demoComponent = TestUtils.renderIntoDocument(<DemoComponent/>);\n                expect(demoComponent.getDOMNode().textContent).toBe('Demo Component');\n          });\n        });\n\n5. Run tests with `npm test`.\n\nNow it is possible to run Jest based tests, `require()` CommonJS packages, and inject React via Rails views.\n\nGotchas with jQuery and other Gem-based Assets\n==============================================\nThe basic Rails application uses the `jquery-rails` gem. `jquery-rails` has the same problem with `require('jquery')` that `react-rails` has with `require('react')`. This will be a problem with any application that adds assets via gems and tries to use both `//= require` and `require()` for that asset. Fortunately, jQuery is resilient to multiple includes, so the only real concern is bloat.\n\nThe maintainers of `browserify-rails` know about the [problem](https://github.com/browserify-rails/browserify-rails/issues/9). Hopefully, a solution is implemented soon. In the mean time, one potential solution is to remove the `jquery-rails` gem, `//= require jquery` and `//= require jquery_ujs`. Another solution, if your project needs these gems, is to add jQuery to `application.js` the way react.js is added to `components.js`.\n\n    //= require_self\n    //= require jquery_ujs\n    //= components\n    \n    $ = jQuery = require('jquery');\n\nThen add jQuery to the devDependencies of `package.json`. *(Remember that all `require()`d packages must be in package.json and `npm install`ed)*.\n\n    \"devDependencies\": {\n        \"jquery\": \"^2.1.1\"\n    }\n\n\n\nConclusion\n==========\nWe have setup Rails to work with React, Node packages, and Jest. To use this setup, simply add React components to the `app/assets/javascript/components/` directory and put any global components that the `react_component` view helper might need in `app/assets/javascripts/components.js`. Tests are simple Jest tests in the `app/assets/javascripts/components/__tests/` directory. Rspec/Cucumber integration tests should work as expected too.\n\nHopefully, this article has been useful to help setup a foundation for using React and Jest in your Rails application.\n",
            "html": "<p><a href=\"http://facebook.github.io/react/\">React</a> is Awesome! <a href=\"http://rubyonrails.org/\">Rails</a> is Awesome! <a href=\"https://facebook.github.io/jest/\">Jest</a> is awesome! Using Jest with React in Rails should be Awesome Cubed... and yet it seems so difficult. </p>\n\n<p>Recently, the author was in a position where a legacy project wanted to redesign the front-end while keeping the Rails backend. The project decided to go with a React based redesign phased in, piecemeal, over time. Eventually the old JavaScript would just disappear.</p>\n\n<p>The old JavaScripts had no unit testing, only some integration testing through Cucumber and Selenium. A key requirement of the new front-end was to add unit-testing to the JavaScripts, hopefully getting to a point where the team could practice some <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> (despite DHH's proclamation that TDD is dead).</p>\n\n<p>Other guides provided quite a bit of insight on the direction to take. Oliver Lance's <a href=\"https://medium.com/@olance/rails-react-browserify-e315001d5974\">Rails, React, Browserify: Packaging your React components</a> article was especially useful. However, it did not address testing. Integration tests were possible using Oliver's setup, but Jest was unusable.</p>\n\n<p>This article seeks to provide a decent setup for using React in Rails, with all Node packages, Jest test functionality, and react_ujs Rails helpers. We accomplish this using two sweet gems, <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> and <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>, and a little bit of glue.</p>\n\n<p><em>All of the code used in this article is available on <a href=\"https://github.com/HurricaneJames/rex\">GitHub</a>.</em></p>\n\n<h1 id=\"basicrailssetup\">Basic Rails Setup  </h1>\n\n<p>We assume a working knowledge of <a href=\"http://rubyonrails.org/\">Rails</a>. However, as a simple scaffolding upon which to build, we will be using the following setup.</p>\n\n<ol>\n<li><p><code>rails new rex -T</code></p></li>\n<li><p>Remove Turbolinks <em>(technically optional)</em>  </p>\n\n<ul><li><p>from the <code>Gemfile</code></p>\n\n<pre><code># Gemfile\nsource 'https://rubygems.org'\n\n\ngem 'rails', '4.1.8'\ngem 'sqlite3'\n\n\ngem 'sass-rails', '~&gt; 4.0.3'\ngem 'coffee-rails', '~&gt; 4.0.0'\ngem 'uglifier', '&gt;= 1.3.0'\ngem 'therubyracer',  platforms: :ruby\n\n\ngem 'jquery-rails'\ngem 'jbuilder', '~&gt; 2.0'\ngem 'spring',        group: :development\ngem 'thin'\n</code></pre></li>\n<li><p>from <code>application.js</code></p>\n\n<pre><code>// app/assets/javascripts/application.js\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\n</code></pre></li></ul></li>\n<li><p><code>cd rex; bundle install</code></p></li>\n<li><p><code>rails generate controller pages index --no-helper --no-assets --no-controller-specs --no-view-specs</code></p></li>\n<li><p>Update Rails routes root to new <code>pages#index</code>.</p>\n\n<pre><code># config/routes.rb\nRails.application.routes.draw do\n  get 'pages/index'\n  root to: 'pages#index'\nend\n</code></pre></li>\n</ol>\n\n<h1 id=\"addinreactrails\">Add in React-Rails  </h1>\n\n<p>The best part of <a href=\"https://github.com/reactjs/react-rails\">React-Rails</a> is the React UJS and the view helpers. However, the stable versions of react-rails only contain react.js. Hopefully the react-rails project will correct this shortcoming in the future as react_ujs is the most valuable part of the gem. In the meantime, use the 1.0.0.pre branch directly from <a href=\"https://github.com/\">GitHub</a>.</p>\n\n<ol>\n<li><p>Add 'react-rails' to the Gemfile.</p>\n\n<pre><code>echo \"gem 'react-rails', '~&gt; 1.0.0.pre', github: 'reactjs/react-rails'\" &gt;&gt; Gemfile\n</code></pre></li>\n<li><p><code>bundle install</code></p></li>\n<li><p>Add react-rails to the application config.</p>\n\n<pre><code># config/application.rb\nconfig.react.variant      = :production\nconfig.react.addons       = true\n</code></pre></li>\n<li><p>Setup react-rails for development mode.</p>\n\n<pre><code># config/environments/development.rb\nconfig.react.variant = :development\n</code></pre></li>\n<li><p>Add React to application by adding react via two sprocket includes <code>//= require react</code> and <code>//= require react_ujs</code>. This will change in the next section, but only slightly.</p>\n\n<ul><li><p>First, create a new <code>components.js</code> file which will include all of our React components.</p>\n\n<pre><code>// app/assets/javascripts/components.js\n//= require react\n//= require react_ujs\n</code></pre></li>\n<li><p>Then update <code>application.js</code> by removing the <code>require_tree</code> directive and including the new <code>components.js</code> code.</p>\n\n<pre><code>// app/assets/javascripts/application.js\n//= require jquery\n//= require jquery_ujs\n//= require components\n</code></pre></li></ul></li>\n</ol>\n\n<p>At this point it is possible to create React components by placing them in the <code>components.js</code> file and calling them with <code>react_component 'ComponentName', {props}</code>. in the Rails views. However, there are some limitations. First, it cannot make use of Jest for testing, though Jasmine and full integration tests should work. Second, it is not possible to <code>require()</code> any node packages. For example, many React applications will want to include node packages like the <a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise</a> or <a href=\"https://www.npmjs.com/package/reflux\">reflux</a> packages.</p>\n\n<h1 id=\"browserifyrails\">Browserify-Rails  </h1>\n\n<p>The general solution for adding CommonJS and <code>require()</code> for React is to use a package like <a href=\"http://browserify.org/\">browserify</a>. Fortunately, there's a gem for that: <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>. Installation is fairly straight forward.</p>\n\n<ol>\n<li><p>Verify that <a href=\"http://nodejs.org/\">Node</a> is installed.</p></li>\n<li><p>Add browserify-rails to the gemfile.</p>\n\n<pre><code>echo \"gem 'browserify-rails', '~&gt;0.5'\" &gt;&gt; Gemfile\n</code></pre></li>\n<li><p><code>bundle install</code></p></li>\n<li><p>Create a package.json file.</p>\n\n<pre><code>{\n  \"name\": \"rex-app\",\n  \"devDependencies\": {\n    \"browserify\": \"~&gt;6.3\",\n    \"browserify-incremental\": \"^1.4.0\",\n    \"reactify\": \"^0.17.1\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=0.10.0\"\n  }\n}\n</code></pre>\n\n<p><strong>Important!</strong> Any package that needs to be <code>require()</code>d should be added to the devDependencies of <code>package.json</code>.</p>\n\n<p><strong>Update:</strong> 2015-02-11\nThe browserify-rails was updated to use browserify-incremental. This means we need to add 'browserify-incremental' to your package.json. Trying to use browserify-rails without browserify-incremental will appear to work fine, but will throw an exception when making changes to JavaScript files and refreshing the page. Please add the following to your package.json file to work with browserify-rails 0.7.2 and above.</p>\n\n<pre><code>    \"browserify-incremental\": \"^1.4.0\"\n</code></pre></li>\n<li><p><code>npm install</code>  </p>\n\n<ul><li>Note: add <code>/node_modules</code> to the <code>.gitignore</code> file if git is being used.</li></ul></li>\n<li><p>Enable converstion of JSX to JS by adding the following param to <code>config/application.rb</code></p>\n\n<pre><code>config.browserify_rails.commandline_options = \"--transform reactify --extension=\\\".jsx\\\"\"\n</code></pre></li>\n<li><p>Create a <code>components/</code> directory in <code>app/assets/javascripts/</code>. All React components will go in this directory.</p></li>\n<li><p>Add components.</p>\n\n<pre><code>//app/assets/javascripts/components/DemoComponent.jsx\nvar DemoComponent = React.createClass({displayName: 'Demo Component',\n  render: function() {\n    return &lt;div&gt;Demo Component&lt;/div&gt;;\n  }\n});\n\n\n// each file will export exactly one component\nmodule.exports = DemoComponent;\n</code></pre></li>\n<li><p>Update <code>components.js</code> to link required modules from the components directory.</p>\n\n<pre><code>// note that this is a global assignment, it will be discussed further below\nDemoComponent = require('./components/DemoComponent');\n</code></pre></li>\n<li><p>Add the demo component into our view.</p>\n\n<pre><code>&lt;h1&gt;/app/views/pages/index.html.erb&lt;/h1&gt;\n&lt;%= react_component 'DemoComponent', {} %&gt;\n</code></pre></li>\n</ol>\n\n<p>This setup gives us <code>require()</code>. However, there are some things to note. First, do not <code>require('react')</code> via CommonJS <code>require()</code>. React is being loaded globaly by react-rails via the sprocket <code>//= require react</code> directive. A second inclusion will cause React to throw errors. Second, each and every single component that should be available globally needs to be <code>require()</code>d in <code>components.js</code>. CommonJS does not have an equivalent to the sprocket <code>//= require_tree</code> directive.</p>\n\n<h1 id=\"fixingbrowserifyreactrails\">Fixing Browserify/React-Rails  </h1>\n\n<p>Problem, <code>require('react')</code> is necessary if we want to use Jest. The solution so far provides <code>require()</code> for other libraries, but not <code>require('react')</code>. So, how to get this crucial last requirement. Presently, the only workable solution is to ignore the <code>react.js</code> asset provided by react-rails and use the Node version instead.</p>\n\n<ol>\n<li><p>Replace <code>//= require react</code> with <code>require('react')</code> in <code>component.js</code></p>\n\n<pre><code>//app/assets/javascripts/components.js\n//= require_self\n//= require react_ujs\n\n\nReact = require('react');\n\n\n// put components here\nDemoComponent = require('./components/DemoComponent');\n</code></pre>\n\n<p><code>//= require_self</code> is called before <code>//= require react_ujs</code>. This allows <code>react.js</code> to be loaded from node modules instead of react-rails.</p></li>\n<li><p>Update <code>package.json</code> with the following in <code>devDependencies</code>:</p>\n\n<pre><code>\"react\": \"^0.12.0\",\n\"react-tools\": \"^0.12.1\"\n</code></pre></li>\n<li><p>Run <code>npm install</code> again.</p></li>\n<li><p>Add <code>var React = require('react');</code> to your top of each of your components. For example:</p>\n\n<pre><code>//app/assets/javascripts/components/DemoComponent.jsx\nvar React = require('react');\n\n\nvar DemoComponent = React.createClass({displayName: 'Demo Component',\n  render: function() {\n    return &lt;div&gt;Demo Component&lt;/div&gt;;\n  }\n});\n\n\nmodule.exports = DemoComponent;\n</code></pre></li>\n</ol>\n\n<p>Now we can <code>require('react')</code>, export the component via <code>module.exports</code>, and inject components with <code>react_component</code> Rails view helpers.</p>\n\n<h1 id=\"jest\">Jest  </h1>\n\n<p>We can finally get going with <a href=\"https://facebook.github.io/jest/\">Jest</a>. Jest is based on Jasmine and used by Facebook to test React. It automatically mocks out all modules except those being tested, it can run tests in parallel, and it runs in a fake DOM implementation. Bottom line, Jest is awesome.</p>\n\n<p>However, Jest really wants a CommonJS structure where everything is included via <code>require()</code>. That is why we had to go through all the trouble in the previous sections. Fortunately, now that the hard work is done, making Jest work is relatively easy. It requires updating <code>package.json</code>, creating a new directory, and adding a couple of script files.</p>\n\n<ol>\n<li><p>Create a directory for the tests in <code>app/assets/javascripts/components/__tests__</code>.</p>\n\n<p>Note that Rails generally puts tests in a <code>test/</code> or <code>spec/</code> directory. However, it is easier to put Jest tests in a <code>__tests__</code> directory under the actual components. Otherwise, the test <code>require()</code> statements end up with lots of brittle, ugly <code>../../../app/assets/javascripts/components/[component]</code>s.</p>\n\n<p>Placing the tests here has one slight complication though. Sprocket's <code>//= require_tree</code> will include the tests as part of the build. This should not be an issue as the <code>components/</code> directory should not be part of any <code>//= require_tree</code> directive anyway, as that also would break the CommonJS structure we use.</p></li>\n<li><p>Create a file <code>app/assets/components/javascripts/__tests__/preprocessor.js</code> to convert any JSX to JS (remember that browserify-rails does this via reactify when running via Rails).</p>\n\n<pre><code>//app/assets/javascripts/components/__tests__/preprocessor.js\nvar ReactTools = require('react-tools');\n\n\nmodule.exports = {\n  process: function(src) {\n    return ReactTools.transform(src);\n  }\n};\n</code></pre></li>\n<li><p>Add and configure Jest in the <code>package.json</code></p>\n\n<pre><code>\"devDependencies\": {\n  \"jest-cli\": \"^0.2.0\",\n},\n\"scripts\": {\n  \"test\": \"node ./node_modules/jest-cli/bin/jest.js\"\n},\n\"jest\": {\n  \"rootDir\": \"./app/assets/javascripts/components\",\n  \"scriptPreprocessor\": \"&lt;rootDir&gt;/__tests__/preprocessor.js\",\n  \"moduleFileExtensions\": [ \"js\", \"jsx\"],\n  \"unmockedModulePathPatterns\": [\n    \"react\"\n  ],\n  \"testFileExtensions\": [\"js\", \"jsx\"],\n  \"testPathIgnorePatterns\": [ \"preprocessor.js\" ]\n}\n</code></pre>\n\n<ul><li><code>rootDir</code> points to the components directory (Jest will automatically load the <strong>tests</strong> path by default).</li>\n<li><code>scriptPreprocessor</code> points to our JSX preprocessor script.</li>\n<li><code>umockedModulePathPatterns</code> tells Jest not to mock out React, which we need for our components to work.</li>\n<li><code>testPathIgnorePatterns</code> tells Jest to ignore our JSX preprocessor. Placing <code>preprocessor.js</code> in a different directory would eliminate the need for this directive. However, this feels cleaner.</li></ul></li>\n<li><p><code>npm install</code></p></li>\n<li><p>Create a test for our demo component.</p>\n\n<pre><code>// app/assets/javascripts/components/__tests__/DemoComponent-test.jsx\njest.dontMock('../DemoComponent');\n\n\ndescribe('DemoComponent', function() {\n  it('should tell use it is a demo component', function() {\n    var React = require('react/addons');\n    var TestUtils = React.addons.TestUtils;\n    var DemoComponent = require('../DemoComponent');\n    var demoComponent = TestUtils.renderIntoDocument(&lt;DemoComponent/&gt;);\n        expect(demoComponent.getDOMNode().textContent).toBe('Demo Component');\n  });\n});\n</code></pre></li>\n<li><p>Run tests with <code>npm test</code>.</p></li>\n</ol>\n\n<p>Now it is possible to run Jest based tests, <code>require()</code> CommonJS packages, and inject React via Rails views.</p>\n\n<h1 id=\"gotchaswithjqueryandothergembasedassets\">Gotchas with jQuery and other Gem-based Assets  </h1>\n\n<p>The basic Rails application uses the <code>jquery-rails</code> gem. <code>jquery-rails</code> has the same problem with <code>require('jquery')</code> that <code>react-rails</code> has with <code>require('react')</code>. This will be a problem with any application that adds assets via gems and tries to use both <code>//= require</code> and <code>require()</code> for that asset. Fortunately, jQuery is resilient to multiple includes, so the only real concern is bloat.</p>\n\n<p>The maintainers of <code>browserify-rails</code> know about the <a href=\"https://github.com/browserify-rails/browserify-rails/issues/9\">problem</a>. Hopefully, a solution is implemented soon. In the mean time, one potential solution is to remove the <code>jquery-rails</code> gem, <code>//= require jquery</code> and <code>//= require jquery_ujs</code>. Another solution, if your project needs these gems, is to add jQuery to <code>application.js</code> the way react.js is added to <code>components.js</code>.</p>\n\n<pre><code>//= require_self\n//= require jquery_ujs\n//= components\n\n$ = jQuery = require('jquery');\n</code></pre>\n\n<p>Then add jQuery to the devDependencies of <code>package.json</code>. <em>(Remember that all <code>require()</code>d packages must be in package.json and <code>npm install</code>ed)</em>.</p>\n\n<pre><code>\"devDependencies\": {\n    \"jquery\": \"^2.1.1\"\n}\n</code></pre>\n\n<h1 id=\"conclusion\">Conclusion  </h1>\n\n<p>We have setup Rails to work with React, Node packages, and Jest. To use this setup, simply add React components to the <code>app/assets/javascript/components/</code> directory and put any global components that the <code>react_component</code> view helper might need in <code>app/assets/javascripts/components.js</code>. Tests are simple Jest tests in the <code>app/assets/javascripts/components/__tests/</code> directory. Rspec/Cucumber integration tests should work as expected too.</p>\n\n<p>Hopefully, this article has been useful to help setup a foundation for using React and Jest in your Rails application.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 8,
            "created_at": 1418698555776,
            "created_by": 8,
            "updated_at": 1423911865872,
            "updated_by": 8,
            "published_at": 1418733790744,
            "published_by": 8
          },
          {
            "id": 22,
            "uuid": "e780d942-be12-410a-a825-da70d9a9dcdf",
            "title": "React Style Guide",
            "slug": "react-style-guide-patterns-i-like",
            "markdown": "The idea of \"idiomatic\" React hasn’t been explicitly written on, so I thought I’d offer some conventions that my team at Tune has been using during the past few months of adoption. For the sake of this article, scope will be limited to coding style in React components - not styling, componentization, or Flux strategies. Also, this is meant to be a living document - and I am sure there are better ideas out there - so any comments and feedback are more than welcome.\n\n## Method Organization\n\nWe lay out a component’s methods generally based on the order of its lifecycle methods:\n\n```\nReact.createClass({\n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  render : function() {}\n});\n```\n\nSetting a displayName will help with debuggable warnings when developing - I like putting that at the very top, followed by propTypes and mixins. PropTypes are particularly useful for explicitly documenting your expectations for how the component is to be used, in addition to adding validation on incoming props.\n\nIf you have custom functions, I prefer to preface these with an underscore to differentiate them from methods that are a part of React's API. I typically place them immediately above the render function.\n\n```\nReact.createClass({\n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  _onChange : function() {},\n  _onCreate : function() {},\n  render : function() {}\n});\n```\n\nI originally thought custom functions should be placed underneath the render method, but pragmatically, it is much easier to always be able to scroll to the bottom of a file and expect to see the render every time.\n\nAs much as I can, I also prefer for all of the component's JSX to be located in that render method.\n\n## Conditional HTML\n\nIt is worth repeating that, in JSX, anything in {} among HTML will be evaluated as JavaScript. So if you want to render something simple conditionally, you can use the same conditions or ternaries as you typically would in JavaScript:\n\n```\n{this.state.show && 'This is Shown'}\n{this.state.on ? ‘On’ : ‘Off’}\n```\n\nFor anything more complicated, I have typically been creating a variable inside the render method, suffixed with 'Html':\n\n```\nvar dinosaurHtml = '';\nif (this.state.showDinosaurs) {\n  dinosaurHtml = (\n\t<section>\n\t  <DinosaurTable />\n\t  <DinosaurPager />\n\t</section>\n  );\n}\n\nreturn (\n  <div>\n\t...\n\t{dinosaurHtml}\n\t...\n  </div>\n);\n```\n\n## JSX as a Variable or Return Value\n\nJSX spanning multiple lines should be wrapped in parentheses like so:\n\n```\nvar multilineJsx = (\n  <header>\n\t<Logo />\n\t<Nav />\n  </header>\n);\n```\n\nJSX spanning a single line can disregard the parentheses,\n\n```\nvar singleLineJsx = <h1>Simple JSX</h1>;\n```\n\nbut anything complicated or with a likeliness of expanding could be wrapped in parentheses for readability/convenience.\n\n## Self-Closing Tags\n\nComponents without children should simply close themselves, as above with Logo,\n\n```\n<Logo />\n```\n\nas opposed to the unnecessarily more verbose\n\n```\n<Logo></Logo>\n```\n\n## List Iterations\n\nI used to do my list iterations like above in dinosaurHtml. I've realized that list iterations are better done inline, especially if each list item will be rendered as a component. You may even be able to reduce to one line with fat arrows:\n\n```\nrender : function() {\n  return (\n\t<ul>\n\t  {this.state.dinosaursList.map(dinosaur => <DinosaurItem item={dinosaur} />)}\n\t</ul>\n  );\n}\n```\n\nThis does require the harmony flag on JSX to be included, which will toggle certain ES6 features (fat arrows, template strings, destructuring, and rest parameters), listed here: http://kangax.github.io/compat-table/es6/#jsx. If you're incurring the cost of JSX compilation, you might as well also incur the cost of ES6 transpilation as well, using either the JSX harmony flag or a separate ES6 transpiler (we use 6to5).\n\n## Forms\n\nFor storing the form state within the component or something external like a Flux store, one should typically use the LinkedStateMixin from React Addons or write your own handler(s) respectively. Using the LinkedStateMixin is fairly straightforward, documented [here](http://facebook.github.io/react/docs/two-way-binding-helpers.html). If you went with a handler to store in Flux, you could write one abstractly and then curry it for each field, like so:\n\n```\n<input type=\"text\" value={this.state.newDinosaurName} onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n```\n\nwhere inputHandler looks something like:\n\n```\nfunction(fieldName, event) {\n  actions.propagateValue({\n    field : fieldName,\n    value : event.target.value\n  });\n}\n```\n\nAn even better pattern, though, was offered by @insin on the [Hacker News thread](https://news.ycombinator.com/item?id=8811617), noting that instead of placing an onChange handler on every form input, you really only need one handler on the form, like so:\n\n```\n<form onChange={this.inputHandler}>\n  ...\n\t<input type=\"text\" name=\"newDinosaurName\" value={this.state.newDinosaurName} />\n  ...\n</form>\n```\n\nwhere inputHandler looks like:\n\n```\nfunction(event) {  \n  actions.propagateValue({\n\tfield : event.target.name,\n\tvalue : event.target.value\n  });\n}\n```\n\n[Correction: This article had originally said that I thought uncontrolled form fields may be preferable to controlled form fields that are directly controlled by the state. This opinion was mostly unqualified - I now think it advantageous for form fields to correspond to state values and to avoid pointless DOM access.]\n\n## Formatting Attributes\n\nInstead of the long input element above, a cleaner and easier indentation would be:\n\n```\n<input\n  type=\"text\"\n  value={this.state.newDinosaurName}\n  onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n```\n\nas opposed to aligning attributes after the tag,\n\n```\n<input type=\"text\"\n       value={this.state.newDinosaurName}\n       onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n```\n\nwhich is still more readable than no indentation, but takes a little more attention than it should.\n\n## Closing\n\nThese are a handful of patterns that we've found useful in writing React, and should by no means be considered authoritative at this point. If you have contradicting ideas, please offer them in the comments as this sort of discussion is beneficial for the React ecosystem as a whole.\n\nI would love to see other style guides emerge to address styling, componentization (including when to use mixins, considerations between props and state, and communication strategies), and Flux.\n\nThanks for reading!",
            "html": "<p>The idea of \"idiomatic\" React hasn’t been explicitly written on, so I thought I’d offer some conventions that my team at Tune has been using during the past few months of adoption. For the sake of this article, scope will be limited to coding style in React components - not styling, componentization, or Flux strategies. Also, this is meant to be a living document - and I am sure there are better ideas out there - so any comments and feedback are more than welcome.</p>\n\n<h2 id=\"methodorganization\">Method Organization</h2>\n\n<p>We lay out a component’s methods generally based on the order of its lifecycle methods:</p>\n\n<pre><code>React.createClass({  \n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  render : function() {}\n});\n</code></pre>\n\n<p>Setting a displayName will help with debuggable warnings when developing - I like putting that at the very top, followed by propTypes and mixins. PropTypes are particularly useful for explicitly documenting your expectations for how the component is to be used, in addition to adding validation on incoming props.</p>\n\n<p>If you have custom functions, I prefer to preface these with an underscore to differentiate them from methods that are a part of React's API. I typically place them immediately above the render function.</p>\n\n<pre><code>React.createClass({  \n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  _onChange : function() {},\n  _onCreate : function() {},\n  render : function() {}\n});\n</code></pre>\n\n<p>I originally thought custom functions should be placed underneath the render method, but pragmatically, it is much easier to always be able to scroll to the bottom of a file and expect to see the render every time.</p>\n\n<p>As much as I can, I also prefer for all of the component's JSX to be located in that render method.</p>\n\n<h2 id=\"conditionalhtml\">Conditional HTML</h2>\n\n<p>It is worth repeating that, in JSX, anything in {} among HTML will be evaluated as JavaScript. So if you want to render something simple conditionally, you can use the same conditions or ternaries as you typically would in JavaScript:</p>\n\n<pre><code>{this.state.show &amp;&amp; 'This is Shown'}\n{this.state.on ? ‘On’ : ‘Off’}\n</code></pre>\n\n<p>For anything more complicated, I have typically been creating a variable inside the render method, suffixed with 'Html':</p>\n\n<pre><code>var dinosaurHtml = '';  \nif (this.state.showDinosaurs) {  \n  dinosaurHtml = (\n    &lt;section&gt;\n      &lt;DinosaurTable /&gt;\n      &lt;DinosaurPager /&gt;\n    &lt;/section&gt;\n  );\n}\n\nreturn (  \n  &lt;div&gt;\n    ...\n    {dinosaurHtml}\n    ...\n  &lt;/div&gt;\n);\n</code></pre>\n\n<h2 id=\"jsxasavariableorreturnvalue\">JSX as a Variable or Return Value</h2>\n\n<p>JSX spanning multiple lines should be wrapped in parentheses like so:</p>\n\n<pre><code>var multilineJsx = (  \n  &lt;header&gt;\n    &lt;Logo /&gt;\n    &lt;Nav /&gt;\n  &lt;/header&gt;\n);\n</code></pre>\n\n<p>JSX spanning a single line can disregard the parentheses,</p>\n\n<pre><code>var singleLineJsx = &lt;h1&gt;Simple JSX&lt;/h1&gt;;  \n</code></pre>\n\n<p>but anything complicated or with a likeliness of expanding could be wrapped in parentheses for readability/convenience.</p>\n\n<h2 id=\"selfclosingtags\">Self-Closing Tags</h2>\n\n<p>Components without children should simply close themselves, as above with Logo,</p>\n\n<pre><code>&lt;Logo /&gt;  \n</code></pre>\n\n<p>as opposed to the unnecessarily more verbose</p>\n\n<pre><code>&lt;Logo&gt;&lt;/Logo&gt;  \n</code></pre>\n\n<h2 id=\"listiterations\">List Iterations</h2>\n\n<p>I used to do my list iterations like above in dinosaurHtml. I've realized that list iterations are better done inline, especially if each list item will be rendered as a component. You may even be able to reduce to one line with fat arrows:</p>\n\n<pre><code>render : function() {  \n  return (\n    &lt;ul&gt;\n      {this.state.dinosaursList.map(dinosaur =&gt; &lt;DinosaurItem item={dinosaur} /&gt;)}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>\n\n<p>This does require the harmony flag on JSX to be included, which will toggle certain ES6 features (fat arrows, template strings, destructuring, and rest parameters), listed here: <a href=\"http://kangax.github.io/compat-table/es6/#jsx\">http://kangax.github.io/compat-table/es6/#jsx</a>. If you're incurring the cost of JSX compilation, you might as well also incur the cost of ES6 transpilation as well, using either the JSX harmony flag or a separate ES6 transpiler (we use 6to5).</p>\n\n<h2 id=\"forms\">Forms</h2>\n\n<p>For storing the form state within the component or something external like a Flux store, one should typically use the LinkedStateMixin from React Addons or write your own handler(s) respectively. Using the LinkedStateMixin is fairly straightforward, documented <a href=\"http://facebook.github.io/react/docs/two-way-binding-helpers.html\">here</a>. If you went with a handler to store in Flux, you could write one abstractly and then curry it for each field, like so:</p>\n\n<pre><code>&lt;input type=\"text\" value={this.state.newDinosaurName} onChange={this.inputHandler.bind(this, 'newDinosaurName')} /&gt;  \n</code></pre>\n\n<p>where inputHandler looks something like:</p>\n\n<pre><code>function(fieldName, event) {  \n  actions.propagateValue({\n    field : fieldName,\n    value : event.target.value\n  });\n}\n</code></pre>\n\n<p>An even better pattern, though, was offered by @insin on the <a href=\"https://news.ycombinator.com/item?id=8811617\">Hacker News thread</a>, noting that instead of placing an onChange handler on every form input, you really only need one handler on the form, like so:</p>\n\n<pre><code>&lt;form onChange={this.inputHandler}&gt;  \n  ...\n    &lt;input type=\"text\" name=\"newDinosaurName\" value={this.state.newDinosaurName} /&gt;\n  ...\n&lt;/form&gt;  \n</code></pre>\n\n<p>where inputHandler looks like:</p>\n\n<pre><code>function(event) {  \n  actions.propagateValue({\n    field : event.target.name,\n    value : event.target.value\n  });\n}\n</code></pre>\n\n<p>[Correction: This article had originally said that I thought uncontrolled form fields may be preferable to controlled form fields that are directly controlled by the state. This opinion was mostly unqualified - I now think it advantageous for form fields to correspond to state values and to avoid pointless DOM access.]</p>\n\n<h2 id=\"formattingattributes\">Formatting Attributes</h2>\n\n<p>Instead of the long input element above, a cleaner and easier indentation would be:</p>\n\n<pre><code>&lt;input  \n  type=\"text\"\n  value={this.state.newDinosaurName}\n  onChange={this.inputHandler.bind(this, 'newDinosaurName')} /&gt;\n</code></pre>\n\n<p>as opposed to aligning attributes after the tag,</p>\n\n<pre><code>&lt;input type=\"text\"  \n       value={this.state.newDinosaurName}\n       onChange={this.inputHandler.bind(this, 'newDinosaurName')} /&gt;\n</code></pre>\n\n<p>which is still more readable than no indentation, but takes a little more attention than it should.</p>\n\n<h2 id=\"closing\">Closing</h2>\n\n<p>These are a handful of patterns that we've found useful in writing React, and should by no means be considered authoritative at this point. If you have contradicting ideas, please offer them in the comments as this sort of discussion is beneficial for the React ecosystem as a whole.</p>\n\n<p>I would love to see other style guides emerge to address styling, componentization (including when to use mixins, considerations between props and state, and communication strategies), and Flux.</p>\n\n<p>Thanks for reading!</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 3,
            "created_at": 1419707945139,
            "created_by": 3,
            "updated_at": 1419901045009,
            "updated_by": 3,
            "published_at": 1419715145971,
            "published_by": 3
          },
          {
            "id": 23,
            "uuid": "ed4ae057-5868-4fd0-a205-33053dce1d82",
            "title": "Complex Drag and Drop Lists using React.js",
            "slug": "complex-drag-and-drop-lists-using-react",
            "markdown": "*Note: All of the code can be found on [GitHub](https://github.com/HurricaneJames/dex).*\n\nThis article covers creating an HTML5 based drag and drop container that accepts items from compatible containers, has nice animations, and only uses React.js (no Flux based architectures). \n\nOthers have written on drag and drop with React.js. It is worth the time to check out some of them. For example, Daniel at webcloud.se has a great article on creating [sortable lists with React](http://webcloud.se/truly-reactive-sortable-component/). He also created a nice [react-sortable component](https://github.com/danielstocks/react-sortable/). Dan Abramov has an awesome react-dnd library up on github, [gaearon/react-dnd](https://github.com/gaearon/react-dnd) with [demo](http://gaearon.github.io/react-dnd/#/dustbin-simple). This library has support for a simple sortable list too.\n\nHowever, none of the resources seem to cover the case of independent components that allow internal sorting and dragging items between containers. This is not surprising. Such components are very useful, but also fairly specific. \n\n*Note: The article was updated on Friday, January 2, 2015 to fix a bug when using non-text data in `onDragStart` and `onDrop`.*\n\nRequirements\n------------\nRecently, we needed a list component that would support different item types as well as drag and drop. The component is part of a migration from a legacy system into a newer React based system, so the containers needed to be completely independent of each other and added via react_component Rails helper. For various reasons, a Flux based architecture was rejected (at least temporarily, though that might be something we experiment with in the near future).\n\nThe user experience needs to be similar to the JQueryUI sortable-based widget it is replacing. Items need to be draggable inside the container. Additionally, the original compent had been heavily modified so items were draggable between containers. Dragging should also be highly interactive with smooth animations, making it clear what is happening. As a bonus we wanted to make it easy to add drag and drop support on mobile devices, even though they do not support HTML5 drag and drop.\n\n\nInitial Setup\n-------------\nFor this article we start with the basic React/Rails setup discussed in an earlier article on [Setting Up Rails for React and JEST](https://reactjsnews.com/setting-up-rails-for-react-and-jest/). This gives a good start point on a simple Rails based app. However, The main techniques used should work with any setup and it should be fairly easy extrapolating to other setups from there.\n\n    # Poor Mans Fork\n    git clone https://github.com/HurricaneJames/rex dex\n    cd dex\n    rm -rf .git\n    git init\n    git add .\n    git commit -m \"Rex to Dex\"\n\n    # Install required packages\n    bundle install\n    npm install\n\n    # Start Rails server\n    rails s\n\nThis setup gives us a view template `app/views/pages/index.html.erb` and a route, `/pages/index`, to get there. All of our components will go into the `app/assets/javascripts/components/` directory. Any global components will be added in `app/assets/javascripts/components.js`. If you are unfamiliar with Rails, open a web browser and go to `http://localhost:3000/pages/index`. At this point, you should see the Rex Demo Component.\n\n\nAdding Containers to Our View\n-----------------------------\nIn pseudo TDD fashion, we are going to assume that code is already written and work backwards. In our setup we have a `app/views/pages/index.html.erb` view template that is rendered for the user. Adding components to this template is straight forward thanks to the react-rails `react_component` helper.\n\nAlthough not required, let's change the `<h1>` element to something more useful and delete the old demo component. Also, the app title in `app/views/layouts/application.html.erb` still says Rex. These are minor annoyances, but easily fixed.\n\nNormally, the data will come from a controller or a helper. Since this is just a demo/prototype, we are going to add some ugly code to our view.\n\n    <%\n      # NEVER PUT LOGIC LIKE THIS IN A VIEW\n      random_words = [\n        [\"apple\", \"bannana\", \"watermelon\", \"oranges\", \"ice cream\"],\n        [],\n        [\"alpha\", \"beta\", \"gamma\", \"iota\"],\n        [\"hot dog\", \"mustard\", \"guava\"],\n        [\"chocolate\", \"ice cream\", \"cookies\", \"brownies\"],\n        [\"dog\", \"cat\", \"iguana\", \"leopard\", \"bear\"]\n      ]\n    %>\n    <% random_words.each_with_index do |random_word_group, index| %>\n      <h2>Container <%= index + 1 %></h2>\n      <%= react_component 'Container', { items: random_word_group } %>\n    <% end %>\n\nThis creates an array of arrays, `random_words`, representing the data for each of our containers. Then the view loops over those and adds an `<h2>` element and the `react_component` with the random words as an `items` prop.\n\nUpdating the browser shows that the view worked as expected. However, there are no React containers. Opening up the development console shows a big red error. `Uncaught ReferenceError: Container is not defined`. This is good news, it means the browser tried to add the containers, it just could not find the code.\n\n\nSimple Container Element\n------------------------\nNow we can add in a container component. First, add the non-existant Container to our `components.js` file, `Container = require('./components/Container');`. Then, create the container component, `app/assets/javascripts/components/Container.jsx`.\n\n    var React = require('react');\n    var Container = React.createClass({ displayName: \"Container\",\n      render: function() { return <ul /> }\n    });\n    module.exports = Container;\n\nReload the browser and notice that the error went away. Inspecting the DOM shows that React loaded the `<ul>` as expected. Next, we will add the items.\n\nAs with all React classes, we will start with props and state.\n\n    // in the Container createClass\n    propTypes: {\n      items: React.PropTypes.array.isRequired,\n      itemTemplate: React.PropTypes.func,\n    },\n    getDefaultProps: function() {\n      return {\n        items: [],\n        itemTemplate: TextTemplate\n      };\n    },\n    getInitialState: function() {\n      return {\n        items: this.props.items,\n      };\n    },\n\nThe Container class will accept two props, `items` and `itemTemplate`. The `items` come from the array we passed in. The `itemTemplate` defaults to a `TextTemplate` since our `index.html.erb` does not provide anything. One of the requirements was that containers be able to support different types of data. Setup like this, each container can support a different view of the data, which is what we needed. If one view per container does not meet the needs of other projects, it is possible to pass in the template as part of the items, or to determine the proper template based on some data in the item.\n\nThe `TextTemplate` is just a simple span element. By convention we have specified that all templates accept an `item` prop. In this case, that item is just text, so it works perfectly.\n\n    // app/assets/javascripts/components/Container.jsx\n    var TextTemplate = React.createClass({ displayName: \"Container-TextTemplate\",\n      propTypes: {\n        item: React.PropTypes.any.isRequired\n      },\n      render: function() {\n        return <span>{this.props.item}</span>;\n      }\n    });\n\nWe will also update the `render` function to add the new items and template.\n\n    renderListElement: function(item, key) {\n      return(\n        <li key={key} style={styles.item}>{item}</li>\n      );\n    },\n    render: function() {\n      var items = this.state.items.map(this.renderListElement);\n      return (\n        <ul ref=\"container\"\n            style={styles.container}>{items}</ul>\n      );\n    }\n\nNotice the `style={}` prop. This is a convention proposed by Christopher \"vjeux\" Chedeau in his presentation on [React: CSS in JS](https://speakerdeck.com/vjeux/react-css-in-js). Whether this is a good idea or not is debatable, but it worked well for this demo.\n\n    var styles = {\n      container: {\n        maxWidth: 550,\n        background: '#cdc',\n        border: '1px solid #777',\n        listStyle: 'none',\n        margin: 0,\n        padding: 2\n      },\n      item: {\n        backgroundColor: '#df90df',\n        margin: 3,\n        padding: 3\n      }\n    }\n\n\nIntegrating HTML5 Drag Events\n-----------------------------\nHTML5 drag and drop is a mess, but a mess that is well supported on modern desktop browsers. There are other libraries that give similar functionality, but they are limited in their own ways. For our project, and thus for this demo, we decided to go with HTML5 drag and drop. The events are not supported in mobile browsers, but libraries like JQuery UI Touch Punch show that it is fairly easy to map touch events to the drag events.\n\n*As a side bar, it might be worth checking out [Hammer.js](http://hammerjs.github.io/) or [Slip.js](https://pornel.net/slip/). Both add some powerful touch based events that also work with a mouse on the desktop.*\n\nHTML5 drag and drop is based on an attribute flag and six events. The attribute flag, `draggable` tells the browser that an element is draggable. The six events are dragstart, dragend, dragenter, dragleave, dragover, and drop. React maps those to onDragStart, onDragEnd, onDragEnter, onDragLeave, onDragOver, and onDrop.\n\nThe following code examples come directly from the completed `Container.jsx` available on [GitHub](https://github.com/HurricaneJames/dex) and use the following constants:\n\n    ALLOWED_DROP = \"move\";\n    DRAG_DROP_CONTENT_TYPE = \"custom_container_type\";\n\n* [`onDragStart`](https://developer.mozilla.org/en-US/docs/Web/Events/dragstart) is called when a drag event is initiated. The passed in event object has a very important property, `dataTransfer`. Unlike most browser events, `dataTransfer` must be modified before the end of the function.\n\n        onDragStart: function(e) {\n          var selectedIndex = parseInt(e.currentTarget.dataset.key);\n          e.dataTransfer.effectAllowed = ALLOWED_DROP_EFFECT;\n          e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, this.state.items[selectedIndex]);\n\n          this.setState({ selected: selectedIndex });\n        },\n\n    Here we set the `dataTransfer.effectAllowed` to accept `move`. It can be modified to `copy`, `copyMove`, or several others as required. We also call `dataTransfer.setData` with the item we wish to transfer. The data type (`DRAG_DROP_CONTENT_TYPE`) is used when checking if a drag event is coming from one of our containers or from something else, for example dragging a file into the browser or a non-compatible element. It will also be used to retrieve the data on a `drop` event.\n\n    *Edit: this works great with text items, but fails miserable with objects. The fix is to use JSON to stringify the data before setting it.*\n\n        e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.state.items[selectedIndex]));\n\n* [`onDragOver`](https://developer.mozilla.org/en-US/docs/Web/Events/dragover) is called whenever the user drags anything over an element that is listening for the event. We listen for this event on two elements in our list, drop zones and items.\n\n        onDragOverItem: function(e) {\n          if(this.containerAcceptsDropData(e.dataTransfer.types)) { e.preventDefault(); } \n          var over = parseInt(e.currentTarget.dataset.key);\n          if(e.clientY - e.currentTarget.offsetTop > e.currentTarget.offsetHeight / 2) { over++; }\n          if(over !== this.state.hoverOver) { this.setState({ hoverOver: over }); }\n        },\n        onDragOverDropZone: function(e) {\n          if(this.containerAcceptsDropData(e.dataTransfer.types)) { e.preventDefault(); } \n          var dropZoneId = parseInt(e.currentTarget.dataset.key);\n          if(dropZoneId !== this.state.hoverOver) { this.setState({ hoverOver: dropZoneId }); }\n        },\n\n    By default, `onDragOver` events will reset the current drag operation to `none`, preventing a drop. So the first thing we do is check if we can support any of the dataTransfer types and `preventDefault` if we do. Next, by convention, we have added a `data-key` attribute to our elements that gives us the index in the item array (`currentTarget.dataset.key`). Drop zones then guarante the new key matches the current `hoverOver` value. \n\n    Dragging over items is a little more complicated. We would like to intelligently select a drop zone and notify the user when dragging over items. Drop zones are animated to expand when they are selected. It looks better if we expand the drop zone above the item when the pointer is in the top half of the item block and the drop zone below otherwise. By convention, item elements have the same `data-key` as the drop zone above them. Therefore, if we are in the bottom half of the item, we bump `over` to be the next drop zone and the effect looks good to the user.\n\n* [`onDragEnter`](https://developer.mozilla.org/en-US/docs/Web/Events/dragenter) \"is fired when a dragged element or text selection enters a valid drop target.\" That is in quotes because it is important. In this case \"valid drop target\" means the element any element that is listening for `onDragEnter`. Note that children of these \"valid drop target[s]\" also seem to be valid drop targets that will trigger both `onDragEnter` and `onDragLeave` events, even if we have not attached any listeners. Fortunately, we can ignore `onDragEnter` in this demo because we alert the user to drop zones via `onDragOver`.\n\n* [`onDragLeave`](https://developer.mozilla.org/en-US/docs/Web/Events/dragleave) is like `onDragEnter`, but called on the element that the element was previously over. It also has the same quirk of firing when dragging over children.\n\n    We might be tempted to ignore this one too, but we need it to clean up an ugly user-facing bug. Without `onDragLeave`, draging an item from Container 1, over Container 2, and into Container 3 leaves an empty drop zone highlighted in Container 2.\n\n        onDragLeaveContainer: function(e) {\n          var x = e.clientX\n            , y = e.clientY\n            , top    = e.currentTarget.offsetTop\n            , bottom = top + e.currentTarget.offsetHeight\n            , left   = e.currentTarget.offsetLeft\n            , right  = left + e.currentTarget.offsetWidth;\n          if(y <= top || y >= bottom || x <= left || x >= right) { this.resetHover(); }\n        },\n\n    `onDragLeaveContainer` is added to the container `<ul>` component and checks to see if the point was on or outside of the container bounding rectangle. If the pointer is outside the rectangle, we know that the `dragleave` event was actually leaving the component and not just entering a child element. When the dragged element leaves the container, we `resetHover` which deselected the drop zone.\n\n* [`onDrop`](https://developer.mozilla.org/en-US/docs/Web/Events/drop) is called when there was a valid drop event. It is during this event that we add the new element into our list.\n\n        onDrop: function(e) {\n          var data   = e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE);\n          if(this.state.hoverOver !== NO_HOVER) {\n            this.state.items.splice(this.state.hoverOver, 0, data);\n            if(this.state.selected > this.state.hoverOver) {\n              this.state.selected = this.state.selected+1;\n            }\n            this.state.hoverOver = NO_HOVER;\n            this.setState(this.state);\n          }\n        },\n\n    First, we grab the data. We already know that `DRAG_DROP_CONTENT_TYPE` is supported because we allowed drop with `onDragOver`. Then we check that a drop zone is active and splice the dropped data into that section of the array. If the selected drop zone is above the selected item, we bump the selected item pointer so it still points to the originally selected item. If the drop is on a different container, then `selected` will be set to `NONE_SELECTED` which will be less than `hoverOver`. Finally, we reset the drop zone pointer as it is now filled with the new element.\n    \n    *Edit: If the `onDragStart` function was updated for objects, then the onDrop will need to deserialize the data.*\n    \n        var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));\n\n* [`onDragEnd`](https://developer.mozilla.org/en-US/docs/Web/Events/dragend) is called when the drag operation is over, whether successful or not *(see the \"Gotchas\" section below for an exception to the rule)*. It is called on the same element that responded to `onDragStart`. It is the very last event called.\n\n        onDragEnd: function(e) {\n          if(e.dataTransfer.dropEffect === ALLOWED_DROP_EFFECT) {\n            this.state.items.splice(this.state.selected, 1);\n            this.state.hoverOver = NO_HOVER;\n            this.state.selected = NONE_SELECTED;\n            this.setState(this.state);\n            return;\n          }\n          if(this.state.hoverOver !== NO_HOVER || this.state.sele) {\n            this.setState({ hoverOver: NO_HOVER, selected: NONE_SELECTED });\n          }\n        },\n\n    Here we check if the drop effect was successful, ie. `move`. `dropEffect` will be set to `none` when the drop failed or was cancelled. Assuming the drop was successful, the selected item is spliced out of the item array and discarded. `hoverOver` and `selected` are reset regardless.\n\nBinding The Handlers\n--------------------\nNow that the event handlers are in place we should start using them. First, we need to add some additional items to `getInitialState`.\n\n    selected:  NONE_SELECTED,\n    hoverOver: NO_HOVER\n\nThen we need to add the `containerAcceptsDropData` and `resetHover` functions referenced in the handlers.\n\n    containerAcceptsDropData: function(transferTypes) {\n      return Array.prototype.indexOf.call(transferTypes, DRAG_DROP_CONTENT_TYPE) !== -1;\n    },\n    resetHover: function(e) {\n      if(this.state.hoverOver !== NO_HOVER) { this.setState({ hoverOver: NO_HOVER }); }\n    },\n\nFinally, we need to update our render function.\n\n    render: function() {\n      var items = this.renderListElements();\n      return (\n        <ul ref=\"container\"\n            onDrop={this.onDrop}\n            onDragLeave={this.onDragLeaveContainer}\n            style={styles.container}>{items}</ul>\n      );\n    }\n\nRender still has responsibility for rendering the list, but now it also listens for `onDrop` and `onDragLeave` events. Previously, items used the common `items.map`. Now, this is extracted to a `renderListElement` function.\n\n    renderListElements: function() {\n      var items = [];\n      for(var i=0, length=this.state.items.length;i<length;i++) {\n        items.push(this.renderDropZone(i));\n        items.push(this.renderListElement(React.createElement(this.props.itemTemplate, { item: this.state.items[i] }), i));\n      }\n      items.push(this.renderDropZone(i));\n      return items;\n    },\n\nInstead of adding a single `<li>` element for each item, we are adding drop zone elements between all items. We also use also create a template for each of the data items and pass that template off to `renderListElement`. Outside of this demo, it would probably be better to maintain a cache of itemTemplates instead of recreating them on every render. Fortunately, React's virtual DOM keeps the performance snappy anyway.\n\nThe actual `<li>` is injected by two render functions, `renderListElement` and `renderDropZone`.\n\n    renderListElement: function(item, key) {\n      return(\n        <li key={key}\n            data-key={key}\n            style={merge(styles.item, this.state.selected===key && styles.selectedItem )}\n            onClick={this.onClick}\n            draggable  ={true}\n            onDragOver ={this.onDragOverItem}\n            onDragStart={this.onDragStart}\n            onDragEnd  ={this.onDragEnd}>{item}</li>\n      );\n    },\n    renderDropZone: function(index) {\n      return <li key={\"dropzone-\" + index}\n                 data-key={index}\n                 style={merge(styles.dropZone, this.state.hoverOver === index && styles.activeDropZone)}\n                 onDragOver={this.onDragOverDropZone}></li>;\n    },\n\nBoth functions return a `<li>` component that has an appropriate `key` for React. The component also stores that key in `data-key` for easy access in the handlers. We use the style object mentioned above and added a `merge` function to add in style properties for selected items and active drop zones.\n\nList elements are marked as `draggable` and listen for `onDragOver`, `onDragStart`, and `onDragEnd` events. Drop zones are not draggable, but they do listen for `onDragOver` events so that we can tell the browser the zone is a valid drop target (and highlight the drop zone if it is hidden for some reason).\n\nThe merge function is taken almost directly from the [React: CSS in JS](https://speakerdeck.com/vjeux/react-css-in-js) presentation. However, that presentation uses ES6 Object.assign, which currently only works with Firefox. So we modified it a bit.\n\n    function merge() {\n      var res = {};\n      for (var i=0; i<arguments.length; ++i) {\n        if (arguments[i]) {\n          objectAssign(res, arguments[i]);\n        }\n      }\n      return res;\n    }\n    function ToObject(val) {\n      if (val == null) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n      }\n      return Object(val);\n    }\n    var objectAssign = Object.assign || function (target, source) {\n      var from;\n      var keys;\n      var to = ToObject(target);\n      for (var s = 1; s < arguments.length; s++) {\n        from = arguments[s];\n        keys = Object.keys(Object(from));\n        for (var i = 0; i < keys.length; i++) {\n          to[keys[i]] = from[keys[i]];\n        }\n      }\n      return to;\n    };\n\nThe ObjectAssign code was adapted from Sindre Sorhus's [object-assign](https://github.com/sindresorhus/object-assign) code.\n\n\nUser Notification\n-----------------\nAt this point we can drag around items, but it is a little jarring. Stuff appears and disappears rapidly. We can make it better. In a nod to the simplicity of the architecture, the fix only requires modifications to the styles object.\n\n    selectedItem: {\n      backgroundColor: '#333'\n    },\n    dropZone: {\n      height: 2,\n      backgroundColor: 'transparent',\n      transition: 'height 400ms'\n    },\n    activeDropZone: {\n      height: 15,\n      background: '#fff',\n      transition: 'height 150ms'\n    }\n\nThe transition properties make the drop zones expand/collapse gracefully. The background colors make it obvoius what is selected and what is a drop zone.\n\nFinally, we have a nice component that can be used as a basis for more custom components that fit specific project needs.\n\n\nOther HTML 5 Drag and Drop Gotchas\n----------------------------------\nHTML5 Drag and Drop has a couple of \"gotchas\" that should be avoided. \n\n* Dragend is not fired if element is moved. This is marked as a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=460801) in Firefox, but Chrome does not fire the event either. Also, the drop animation looks like a cancellation. This was a bug that came up when trying to expand Daniel's [Truly Reactive Sortable Component](http://webcloud.se/truly-reactive-sortable-component/) in earlier tests. We handle it by not moving or removing the selected elements. In the \"User Notification\" section we highlight selected items in a dark grey color. It would be fairly easy to set the position to absolute and the top/left properties to be far off screen.\n\n* WebKit does not trigger CSS `:hover` when dragging. This \"gotcha\" is only verified on MacOSX, but that was enough to change directions when it cropped up. This comes up when trying to use `:hover` to animate the drop zones, which was the obvious first attempt. Though it worked out well because the final version animates better based on hovering over items too.\n\n\nConclusion\n==========\nThis article describes how to create a very specific sortable/exchangable list component. It is useful for a page with multiple containers of items, each with their own way of rendering data. It does not use any kind of Flux architecture or other means of communicating between containers, making each component very independent. Suggestions on how to expand were offered along the way. Hopefully, it has been useful. Comments, as always, are welcome.\n\n*All of the code can be found on [GitHub](https://github.com/HurricaneJames/dex).*\n",
            "html": "<p><em>Note: All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p>\n\n<p>This article covers creating an HTML5 based drag and drop container that accepts items from compatible containers, has nice animations, and only uses React.js (no Flux based architectures). </p>\n\n<p>Others have written on drag and drop with React.js. It is worth the time to check out some of them. For example, Daniel at webcloud.se has a great article on creating <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">sortable lists with React</a>. He also created a nice <a href=\"https://github.com/danielstocks/react-sortable/\">react-sortable component</a>. Dan Abramov has an awesome react-dnd library up on github, <a href=\"https://github.com/gaearon/react-dnd\">gaearon/react-dnd</a> with <a href=\"http://gaearon.github.io/react-dnd/#/dustbin-simple\">demo</a>. This library has support for a simple sortable list too.</p>\n\n<p>However, none of the resources seem to cover the case of independent components that allow internal sorting and dragging items between containers. This is not surprising. Such components are very useful, but also fairly specific. </p>\n\n<p><em>Note: The article was updated on Friday, January 2, 2015 to fix a bug when using non-text data in <code>onDragStart</code> and <code>onDrop</code>.</em></p>\n\n<h2 id=\"requirements\">Requirements  </h2>\n\n<p>Recently, we needed a list component that would support different item types as well as drag and drop. The component is part of a migration from a legacy system into a newer React based system, so the containers needed to be completely independent of each other and added via react_component Rails helper. For various reasons, a Flux based architecture was rejected (at least temporarily, though that might be something we experiment with in the near future).</p>\n\n<p>The user experience needs to be similar to the JQueryUI sortable-based widget it is replacing. Items need to be draggable inside the container. Additionally, the original compent had been heavily modified so items were draggable between containers. Dragging should also be highly interactive with smooth animations, making it clear what is happening. As a bonus we wanted to make it easy to add drag and drop support on mobile devices, even though they do not support HTML5 drag and drop.</p>\n\n<h2 id=\"initialsetup\">Initial Setup  </h2>\n\n<p>For this article we start with the basic React/Rails setup discussed in an earlier article on <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting Up Rails for React and JEST</a>. This gives a good start point on a simple Rails based app. However, The main techniques used should work with any setup and it should be fairly easy extrapolating to other setups from there.</p>\n\n<pre><code># Poor Mans Fork\ngit clone https://github.com/HurricaneJames/rex dex\ncd dex\nrm -rf .git\ngit init\ngit add .\ngit commit -m \"Rex to Dex\"\n\n# Install required packages\nbundle install\nnpm install\n\n# Start Rails server\nrails s\n</code></pre>\n\n<p>This setup gives us a view template <code>app/views/pages/index.html.erb</code> and a route, <code>/pages/index</code>, to get there. All of our components will go into the <code>app/assets/javascripts/components/</code> directory. Any global components will be added in <code>app/assets/javascripts/components.js</code>. If you are unfamiliar with Rails, open a web browser and go to <code>http://localhost:3000/pages/index</code>. At this point, you should see the Rex Demo Component.</p>\n\n<h2 id=\"addingcontainerstoourview\">Adding Containers to Our View  </h2>\n\n<p>In pseudo TDD fashion, we are going to assume that code is already written and work backwards. In our setup we have a <code>app/views/pages/index.html.erb</code> view template that is rendered for the user. Adding components to this template is straight forward thanks to the react-rails <code>react_component</code> helper.</p>\n\n<p>Although not required, let's change the <code>&lt;h1&gt;</code> element to something more useful and delete the old demo component. Also, the app title in <code>app/views/layouts/application.html.erb</code> still says Rex. These are minor annoyances, but easily fixed.</p>\n\n<p>Normally, the data will come from a controller or a helper. Since this is just a demo/prototype, we are going to add some ugly code to our view.</p>\n\n<pre><code>&lt;%\n  # NEVER PUT LOGIC LIKE THIS IN A VIEW\n  random_words = [\n    [\"apple\", \"bannana\", \"watermelon\", \"oranges\", \"ice cream\"],\n    [],\n    [\"alpha\", \"beta\", \"gamma\", \"iota\"],\n    [\"hot dog\", \"mustard\", \"guava\"],\n    [\"chocolate\", \"ice cream\", \"cookies\", \"brownies\"],\n    [\"dog\", \"cat\", \"iguana\", \"leopard\", \"bear\"]\n  ]\n%&gt;\n&lt;% random_words.each_with_index do |random_word_group, index| %&gt;\n  &lt;h2&gt;Container &lt;%= index + 1 %&gt;&lt;/h2&gt;\n  &lt;%= react_component 'Container', { items: random_word_group } %&gt;\n&lt;% end %&gt;\n</code></pre>\n\n<p>This creates an array of arrays, <code>random_words</code>, representing the data for each of our containers. Then the view loops over those and adds an <code>&lt;h2&gt;</code> element and the <code>react_component</code> with the random words as an <code>items</code> prop.</p>\n\n<p>Updating the browser shows that the view worked as expected. However, there are no React containers. Opening up the development console shows a big red error. <code>Uncaught ReferenceError: Container is not defined</code>. This is good news, it means the browser tried to add the containers, it just could not find the code.</p>\n\n<h2 id=\"simplecontainerelement\">Simple Container Element  </h2>\n\n<p>Now we can add in a container component. First, add the non-existant Container to our <code>components.js</code> file, <code>Container = require('./components/Container');</code>. Then, create the container component, <code>app/assets/javascripts/components/Container.jsx</code>.</p>\n\n<pre><code>var React = require('react');\nvar Container = React.createClass({ displayName: \"Container\",\n  render: function() { return &lt;ul /&gt; }\n});\nmodule.exports = Container;\n</code></pre>\n\n<p>Reload the browser and notice that the error went away. Inspecting the DOM shows that React loaded the <code>&lt;ul&gt;</code> as expected. Next, we will add the items.</p>\n\n<p>As with all React classes, we will start with props and state.</p>\n\n<pre><code>// in the Container createClass\npropTypes: {\n  items: React.PropTypes.array.isRequired,\n  itemTemplate: React.PropTypes.func,\n},\ngetDefaultProps: function() {\n  return {\n    items: [],\n    itemTemplate: TextTemplate\n  };\n},\ngetInitialState: function() {\n  return {\n    items: this.props.items,\n  };\n},\n</code></pre>\n\n<p>The Container class will accept two props, <code>items</code> and <code>itemTemplate</code>. The <code>items</code> come from the array we passed in. The <code>itemTemplate</code> defaults to a <code>TextTemplate</code> since our <code>index.html.erb</code> does not provide anything. One of the requirements was that containers be able to support different types of data. Setup like this, each container can support a different view of the data, which is what we needed. If one view per container does not meet the needs of other projects, it is possible to pass in the template as part of the items, or to determine the proper template based on some data in the item.</p>\n\n<p>The <code>TextTemplate</code> is just a simple span element. By convention we have specified that all templates accept an <code>item</code> prop. In this case, that item is just text, so it works perfectly.</p>\n\n<pre><code>// app/assets/javascripts/components/Container.jsx\nvar TextTemplate = React.createClass({ displayName: \"Container-TextTemplate\",\n  propTypes: {\n    item: React.PropTypes.any.isRequired\n  },\n  render: function() {\n    return &lt;span&gt;{this.props.item}&lt;/span&gt;;\n  }\n});\n</code></pre>\n\n<p>We will also update the <code>render</code> function to add the new items and template.</p>\n\n<pre><code>renderListElement: function(item, key) {\n  return(\n    &lt;li key={key} style={styles.item}&gt;{item}&lt;/li&gt;\n  );\n},\nrender: function() {\n  var items = this.state.items.map(this.renderListElement);\n  return (\n    &lt;ul ref=\"container\"\n        style={styles.container}&gt;{items}&lt;/ul&gt;\n  );\n}\n</code></pre>\n\n<p>Notice the <code>style={}</code> prop. This is a convention proposed by Christopher \"vjeux\" Chedeau in his presentation on <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a>. Whether this is a good idea or not is debatable, but it worked well for this demo.</p>\n\n<pre><code>var styles = {\n  container: {\n    maxWidth: 550,\n    background: '#cdc',\n    border: '1px solid #777',\n    listStyle: 'none',\n    margin: 0,\n    padding: 2\n  },\n  item: {\n    backgroundColor: '#df90df',\n    margin: 3,\n    padding: 3\n  }\n}\n</code></pre>\n\n<h2 id=\"integratinghtml5dragevents\">Integrating HTML5 Drag Events  </h2>\n\n<p>HTML5 drag and drop is a mess, but a mess that is well supported on modern desktop browsers. There are other libraries that give similar functionality, but they are limited in their own ways. For our project, and thus for this demo, we decided to go with HTML5 drag and drop. The events are not supported in mobile browsers, but libraries like JQuery UI Touch Punch show that it is fairly easy to map touch events to the drag events.</p>\n\n<p><em>As a side bar, it might be worth checking out <a href=\"http://hammerjs.github.io/\">Hammer.js</a> or <a href=\"https://pornel.net/slip/\">Slip.js</a>. Both add some powerful touch based events that also work with a mouse on the desktop.</em></p>\n\n<p>HTML5 drag and drop is based on an attribute flag and six events. The attribute flag, <code>draggable</code> tells the browser that an element is draggable. The six events are dragstart, dragend, dragenter, dragleave, dragover, and drop. React maps those to onDragStart, onDragEnd, onDragEnter, onDragLeave, onDragOver, and onDrop.</p>\n\n<p>The following code examples come directly from the completed <code>Container.jsx</code> available on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a> and use the following constants:</p>\n\n<pre><code>ALLOWED_DROP = \"move\";\nDRAG_DROP_CONTENT_TYPE = \"custom_container_type\";\n</code></pre>\n\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragstart\"><code>onDragStart</code></a> is called when a drag event is initiated. The passed in event object has a very important property, <code>dataTransfer</code>. Unlike most browser events, <code>dataTransfer</code> must be modified before the end of the function.</p>\n\n<pre><code>onDragStart: function(e) {\n  var selectedIndex = parseInt(e.currentTarget.dataset.key);\n  e.dataTransfer.effectAllowed = ALLOWED_DROP_EFFECT;\n  e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, this.state.items[selectedIndex]);\n\n\n  this.setState({ selected: selectedIndex });\n},\n</code></pre>\n\n<p>Here we set the <code>dataTransfer.effectAllowed</code> to accept <code>move</code>. It can be modified to <code>copy</code>, <code>copyMove</code>, or several others as required. We also call <code>dataTransfer.setData</code> with the item we wish to transfer. The data type (<code>DRAG_DROP_CONTENT_TYPE</code>) is used when checking if a drag event is coming from one of our containers or from something else, for example dragging a file into the browser or a non-compatible element. It will also be used to retrieve the data on a <code>drop</code> event.</p>\n\n<p><em>Edit: this works great with text items, but fails miserable with objects. The fix is to use JSON to stringify the data before setting it.</em></p>\n\n<pre><code>e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.state.items[selectedIndex]));\n</code></pre></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragover\"><code>onDragOver</code></a> is called whenever the user drags anything over an element that is listening for the event. We listen for this event on two elements in our list, drop zones and items.</p>\n\n<pre><code>onDragOverItem: function(e) {\n  if(this.containerAcceptsDropData(e.dataTransfer.types)) { e.preventDefault(); } \n  var over = parseInt(e.currentTarget.dataset.key);\n  if(e.clientY - e.currentTarget.offsetTop &gt; e.currentTarget.offsetHeight / 2) { over++; }\n  if(over !== this.state.hoverOver) { this.setState({ hoverOver: over }); }\n},\nonDragOverDropZone: function(e) {\n  if(this.containerAcceptsDropData(e.dataTransfer.types)) { e.preventDefault(); } \n  var dropZoneId = parseInt(e.currentTarget.dataset.key);\n  if(dropZoneId !== this.state.hoverOver) { this.setState({ hoverOver: dropZoneId }); }\n},\n</code></pre>\n\n<p>By default, <code>onDragOver</code> events will reset the current drag operation to <code>none</code>, preventing a drop. So the first thing we do is check if we can support any of the dataTransfer types and <code>preventDefault</code> if we do. Next, by convention, we have added a <code>data-key</code> attribute to our elements that gives us the index in the item array (<code>currentTarget.dataset.key</code>). Drop zones then guarante the new key matches the current <code>hoverOver</code> value. </p>\n\n<p>Dragging over items is a little more complicated. We would like to intelligently select a drop zone and notify the user when dragging over items. Drop zones are animated to expand when they are selected. It looks better if we expand the drop zone above the item when the pointer is in the top half of the item block and the drop zone below otherwise. By convention, item elements have the same <code>data-key</code> as the drop zone above them. Therefore, if we are in the bottom half of the item, we bump <code>over</code> to be the next drop zone and the effect looks good to the user.</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\"><code>onDragEnter</code></a> \"is fired when a dragged element or text selection enters a valid drop target.\" That is in quotes because it is important. In this case \"valid drop target\" means the element any element that is listening for <code>onDragEnter</code>. Note that children of these \"valid drop target[s]\" also seem to be valid drop targets that will trigger both <code>onDragEnter</code> and <code>onDragLeave</code> events, even if we have not attached any listeners. Fortunately, we can ignore <code>onDragEnter</code> in this demo because we alert the user to drop zones via <code>onDragOver</code>.</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragleave\"><code>onDragLeave</code></a> is like <code>onDragEnter</code>, but called on the element that the element was previously over. It also has the same quirk of firing when dragging over children.</p>\n\n<p>We might be tempted to ignore this one too, but we need it to clean up an ugly user-facing bug. Without <code>onDragLeave</code>, draging an item from Container 1, over Container 2, and into Container 3 leaves an empty drop zone highlighted in Container 2.</p>\n\n<pre><code>onDragLeaveContainer: function(e) {\n  var x = e.clientX\n    , y = e.clientY\n    , top    = e.currentTarget.offsetTop\n    , bottom = top + e.currentTarget.offsetHeight\n    , left   = e.currentTarget.offsetLeft\n    , right  = left + e.currentTarget.offsetWidth;\n  if(y &lt;= top || y &gt;= bottom || x &lt;= left || x &gt;= right) { this.resetHover(); }\n},\n</code></pre>\n\n<p><code>onDragLeaveContainer</code> is added to the container <code>&lt;ul&gt;</code> component and checks to see if the point was on or outside of the container bounding rectangle. If the pointer is outside the rectangle, we know that the <code>dragleave</code> event was actually leaving the component and not just entering a child element. When the dragged element leaves the container, we <code>resetHover</code> which deselected the drop zone.</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\"><code>onDrop</code></a> is called when there was a valid drop event. It is during this event that we add the new element into our list.</p>\n\n<pre><code>onDrop: function(e) {\n  var data   = e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE);\n  if(this.state.hoverOver !== NO_HOVER) {\n    this.state.items.splice(this.state.hoverOver, 0, data);\n    if(this.state.selected &gt; this.state.hoverOver) {\n      this.state.selected = this.state.selected+1;\n    }\n    this.state.hoverOver = NO_HOVER;\n    this.setState(this.state);\n  }\n},\n</code></pre>\n\n<p>First, we grab the data. We already know that <code>DRAG_DROP_CONTENT_TYPE</code> is supported because we allowed drop with <code>onDragOver</code>. Then we check that a drop zone is active and splice the dropped data into that section of the array. If the selected drop zone is above the selected item, we bump the selected item pointer so it still points to the originally selected item. If the drop is on a different container, then <code>selected</code> will be set to <code>NONE_SELECTED</code> which will be less than <code>hoverOver</code>. Finally, we reset the drop zone pointer as it is now filled with the new element.</p>\n\n<p><em>Edit: If the <code>onDragStart</code> function was updated for objects, then the onDrop will need to deserialize the data.</em></p>\n\n<pre><code>var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));\n</code></pre></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragend\"><code>onDragEnd</code></a> is called when the drag operation is over, whether successful or not <em>(see the \"Gotchas\" section below for an exception to the rule)</em>. It is called on the same element that responded to <code>onDragStart</code>. It is the very last event called.</p>\n\n<pre><code>onDragEnd: function(e) {\n  if(e.dataTransfer.dropEffect === ALLOWED_DROP_EFFECT) {\n    this.state.items.splice(this.state.selected, 1);\n    this.state.hoverOver = NO_HOVER;\n    this.state.selected = NONE_SELECTED;\n    this.setState(this.state);\n    return;\n  }\n  if(this.state.hoverOver !== NO_HOVER || this.state.sele) {\n    this.setState({ hoverOver: NO_HOVER, selected: NONE_SELECTED });\n  }\n},\n</code></pre>\n\n<p>Here we check if the drop effect was successful, ie. <code>move</code>. <code>dropEffect</code> will be set to <code>none</code> when the drop failed or was cancelled. Assuming the drop was successful, the selected item is spliced out of the item array and discarded. <code>hoverOver</code> and <code>selected</code> are reset regardless.</p></li>\n</ul>\n\n<h2 id=\"bindingthehandlers\">Binding The Handlers  </h2>\n\n<p>Now that the event handlers are in place we should start using them. First, we need to add some additional items to <code>getInitialState</code>.</p>\n\n<pre><code>selected:  NONE_SELECTED,\nhoverOver: NO_HOVER\n</code></pre>\n\n<p>Then we need to add the <code>containerAcceptsDropData</code> and <code>resetHover</code> functions referenced in the handlers.</p>\n\n<pre><code>containerAcceptsDropData: function(transferTypes) {\n  return Array.prototype.indexOf.call(transferTypes, DRAG_DROP_CONTENT_TYPE) !== -1;\n},\nresetHover: function(e) {\n  if(this.state.hoverOver !== NO_HOVER) { this.setState({ hoverOver: NO_HOVER }); }\n},\n</code></pre>\n\n<p>Finally, we need to update our render function.</p>\n\n<pre><code>render: function() {\n  var items = this.renderListElements();\n  return (\n    &lt;ul ref=\"container\"\n        onDrop={this.onDrop}\n        onDragLeave={this.onDragLeaveContainer}\n        style={styles.container}&gt;{items}&lt;/ul&gt;\n  );\n}\n</code></pre>\n\n<p>Render still has responsibility for rendering the list, but now it also listens for <code>onDrop</code> and <code>onDragLeave</code> events. Previously, items used the common <code>items.map</code>. Now, this is extracted to a <code>renderListElement</code> function.</p>\n\n<pre><code>renderListElements: function() {\n  var items = [];\n  for(var i=0, length=this.state.items.length;i&lt;length;i++) {\n    items.push(this.renderDropZone(i));\n    items.push(this.renderListElement(React.createElement(this.props.itemTemplate, { item: this.state.items[i] }), i));\n  }\n  items.push(this.renderDropZone(i));\n  return items;\n},\n</code></pre>\n\n<p>Instead of adding a single <code>&lt;li&gt;</code> element for each item, we are adding drop zone elements between all items. We also use also create a template for each of the data items and pass that template off to <code>renderListElement</code>. Outside of this demo, it would probably be better to maintain a cache of itemTemplates instead of recreating them on every render. Fortunately, React's virtual DOM keeps the performance snappy anyway.</p>\n\n<p>The actual <code>&lt;li&gt;</code> is injected by two render functions, <code>renderListElement</code> and <code>renderDropZone</code>.</p>\n\n<pre><code>renderListElement: function(item, key) {\n  return(\n    &lt;li key={key}\n        data-key={key}\n        style={merge(styles.item, this.state.selected===key &amp;&amp; styles.selectedItem )}\n        onClick={this.onClick}\n        draggable  ={true}\n        onDragOver ={this.onDragOverItem}\n        onDragStart={this.onDragStart}\n        onDragEnd  ={this.onDragEnd}&gt;{item}&lt;/li&gt;\n  );\n},\nrenderDropZone: function(index) {\n  return &lt;li key={\"dropzone-\" + index}\n             data-key={index}\n             style={merge(styles.dropZone, this.state.hoverOver === index &amp;&amp; styles.activeDropZone)}\n             onDragOver={this.onDragOverDropZone}&gt;&lt;/li&gt;;\n},\n</code></pre>\n\n<p>Both functions return a <code>&lt;li&gt;</code> component that has an appropriate <code>key</code> for React. The component also stores that key in <code>data-key</code> for easy access in the handlers. We use the style object mentioned above and added a <code>merge</code> function to add in style properties for selected items and active drop zones.</p>\n\n<p>List elements are marked as <code>draggable</code> and listen for <code>onDragOver</code>, <code>onDragStart</code>, and <code>onDragEnd</code> events. Drop zones are not draggable, but they do listen for <code>onDragOver</code> events so that we can tell the browser the zone is a valid drop target (and highlight the drop zone if it is hidden for some reason).</p>\n\n<p>The merge function is taken almost directly from the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> presentation. However, that presentation uses ES6 Object.assign, which currently only works with Firefox. So we modified it a bit.</p>\n\n<pre><code>function merge() {\n  var res = {};\n  for (var i=0; i&lt;arguments.length; ++i) {\n    if (arguments[i]) {\n      objectAssign(res, arguments[i]);\n    }\n  }\n  return res;\n}\nfunction ToObject(val) {\n  if (val == null) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n  return Object(val);\n}\nvar objectAssign = Object.assign || function (target, source) {\n  var from;\n  var keys;\n  var to = ToObject(target);\n  for (var s = 1; s &lt; arguments.length; s++) {\n    from = arguments[s];\n    keys = Object.keys(Object(from));\n    for (var i = 0; i &lt; keys.length; i++) {\n      to[keys[i]] = from[keys[i]];\n    }\n  }\n  return to;\n};\n</code></pre>\n\n<p>The ObjectAssign code was adapted from Sindre Sorhus's <a href=\"https://github.com/sindresorhus/object-assign\">object-assign</a> code.</p>\n\n<h2 id=\"usernotification\">User Notification  </h2>\n\n<p>At this point we can drag around items, but it is a little jarring. Stuff appears and disappears rapidly. We can make it better. In a nod to the simplicity of the architecture, the fix only requires modifications to the styles object.</p>\n\n<pre><code>selectedItem: {\n  backgroundColor: '#333'\n},\ndropZone: {\n  height: 2,\n  backgroundColor: 'transparent',\n  transition: 'height 400ms'\n},\nactiveDropZone: {\n  height: 15,\n  background: '#fff',\n  transition: 'height 150ms'\n}\n</code></pre>\n\n<p>The transition properties make the drop zones expand/collapse gracefully. The background colors make it obvoius what is selected and what is a drop zone.</p>\n\n<p>Finally, we have a nice component that can be used as a basis for more custom components that fit specific project needs.</p>\n\n<h2 id=\"otherhtml5draganddropgotchas\">Other HTML 5 Drag and Drop Gotchas  </h2>\n\n<p>HTML5 Drag and Drop has a couple of \"gotchas\" that should be avoided. </p>\n\n<ul>\n<li><p>Dragend is not fired if element is moved. This is marked as a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=460801\">bug</a> in Firefox, but Chrome does not fire the event either. Also, the drop animation looks like a cancellation. This was a bug that came up when trying to expand Daniel's <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">Truly Reactive Sortable Component</a> in earlier tests. We handle it by not moving or removing the selected elements. In the \"User Notification\" section we highlight selected items in a dark grey color. It would be fairly easy to set the position to absolute and the top/left properties to be far off screen.</p></li>\n<li><p>WebKit does not trigger CSS <code>:hover</code> when dragging. This \"gotcha\" is only verified on MacOSX, but that was enough to change directions when it cropped up. This comes up when trying to use <code>:hover</code> to animate the drop zones, which was the obvious first attempt. Though it worked out well because the final version animates better based on hovering over items too.</p></li>\n</ul>\n\n<h1 id=\"conclusion\">Conclusion  </h1>\n\n<p>This article describes how to create a very specific sortable/exchangable list component. It is useful for a page with multiple containers of items, each with their own way of rendering data. It does not use any kind of Flux architecture or other means of communicating between containers, making each component very independent. Suggestions on how to expand were offered along the way. Hopefully, it has been useful. Comments, as always, are welcome.</p>\n\n<p><em>All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 8,
            "created_at": 1419888992852,
            "created_by": 8,
            "updated_at": 1420227681650,
            "updated_by": 8,
            "published_at": 1419889080000,
            "published_by": 8
          },
          {
            "id": 24,
            "uuid": "22539c15-c243-4ea7-a21f-76626bd9c755",
            "title": "Thanks for Subscribing!",
            "slug": "thanks",
            "markdown": "You're going to love the content in this newsletter. All that's left is to confirm your subscription by checking your email!",
            "html": "<p>You're going to love the content in this newsletter. All that's left is to confirm your subscription by checking your email!</p>",
            "image": null,
            "featured": 0,
            "page": 1,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1419893885723,
            "created_by": 1,
            "updated_at": 1419893972895,
            "updated_by": 1,
            "published_at": 1419893972896,
            "published_by": 1
          },
          {
            "id": 25,
            "uuid": "b05afdea-7200-49be-bc10-bee8f227c1c5",
            "title": "Serverside React Rendering: Isomorphic JavaScript with ReactJS + Node",
            "slug": "isomorphic-javascript-with-react-node",
            "markdown": "\n### What is Isomorphic JavaScript ?\n\nShared JavaScript that runs on both the client & server.\n\n#### What's the point?\nJavaScript driven MVCs (angular, ember, backbone, etc.) render on DOM load, this can be really slowwwww & can make for a bad user experience. \n\nAnother major problem is that they aren't indexable by search engines (without paying $$ for a third party service like https://prerender.io/). If your app is serving any kind of data that people might be searching for, **this is a bad thing**.\n\nWhen you render JavaScript on the server side you can solve these problems and be super cool while doing so!\n\n#### Isomorphic Javascript Benefits:\n* Better overall user experience\n* Search engine indexable\n* Easier code maintenance\n* Free progressive enhancements\n\nI've built a live example of isomorphic JS for you to check out here: https://github.com/DavidWells/isomorphic-react-example\n\nThe demo uses the [griddle react](http://dynamictyped.github.io/Griddle/) component to show how you can have apps with large data sets indexed by search engines and thus easier to find by potential users in search engines.\n\n### Tutorial & Video!\n\n<iframe width=\"640\" height=\"480\" src=\"//www.youtube.com/embed/8wfY4TGtMUo\" frameborder=\"0\" allowfullscreen></iframe>\n\nIn /server.js install the jsx transpiler:\n```\n// Make sure to include the JSX transpiler\nrequire(\"node-jsx\").install();\n```\n\nThen change components to Node friendly syntax where you module.exports the component if it's in a seperate file\n\nAlso make sure to `React.createFactory` your component for it to be rendered server side\n```js\n/** @jsx React.DOM */\n\nvar React = require('react/addons');\n\n/* create factory with griddle component */\nvar Griddle = React.createFactory(require('griddle-react'));\n\nvar fakeData = require('../data/fakeData.js').fakeData;\nvar columnMeta = require('../data/columnMeta.js').columnMeta;\nvar resultsPerPage = 100;\n\nvar ReactApp = React.createClass({\n\n      componentDidMount: function () {\n        console.log(fakeData);\n\n      },\n\n      render: function () {\n\n        return (\n          <div id=\"table-area\">\n\n             <Griddle results={fakeData} columnMetadata={columnMeta} resultsPerPage={resultsPerPage} tableClassName=\"table\"/>\n\n          </div>\n        )\n      }\n\n  });\n\n/* Module.exports instead of normal dom mounting */\nmodule.exports.ReactApp = ReactApp;\n/* Normal mounting happens inside of /main.js and is bundled with browerify */\n```\n\nNow the magic happens with routes using `React.renderToString` inside /app/routes/coreRoutes.js:\n```\nvar React = require('react/addons');\nvar ReactApp = React.createFactory(require('../components/ReactApp').ReactApp);\n\nmodule.exports = function(app) {\n\n\tapp.get('/', function(req, res){\n    \t// React.renderToString takes your component \n        // and generates the markup\n\t\tvar reactHtml = React.renderToString(ReactApp({}));\n        // Output html rendered by react\n\t\t// console.log(myAppHtml);\n\t    res.render('index.ejs', {reactOutput: reactHtml});\n\t});\n\n};\n```\n\nThe `reactOutput` variable is then passed into the template:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>React Isomorphic Server Side Rendering Example</title>\n    <link href='/styles.css' rel=\"stylesheet\">\n  </head>\n  <body>\n\t<h1 id=\"main-title\">React Isomorphic Server Side Rendering Example</h1>\n    <!-- reactOutput is the server compiled React Dom Nodes -->\n    <!-- comment out reactOutput to see empty non indexable source in browser -->\n    <div id=\"react-main-mount\">\n      <%- reactOutput %>\n    </div>\n\n\t<!-- comment out main.js to ONLY see server side rendering -->\n\t<script src=\"/main.js\"></script>\n\n\n  </body>\n</html>\n\n```\n\n\n### Demo Install Instructions\n\nIf you would like to download the code and try it for yourself:\n\n1. Clone the repo: `git clone git@github.com:HelloClicky/helloClicky.git`\n2. Install packages: `npm install`\n3. Launch: `node server.js`\n4. Visit in your browser at: `http://localhost:4444`\n5. To see serverside rendering, comment out main.js from the /views/index.ejs file. This will show what is rendered purely from the server side.\n\nBuild changes with `gulp`\n\n### Other Isomorphic Tutorials & Resources\n\n##### Server-Client with React\n* [Server/Client With React, Part 1: Getting Started](http://eflorenzano.com/blog/2014/04/09/react-part-1-getting-started/)\n* [Server/Client With React, Part 2: The Build System](http://eflorenzano.com/blog/2014/04/10/react-part-2-build-system/)\n* [Server/Client With React, Part 3: Frontend Server](http://eflorenzano.com/blog/2014/04/11/react-part-3-frontend-server/)\n\n##### Server Side rendering\n* [Server Side Rendering for ReactJS](http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/)\n* [React Server Rendering](https://github.com/mhart/react-server-example)\n* [JDK8 + Facebook React: Rendering single page apps on the server](http://augustl.com/blog/2014/jdk8_react_rendering_on_server/)\n* [Server-side React with PHP – part 1](http://www.phpied.com/server-side-react-with-php/)\n* [Server-side React with PHP – part 2](http://www.phpied.com/server-side-react-with-php-part-2/)\n* [Server-rendered React components in Rails](http://bensmithett.com/server-rendered-react-components-in-rails/)\n\n### New to React? Check out these tutorials\n* [ReactJS For Stupid People](http://blog.andrewray.me/reactjs-for-stupid-people/)\n* [Flux For Stupid People](http://blog.andrewray.me/flux-for-stupid-people/)\n\n",
            "html": "<h3 id=\"whatisisomorphicjavascript\">What is Isomorphic JavaScript ?</h3>\n\n<p>Shared JavaScript that runs on both the client &amp; server.</p>\n\n<h4 id=\"whatsthepoint\">What's the point?</h4>\n\n<p>JavaScript driven MVCs (angular, ember, backbone, etc.) render on DOM load, this can be really slowwwww &amp; can make for a bad user experience. </p>\n\n<p>Another major problem is that they aren't indexable by search engines (without paying $$ for a third party service like <a href=\"https://prerender.io/\">https://prerender.io/</a>). If your app is serving any kind of data that people might be searching for, <strong>this is a bad thing</strong>.</p>\n\n<p>When you render JavaScript on the server side you can solve these problems and be super cool while doing so!</p>\n\n<h4 id=\"isomorphicjavascriptbenefits\">Isomorphic Javascript Benefits:</h4>\n\n<ul>\n<li>Better overall user experience</li>\n<li>Search engine indexable</li>\n<li>Easier code maintenance</li>\n<li>Free progressive enhancements</li>\n</ul>\n\n<p>I've built a live example of isomorphic JS for you to check out here: <a href=\"https://github.com/DavidWells/isomorphic-react-example\">https://github.com/DavidWells/isomorphic-react-example</a></p>\n\n<p>The demo uses the <a href=\"http://dynamictyped.github.io/Griddle/\">griddle react</a> component to show how you can have apps with large data sets indexed by search engines and thus easier to find by potential users in search engines.</p>\n\n<h3 id=\"tutorialvideo\">Tutorial &amp; Video!</h3>\n\n<iframe width=\"640\" height=\"480\" src=\"//www.youtube.com/embed/8wfY4TGtMUo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>In /server.js install the jsx transpiler:  </p>\n\n<pre><code>// Make sure to include the JSX transpiler\nrequire(\"node-jsx\").install();  \n</code></pre>\n\n<p>Then change components to Node friendly syntax where you module.exports the component if it's in a seperate file</p>\n\n<p>Also make sure to <code>React.createFactory</code> your component for it to be rendered server side  </p>\n\n<pre><code class=\"js\">/** @jsx React.DOM */\n\nvar React = require('react/addons');\n\n/* create factory with griddle component */\nvar Griddle = React.createFactory(require('griddle-react'));\n\nvar fakeData = require('../data/fakeData.js').fakeData;  \nvar columnMeta = require('../data/columnMeta.js').columnMeta;  \nvar resultsPerPage = 100;\n\nvar ReactApp = React.createClass({\n\n      componentDidMount: function () {\n        console.log(fakeData);\n\n      },\n\n      render: function () {\n\n        return (\n          &lt;div id=\"table-area\"&gt;\n\n             &lt;Griddle results={fakeData} columnMetadata={columnMeta} resultsPerPage={resultsPerPage} tableClassName=\"table\"/&gt;\n\n          &lt;/div&gt;\n        )\n      }\n\n  });\n\n/* Module.exports instead of normal dom mounting */\nmodule.exports.ReactApp = ReactApp;  \n/* Normal mounting happens inside of /main.js and is bundled with browerify */\n</code></pre>\n\n<p>Now the magic happens with routes using <code>React.renderToString</code> inside /app/routes/coreRoutes.js:  </p>\n\n<pre><code>var React = require('react/addons');  \nvar ReactApp = React.createFactory(require('../components/ReactApp').ReactApp);\n\nmodule.exports = function(app) {\n\n    app.get('/', function(req, res){\n        // React.renderToString takes your component \n        // and generates the markup\n        var reactHtml = React.renderToString(ReactApp({}));\n        // Output html rendered by react\n        // console.log(myAppHtml);\n        res.render('index.ejs', {reactOutput: reactHtml});\n    });\n\n};\n</code></pre>\n\n<p>The <code>reactOutput</code> variable is then passed into the template:  </p>\n\n<pre><code>&lt;!doctype html&gt;  \n&lt;html&gt;  \n  &lt;head&gt;\n    &lt;title&gt;React Isomorphic Server Side Rendering Example&lt;/title&gt;\n    &lt;link href='/styles.css' rel=\"stylesheet\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 id=\"main-title\"&gt;React Isomorphic Server Side Rendering Example&lt;/h1&gt;\n    &lt;!-- reactOutput is the server compiled React Dom Nodes --&gt;\n    &lt;!-- comment out reactOutput to see empty non indexable source in browser --&gt;\n    &lt;div id=\"react-main-mount\"&gt;\n      &lt;%- reactOutput %&gt;\n    &lt;/div&gt;\n\n    &lt;!-- comment out main.js to ONLY see server side rendering --&gt;\n    &lt;script src=\"/main.js\"&gt;&lt;/script&gt;\n\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3 id=\"demoinstallinstructions\">Demo Install Instructions</h3>\n\n<p>If you would like to download the code and try it for yourself:</p>\n\n<ol>\n<li>Clone the repo: <code>git clone git@github.com:HelloClicky/helloClicky.git</code>  </li>\n<li>Install packages: <code>npm install</code>  </li>\n<li>Launch: <code>node server.js</code>  </li>\n<li>Visit in your browser at: <code>http://localhost:4444</code>  </li>\n<li>To see serverside rendering, comment out main.js from the /views/index.ejs file. This will show what is rendered purely from the server side.</li>\n</ol>\n\n<p>Build changes with <code>gulp</code></p>\n\n<h3 id=\"otherisomorphictutorialsresources\">Other Isomorphic Tutorials &amp; Resources</h3>\n\n<h5 id=\"serverclientwithreact\">Server-Client with React</h5>\n\n<ul>\n<li><a href=\"http://eflorenzano.com/blog/2014/04/09/react-part-1-getting-started/\">Server/Client With React, Part 1: Getting Started</a></li>\n<li><a href=\"http://eflorenzano.com/blog/2014/04/10/react-part-2-build-system/\">Server/Client With React, Part 2: The Build System</a></li>\n<li><a href=\"http://eflorenzano.com/blog/2014/04/11/react-part-3-frontend-server/\">Server/Client With React, Part 3: Frontend Server</a></li>\n</ul>\n\n<h5 id=\"serversiderendering\">Server Side rendering</h5>\n\n<ul>\n<li><a href=\"http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/\">Server Side Rendering for ReactJS</a></li>\n<li><a href=\"https://github.com/mhart/react-server-example\">React Server Rendering</a></li>\n<li><a href=\"http://augustl.com/blog/2014/jdk8_react_rendering_on_server/\">JDK8 + Facebook React: Rendering single page apps on the server</a></li>\n<li><a href=\"http://www.phpied.com/server-side-react-with-php/\">Server-side React with PHP – part 1</a></li>\n<li><a href=\"http://www.phpied.com/server-side-react-with-php-part-2/\">Server-side React with PHP – part 2</a></li>\n<li><a href=\"http://bensmithett.com/server-rendered-react-components-in-rails/\">Server-rendered React components in Rails</a></li>\n</ul>\n\n<h3 id=\"newtoreactcheckoutthesetutorials\">New to React? Check out these tutorials</h3>\n\n<ul>\n<li><a href=\"http://blog.andrewray.me/reactjs-for-stupid-people/\">ReactJS For Stupid People</a></li>\n<li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\">Flux For Stupid People</a></li>\n</ul>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 10,
            "created_at": 1419997826504,
            "created_by": 10,
            "updated_at": 1420224431984,
            "updated_by": 1,
            "published_at": 1420137960000,
            "published_by": 1
          },
          {
            "id": 28,
            "uuid": "e2c48a9a-36f0-4217-99c8-782fe9b92eb9",
            "title": "React Conf Giveaway Winner",
            "slug": "react-conf-giveaway-winner",
            "markdown": "I would like to thank everybody that entered the giveaway. It was a lot harder than I thought it would be to choose a winner. I know that everyone who entered tried very hard. Before going into who won, here's a little recap of what was submitted.\n\n**David Wells** wrote about [Isomorphic React](https://reactjsnews.com/isomorphic-javascript-with-react-node/) utilizing the power of node to keep consistent code on both the client and server.\n\n\n**James Burnett** Submitted two articles, [Complex Drag and Drop in React](https://reactjsnews.com/complex-drag-and-drop-lists-using-react/) and [Setting up React with Rails and Jest](https://reactjsnews.com/setting-up-rails-for-react-and-jest/).\n\n[**David Chang**](http://davidandsuzi.com/), who previously wrote the insanely popular [State of Flux](https://reactjsnews.com/the-state-of-flux/), submitted [React Style Guide](https://reactjsnews.com/react-style-guide-patterns-i-like/).\n\n[**Jack Callister**](http://jackcallister.com/) wrote about [building a test suite in React](https://reactjsnews.com/building-a-test-suite-in-react-js/).\n\nOnly three people submitted, which made it even harder to choose a winner. When starting this giveaway I didn't really have a clear idea on how I was going to grade the articles. I ended up deciding that I should let whoever had the most influencial article win. Due to this, the winner is **David Chang**. His article on React style patterns, in a span of two days, holds over 35% of all pageviews on this site. It was also on the front page of [Hacker News](http://news.ycombinator.com). \n\n##### Conclusion\n\nI would just like to say thanks to all four of you for entering the giveaway. The community is better off with the guides you have each written!",
            "html": "<p>I would like to thank everybody that entered the giveaway. It was a lot harder than I thought it would be to choose a winner. I know that everyone who entered tried very hard. Before going into who won, here's a little recap of what was submitted.</p>\n\n<p><strong>David Wells</strong> wrote about <a href=\"https://reactjsnews.com/isomorphic-javascript-with-react-node/\">Isomorphic React</a> utilizing the power of node to keep consistent code on both the client and server.</p>\n\n<p><strong>James Burnett</strong> Submitted two articles, <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop in React</a> and <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting up React with Rails and Jest</a>.</p>\n\n<p><a href=\"http://davidandsuzi.com/\"><strong>David Chang</strong></a>, who previously wrote the insanely popular <a href=\"https://reactjsnews.com/the-state-of-flux/\">State of Flux</a>, submitted <a href=\"https://reactjsnews.com/react-style-guide-patterns-i-like/\">React Style Guide</a>.</p>\n\n<p><a href=\"http://jackcallister.com/\"><strong>Jack Callister</strong></a> wrote about <a href=\"https://reactjsnews.com/building-a-test-suite-in-react-js/\">building a test suite in React</a>.</p>\n\n<p>Only three people submitted, which made it even harder to choose a winner. When starting this giveaway I didn't really have a clear idea on how I was going to grade the articles. I ended up deciding that I should let whoever had the most influencial article win. Due to this, the winner is <strong>David Chang</strong>. His article on React style patterns, in a span of two days, holds over 35% of all pageviews on this site. It was also on the front page of <a href=\"http://news.ycombinator.com\">Hacker News</a>. </p>\n\n<h5 id=\"conclusion\">Conclusion</h5>\n\n<p>I would just like to say thanks to all four of you for entering the giveaway. The community is better off with the guides you have each written!</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1420223246191,
            "created_by": 1,
            "updated_at": 1420224534552,
            "updated_by": 1,
            "published_at": 1420223971039,
            "published_by": 1
          },
          {
            "id": 29,
            "uuid": "29c24c60-344a-403d-859a-2bcc17768a56",
            "title": "Testing Drag and Drop Components in React.js",
            "slug": "testing-drag-and-drop-components-in-react-js",
            "markdown": "Welcome back! [Last time](https://reactjsnews.com/complex-drag-and-drop-lists-using-react/) we left off with a nice little Container component that allowed dragging and dropping items both internally and between components. However, despite having the ability with our [setup](https://reactjsnews.com/setting-up-rails-for-react-and-jest/), we did not write a single test. The time has come to fix that shortcoming, with lots and lots of examples.\n\n*Note: All of the code is available on GitHub in the [Dex v2.0 tag](https://github.com/HurricaneJames/dex/tree/v2.0).*\n\nGeneral Concepts\n----------------\nTest Driven Development ([TDD](http://en.wikipedia.org/wiki/Test-driven_development)) is a development philosophy based on the concept of rapid iteration and automated testing. The TDD process starts with a test to describe a feature or bug. The test runs, and fails. Code is written and then, hopefully, the test passes (goes green). Then the developer can refactor that code knowing that as long as the test stays green, everything should be good.\n\nAs a general rule, TDD attempts to do [black-box testing](http://en.wikipedia.org/wiki/Black-box_testing) whenever possible. Put in simple terms, it means we should not need to know the internals of the function we are testing. This helps make our tests less fragile when refactoring code. Of course, when writing tests before code, this is not a problem because we cannot know anything about the internal code until after the test is written.\n\nOverall, TDD improves both design and maintainability of projects. However, a lot of projects, like our Container, were developed without tests. In fact most of us probably spend the majority of our time maintaining and enhancing legacy applications that have no or poor tests. Best practices for dealing with test-poor legacy apps dictate that we wrap some tests around existing features and requirements before enhancing with TDD. And that is exactly what we are going to do in this article.\n\nOur Testing Toolkit: Jest and React Test Utilities\n--------------------------------------------------\n[Jest](https://facebook.github.io/jest/) is the testing engine designed by Facebook to go with React. It is based on [Jasmine](https://github.com/jasmine/jasmine), so very familiar to anybody who has done Jasmine tests before. Much of the actual test code we write will be standard Jasmine. You will find a lot of useful testing information in the Jasmine [Introduction](http://jasmine.github.io/2.1/introduction.html), especially the section on [included matchers](http://jasmine.github.io/2.1/introduction.html#section-Included_Matchers).\n\nHowever, unlike Jasmine, Jest is run from the command line and backed by a fake DOM. This makes using Jest with [continuous integration](http://en.wikipedia.org/wiki/Continuous_integration) systems such as [Jenkins](http://jenkins-ci.org/) easier. It also means Jest can spin up multiple processes and run the tests faster.\n\nJest's biggest advantage is probably \"automocking.\" Modules imported via CommonJS `require()` are automatically mocked. Automocking makes it very easy to test a single module at a time. It also means we need to be careful with some libraries that should not be mocked out. We will cover this in greater detail later.\n\n[React](http://facebook.github.io/react/) provides some nice [testing utilities](http://facebook.github.io/react/docs/test-utils.html). They are located in the \"React with Add-Ons\" implementation, and accessed via `React.addons.TestUtils`. Be sure to read through the [documentation](http://facebook.github.io/react/docs/test-utils.html) as the 'Simulate' and 'find' / 'scry' methods will be used a lot.\n\nFinally, one small caveat. Jest is billed as \"Painless JavaScript Unit Testing.\" However, Jest and React TestUtils are frequently a pain. Throughout this article, I will point out some of places that Jest complicated our lives and made us write code just for testing. That said, it is a lot better than it could have been and definitely worth the effort. A big thanks goes out to the devs on the Jest and React projects who have made this as easy as it is.\n\nGetting Started\n---------------\nThis article picks up where [\"Complex Drag and Drop Lists Using React\"](https://reactjsnews.com/complex-drag-and-drop-lists-using-react/) left off. It is recommended reading prior to this article, but not absolutely required. The code for that article is available on GitHub in the [Dex v1.0 tag](https://github.com/HurricaneJames/dex/tree/v1.0). The code for this article is available in the [Dex v2.0 tag](https://github.com/HurricaneJames/dex/tree/v2.0).\n\nWe are using a Rails based project structure because that was how we setup our basic demo project in [\"Setting up Rails with React and Jest\"](https://reactjsnews.com/setting-up-rails-for-react-and-jest/). Tests are located in the `app/assets/javascripts/components/__tests__/` directory. The test file is named `[Component]-test.jsx`, where `[Component]` is the name of the component we are testing. So, the tests for Container will be in `app/assets/javascripts/components/__tests__/Container-test.jsx`, and can run it with `npm test Container`. It should be relatively easy to map this structure to whatever setup is being used.\n\n    # Directory Structure\n    /app\n      /assets\n        /javascripts\n          /components\n            /__tests__\n              Container-test.jsx \n            Container.jsx\n\nTests are run from the command line via `npm test` or `npm test [Component]`.\n\nRequirements\n------------\nThe first step of testing a legacy app is to figure out the requirements of the original code. Reviewing the code, there are a few that come to mind quickly. Try to avoid getting too bogged down thinking of requirements, just get a good representation for now. It is easy to add tests for other requirements as they become apparent, which they usually will when working through the initial list.\n\n- when given a list of items, it should render them all to the screen\n- when given a list of items and a template, it should render the list using the template for each item\n- items should be marked as draggable\n- dragging an item should highlight the item being dragged\n- dragging an item should call setData in the datatransfer with the right type and data being dragged\n- dragging over a dropZone should highlight the drop zone\n- dragging over the top half of an item should active the pervious drop zone\n- dragging over the bottom half of an item should active the next drop zone\n- dragging out of the container should clear any active drop zones\n- dropping should add the item to the list\n- dropping should remove selected items from the original list\n\nAs stated previously, there are probably more, but this is a good start. Next we will start building out tests and validating that each one goes green.\n    \nThe Tests\n---------\nJest tests follow the standard 'describe/it' syntax from Jasmine. Also, remember that Jest does automocking, so we need to tell it not to mock our test target. The file will start with something like the following.\n\n    jest.dontMock('../Container');\n\n    describe('Container', function() {\n      // it('should put some tests in here', function() {});\n    });\n\n*Side note: Jest provides an `it.only()` function to run a single test. This is highly useful when trying to fix a single test at a time.*\n\n### When given a list of items, it should render them all to the screen.\n\n    it('should display items, by default, in a text template (span element)', function() {\n      var container = TestUtils.renderIntoDocument(<Container items={randomWords} />);\n      expect(container.getDOMNode().textContent).toBe(randomWords.join(''));\n    });\n\nFirst, we start with the `it()` function. Like `describe()`, `it()` expects two parameters, a description and a function. We told Jest not to automock `Container` earlier, so `require()` works like normal. The `Container` is then rendered into the fake DOM with the React `TestUtils.renderIntoDocument()` function. By using a `jsx` extension, the `Container-test.jsx` will automatically convert `<Container items={randomWords} />` into plain JavaScript. The returned `container` is the component that was rendered, and is the basis for all further testing.\n\nJest tests pass if all expectations pass or if there are no expectations. An expectation is set with the `expect()` function. Here, we expect that the `Container` rendered the words to the page. `container.getDOMNode()` gets the DOM node. The `textContent` property contains all the text content that is rendered inside the node. `expect` then takes a matcher, in this case `toBe()`.\n\n### When given a list of items and a template, it should render the list using the template for each item.\n\n    var CustomTemplate = React.createClass({\n      displayName: 'CustomTemplate',\n      propTypes: { item: React.PropTypes.any.isRequired },\n      render: function() { return <span className=\"customFinder\">{this.props.item}</span>; }\n    });\n\n    it('should display items with a custom template', function() {\n      container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />);\n      var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n      expect(items).toEqual(randomWords);\n    });\n\nJust like the last test, we start with `renderIntoDocument`. However, this time we add the `itemTemplate={CustomTemplate}` property. The CustomTemplate is very similar to the default TextTemplate. The only difference between the default `TextTemplate` defined in `Container.jsx` is that we add `className=\"customFinder\"` to make it easy to find our rendered elements.\n\nThe second line of our test uses this classname along with the `TestUtils.scryRenderedDOMComponentsWithClass()` function to retrieve the rendered items. `map()` is a standard Array function that iterates over the results of `scryRenderedDOMComponentsWithClass()` and creates an array of the returned items.\n\nFinally, we run our actual `expect()` test. This time we check that `items` is equal to the original array we passed to the `Container`. This works because we pulled out the actual item nodes and iterated each one into an array with map.\n\n### Items should be marked as draggable.\n\nAs we saw in the previous article, setting the `draggable` attribute is required for HTML5 Drag and Drop. That means we should probably guarantee that any refactoring does not forget to include it.\n\n    it('should mark items as draggable', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , item = TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[1];\n      expect(item.getDOMNode().getAttribute('draggable')).toBeTruthy();\n    });\n\nAs with the last test, this one starts by creating a `container`. We then use `scryRenderedDOMComponentsWithTag()` to grab all of the 'li' components, keeping the second one (the first component is a drop zone). Finally, we test for the `draggable` attribute, expecting it `toBeTruthy()`.\n\nOf course, now that we think about it, it is probably important to be sure that drop zones are not accidentally marked as draggable. Normally, we would not test whether something was not marked. However, drop zones are very similar to items, so it makes sense. It also helps to reinforce that drop zones are always present and not generated during drag operations.\n\n    it('should not mark drop zones as draggable', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , dropZone = TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[0];\n      expect(dropZone.getDOMNode().getAttribute('draggable')).toBeFalsy();\n    });\n\n### Dragging an item should highlight the item being dragged.\n\nIn the original article we \"highlighted\" an item using the [React: CSS in JS](https://speakerdeck.com/vjeux/react-css-in-js) technique of embedded styles. ~~Now, we should be able to test this by calling `getDOMNode().style` or `props.style`, but neither seems to work. They both failed to return the style we set in our Container.jsx file.~~\n\n~~Instead, the solution we chose was the good old `className` property. It is always painful to change working code just for the sake of testing, but sometimes there is no other choice. We can call this pain point #1.~~\n\nFor historical, *and stupidity* reasons, we modified the code to add a className attribute and test for that attirbute. We are keeping that solution here. See the **Changes** section at the bottom for an explanation.\n\n    it('highlights item as selected when being dragged', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , item = getItemFromContainer(container, 0)\n        , mockDataTransfer = { setData: jest.genMockFunction() };\n      expect(item.props.className).toBe('');\n      TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n      expect(item.props.className).toBe('container-selected');\n    });\n    function getItemFromContainer(container, itemId) {\n      return TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[2*itemId + 1];\n    }\n\nWe do a couple things differently in this test. First we pull the  `scryRenderedDOMComponentsWithTag` logic into a separate function. This is both more readable and [DRYer](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself). Then we make sure the class name is blank initially. Next we simulate a dragStart event so the container only marks dragged items as selected. Then we check whether the className was applied. While we do not actually know that it was highlighted, we know a specific class was added, and presumably that class will trigger some highlighting.\n\nSo, what about the `{ dataTransfer: mockDataTransfer }` property. `Simulate.dragSTart` takes an event properties parameter. In this case, we happen to know that our `dragStart` function handler requires a `dataTransfer.setData()` function, so we add a mock function. It slightly breaks black-box testing to know we need to supply a dataTransfer, but it is the only way to test. It would be much better if the React TestUtils supplied the required properties for the events they are simulating, but we can call that pain point #2.\n\nWhile we are talking about \"pain points\", I should mention one other. Jest does not support the HTMLElement [`dataset`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset) property. It is probably better that we do not use it anyway because Internet Explorer did not support it until IE11. Also, as the Mozilla Developer Network points out in \"Issues\" section of the \"[Using data attributes](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes)\" guide that there is a performance penalty when using `dataset`.\n\nBottom line, we need to make a few code changes so our tests can pass. First, replace all instances of `dataset.key` with `getAttribute('data-key')`. Second, we need to add the `className` prop to the selected item in `renderListItem`'s `<li />` component.\n\n    `className={this.state.selected.has(key) ? 'container-selected' : ''}`\n\nWith these code changes, our tests now pass.\n\n### Dragging an item should call setData in the datatransfer with the right type and data being dragged.\n\nAs we saw in the last test, React TestUtils `Simulate` functions do not replicate the `dataTransfer` event property, but we can mock it on a per call basis. To work with HTML5 Drag and Drop, we must call `dataTransfer.setData()`, so it is probably a really good idea to make sure the call was made.\n\n    var CONTAINER_TYPE = 'custom_container_type';\n    it('should set the data transfer with the correct type and the items to being dragged', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , item = getItemFromContainer(container, 0)\n        , mockDataTransfer = { setData: jest.genMockFunction() };\n      TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n      expect(mockDataTransfer.setData).toBeCalledWith(CONTAINER_TYPE, '[\"apple\"]');\n    });\n\nThis test is almost the same as the last one. In fact, many devs would combine this test with the last test, but I have found it makes requirements easier to determine if the tests are lower level. However it is arranged, it is important to check that the `mockDataTransfer.setData()` function was called with the right data type, `'custom_container_type'`, and the proper JSON representation of the data. For convenience later, we extract the dataType `'custom_container_type'` into the global variable, `CONTAINER_TYPE`.\n\n### Dragging over a dropZone should highlight the drop zone.\n\n    var CONTAINER_DROP_ZONE_ACTIVE = 'container-dropZone-active';\n    it('shows the current dropzone when hovering over drop zone', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , dropZone = getDropZone(container, 0)\n        , mockEvent = { dataTransfer: { types: [CONTAINER_TYPE] } };\n      expect(dropZone.props.className).toBe('');\n      TestUtils.Simulate.dragOver(dropZone, mockEvent);\n      expect(dropZone.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n    });\n    function getDropZone(container, itemId) {\n      return TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[2*itemId];\n    }\n\n~~Just like our test to see if selected items were highlighted, we run into pain point #1 (no access to style properties) all over again. Again, using the className solution works. This time we simulate a `dragOver` event. ~~\n\nWe are keeping the `className` solution becuase it is already done, but style is definitely accessible.\n\nAgain, we need to change our code to make the test pass. This time, add the `className={this.state.hoverOver === index ? 'container-dropZone-active' : ''}` to the renderDropZone's `<li />` component.\n\nAnd now we realize another requirement we had forgotten about in the original list. Part of the HTML5 drag and drop spec is that, by default, drop is not allowed. The spec requires calling `event.preventDefault()` on the dragEnter and/or dragOver operations. Also, our container only allows drops for certain types. Fortunately, we know how to mock functions for the simulated event. \n\n    mockEvent = {\n      dataTransfer: { types: [CONTAINER_TYPE] },\n      preventDefault: jest.genMockFunction()\n    }\n\nWe can test that this was called using the expect `toBeCalled()` matcher. \n\n    expect(mockEvent.preventDefault).toBeCalled();\n\nWe only allow drops when a drop zone is activated, so it is perfectly acceptable to make this a second expectation of the current test. If you are really paranoid, you could create another test with a bad container type to verify the mock event `preventDefault()` function was `not.toBeCalled()` and that the drop zone was not activated.\n\n    it('should not activate a dropzone when the container type is wrong', function() {\n      var container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        , dropZone = getDropZone(container, 0)\n        , mockEvent = { dataTransfer: { types: ['bad_type'] } };\n      expect(dropZone.props.className).toBe('');\n      TestUtils.Simulate.dragOver(dropZone, mockEvent);\n      expect(dropZone.props.className).not.toBe(CONTAINER_DROP_ZONE_ACTIVE);\n      expect(mockEvent.preventDefault).not.toBeCalled();\n    });\n\n### Dragging over the top half of an item should active the pervious drop zone.\n\nAt this point we have started repeating ourselves. So first we are going to make use of the very helpful `beforeEach()` function. `beforeEach()` will run before each of the tests in a `describe()` block. This gives us a way of setting up some common variables and making sure they are the same for each test. As a side note, Jasmine has three other [Setup and Teardown](http://jasmine.github.io/2.1/introduction.html#section-Setup_and_Teardown) functions that you might find useful.\n\n    var container, item, dropZoneAbove, dropZoneBelow, mockEvent;\n    beforeEach(function() {\n      mockEvent     = {\n        dataTransfer: { types: [CONTAINER_TYPE] },\n        preventDefault: jest.genMockFunction()\n      }\n      container     = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />);\n      overItem      = getItemFromContainer(container, 2)\n      dropZoneAbove = getDropZone(container, 2)\n      dropZoneBelow = getDropZone(container, 3)\n    });\n\nDo not forget to refactor the previous tests in the same describe block to use the variables defined in beforeEach, otherwise there is unnecessary duplicate code.\n\nNow, run the tests again. If every thing is still green, it is time to check that dragging over the top half of an item activates the drop zone above that item.\n\n    it('shows previous drop zone when hovering over top half of item', function() {\n      mockEvent.clientY = 2;\n      overItem.getDOMNode().offsetTop = 0;\n      overItem.getDOMNode().offsetHeight = 10;\n\n      expect(dropZoneAbove.props.className).toBe('');\n      expect(dropZoneBelow.props.className).toBe('');\n      TestUtils.Simulate.dragOver(overItem, mockEvent);\n      expect(dropZoneAbove.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n      expect(dropZoneBelow.props.className).toBe('');\n      expect(mockEvent.preventDefault).toBeCalled();\n    });\n\nNotice that we are specifying the mouse position (`clientY`) and item dimensions (`offsetTop` and `offsetHeight`). Interestingly, this test did pass in this environment. However, it might throw errors in other environments because those values are used but not defined. Also, Be sure to note that we have three expectations for this test. The first two check that the right drop zone was activated. The last checks that this method of activating a drop zone also calls prevent default.\n\n### Dragging over the bottom half of an item should active the next drop zone.\n\n    it('shows next drop zone when hovering over bottom half of item', function() {\n      mockEvent.clientY = 7\n      overItem.getDOMNode().offsetTop = 0;\n      overItem.getDOMNode().offsetHeight = 10;\n\n      expect(dropZoneAbove.props.className).toBe('');\n      expect(dropZoneBelow.props.className).toBe('');\n      TestUtils.Simulate.dragOver(overItem, mockEvent);\n      expect(dropZoneAbove.props.className).toBe('');\n      expect(dropZoneBelow.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n      expect(mockEvent.preventDefault).toBeCalled();\n    });\n\nThis test looks almost identical to the last test. The only change is our mouse position (`clientY`) is now 7. We define the item to be 10px high with `offsetHeight`, so this puts the drag event in the bottom half of the item.\n\nUnlike the last test, this one will fail without the mouse position and item dimensions. In environments where the code does not throw an error, the wrong drop zone will be activated. Providing the mouse position and element height fix this problem.\n\n### Dragging out of the container should clear any active drop zones.\n\nThis was an important fix from the last article. Otherwise drop zones remain active after dragging the item out of the container, even when just dragging over a container.\n\n    it(\"should clear any active drop zones when the dragged item leaves the container\", function() {\n      var containerElement = TestUtils.findRenderedDOMComponentWithTag(container, 'ul').getDOMNode();\n\n      TestUtils.Simulate.dragOver(overItem, mockEvent);\n      expect(TestUtils.scryRenderedDOMComponentsWithClass(container, CONTAINER_DROP_ZONE_ACTIVE).length).toBe(1);\n\n      mockEvent.clientX = 0;\n      mockEvent.clientY = 101;\n      containerElement.offsetTop = containerElement.offsetLeft = 0;\n      containerElement.offsetHeight = containerElement.offsetWidth = 100;\n\n      TestUtils.Simulate.dragLeave(containerElement, mockEvent);\n      expect(TestUtils.scryRenderedDOMComponentsWithClass(container, CONTAINER_DROP_ZONE_ACTIVE).length).toBe(0);\n    });\n\nFirst, our `container` is the React element, not the list element where we attached the `onDragLeave` event handler. That means we need to capture the `'ul'` element to `containerElement`. This is done with `findRenderedDOMComponentWithTag()`. So far we have been using the `scry` versions of these functions. `scry` will find all, `find` will find the single instance and throw an error if it is unable.\n\nNext, we simulate a dragOver event and check that it activated one of the drop zones. \n\nThen we setup the mouse coordinates and bounding dimensions of the list. We know from the code that these are important, but we also know from the HTML5 spec that they will be provided.\n\nFinally, we simulate the drag leave and check that the number of active drop zones is now back to zero.\n\n### Dropping should add the item to the list.\n\nFor our drop testing we will use a new beforeEach setup.\n\n    beforeEach(function() {\n      container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords.slice(0)} />);\n      overItem  = getDropZone(container, randomWords.length)\n      mockEvent = { dataTransfer: { types: [CONTAINER_TYPE] } }\n    });\n\nThis will give us a container, with `overItem` pointing to the last dropZone and a basic mockEvent. Then we can test whether dropping adds the item.\n\n    it('adds dropped items to currently selected drop zone', function() {\n        mockEvent.dataTransfer.getData = function() { return '\"peaches\"'; };\n\n        TestUtils.Simulate.dragOver(overItem, mockEvent);\n        TestUtils.Simulate.drop(overItem, mockEvent);\n        var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n        expect(items).toEqual(randomWords.concat([\"peaches\"]));\n    });\n\nFirst, we add a mock getData function that just returns `\"peaches\"`. Then we simulate a drag over to activate a drop zone, and we simulate a drop event to put that data into the container. Finally, we extract the items and see if our new item has been appended to the end.\n\n### Dropping should remove selected items from the original list.\n\n    it('removes selected items', function() {\n      var item = getItemFromContainer(container, 0);\n      mockEvent.dataTransfer.dropEffect = \"move\";\n      mockEvent.dataTransfer.setData = function() {};\n      mockEvent.dataTransfer.getData = function() { return \"[\\\"\" + randomWords[0] + \"\\\"]\"; };\n      TestUtils.Simulate.dragStart(item, mockEvent);\n      TestUtils.Simulate.dragOver(overItem, mockEvent);\n      TestUtils.Simulate.drop(overItem, mockEvent);\n      TestUtils.Simulate.dragEnd(item, mockEvent);\n      var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n      // array where first item is now last\n      expect(items).toEqual(randomWords.slice(1).concat(randomWords[0]));\n    });\n\nThis time we grab the first item in the container. We setup the mockEvent dataTransfer with that item's information. Then we simulate all of the events that normally happen, including the dragEnd. Then we check that the result is the list with with the first item removed and pinned to the end (`randomWords.slice(1).concat(randomWords[0])`).\n\n\nConclusion\n----------\nThis article should have provided a decent description of testing a complex React component with Jest. We covered basic Jasmine syntax (`describe`, `it`, `it.only`, `expect`, `toBe`, `toEqual`, `toBeCalled`, `not`, `beforeEach`). We covered how to actually run the tests `npm test`. We saw quite a few of the React test utilities (`Simulate.[click, dragStart, dragOver, dragLeave, drop, dragEnd]`, `scryRenderedDOMComponentsWithClass`, `scryRenderedDOMComponentsWithTag`, `findRenderedDOMComponentWithTag`). We covered mocking the event data object, and some of the pain that it causes. And we gave lots of working test code as examples in the process.\n\nThis article also provides a decent starting point for the next article, [Using Test Driven Development with React.js](https://reactjsnews.com/using-tdd-with-reactjs/). In fact, that article was originally part of this article. As the length of this article grew, it was clear it needed to be broken up a bit. On the bright side, that means there is already a draft, so it should be up in the next couple days.\n\nChanges\n-------\nSo, as often happens, the solution to a problem comes to us when doing *other* things. And, as is often the case, that solution humbles us and makes us feel stupid. This is one such solution. \n\nOriginally, I argued that the `style` property was unavailable. This ruined the otherwise beautiful CSS in JS paradigm. I was wrong.\n\nThe `style` property is perfectly available via `item.props.style`. However, what is not available is the `ObjectMerge` module, because we forgot to tell Jest not to auto-mock it. Since it was mocked, it does not actually merge anything. Solution, `jest.dontMock()` or move the ObjectMerge.jsxand Object.Assign.js to the `support/` directory, which is on the `unmockedModulePathPatterns` in package.json.\n\nI always try to look on the bright side of things, and there is a bright side to this story. My pain and humiliation serves as a [cautionary tale](http://www.despair.com/mistakes.html) of the to others. Auto-mocking is great, but it has some gotchas.",
            "html": "<p>Welcome back! <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Last time</a> we left off with a nice little Container component that allowed dragging and dropping items both internally and between components. However, despite having the ability with our <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">setup</a>, we did not write a single test. The time has come to fix that shortcoming, with lots and lots of examples.</p>\n\n<p><em>Note: All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p>\n\n<h2 id=\"generalconcepts\">General Concepts  </h2>\n\n<p>Test Driven Development (<a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a>) is a development philosophy based on the concept of rapid iteration and automated testing. The TDD process starts with a test to describe a feature or bug. The test runs, and fails. Code is written and then, hopefully, the test passes (goes green). Then the developer can refactor that code knowing that as long as the test stays green, everything should be good.</p>\n\n<p>As a general rule, TDD attempts to do <a href=\"http://en.wikipedia.org/wiki/Black-box_testing\">black-box testing</a> whenever possible. Put in simple terms, it means we should not need to know the internals of the function we are testing. This helps make our tests less fragile when refactoring code. Of course, when writing tests before code, this is not a problem because we cannot know anything about the internal code until after the test is written.</p>\n\n<p>Overall, TDD improves both design and maintainability of projects. However, a lot of projects, like our Container, were developed without tests. In fact most of us probably spend the majority of our time maintaining and enhancing legacy applications that have no or poor tests. Best practices for dealing with test-poor legacy apps dictate that we wrap some tests around existing features and requirements before enhancing with TDD. And that is exactly what we are going to do in this article.</p>\n\n<h2 id=\"ourtestingtoolkitjestandreacttestutilities\">Our Testing Toolkit: Jest and React Test Utilities  </h2>\n\n<p><a href=\"https://facebook.github.io/jest/\">Jest</a> is the testing engine designed by Facebook to go with React. It is based on <a href=\"https://github.com/jasmine/jasmine\">Jasmine</a>, so very familiar to anybody who has done Jasmine tests before. Much of the actual test code we write will be standard Jasmine. You will find a lot of useful testing information in the Jasmine <a href=\"http://jasmine.github.io/2.1/introduction.html\">Introduction</a>, especially the section on <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Included_Matchers\">included matchers</a>.</p>\n\n<p>However, unlike Jasmine, Jest is run from the command line and backed by a fake DOM. This makes using Jest with <a href=\"http://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a> systems such as <a href=\"http://jenkins-ci.org/\">Jenkins</a> easier. It also means Jest can spin up multiple processes and run the tests faster.</p>\n\n<p>Jest's biggest advantage is probably \"automocking.\" Modules imported via CommonJS <code>require()</code> are automatically mocked. Automocking makes it very easy to test a single module at a time. It also means we need to be careful with some libraries that should not be mocked out. We will cover this in greater detail later.</p>\n\n<p><a href=\"http://facebook.github.io/react/\">React</a> provides some nice <a href=\"http://facebook.github.io/react/docs/test-utils.html\">testing utilities</a>. They are located in the \"React with Add-Ons\" implementation, and accessed via <code>React.addons.TestUtils</code>. Be sure to read through the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">documentation</a> as the 'Simulate' and 'find' / 'scry' methods will be used a lot.</p>\n\n<p>Finally, one small caveat. Jest is billed as \"Painless JavaScript Unit Testing.\" However, Jest and React TestUtils are frequently a pain. Throughout this article, I will point out some of places that Jest complicated our lives and made us write code just for testing. That said, it is a lot better than it could have been and definitely worth the effort. A big thanks goes out to the devs on the Jest and React projects who have made this as easy as it is.</p>\n\n<h2 id=\"gettingstarted\">Getting Started  </h2>\n\n<p>This article picks up where <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">\"Complex Drag and Drop Lists Using React\"</a> left off. It is recommended reading prior to this article, but not absolutely required. The code for that article is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v1.0\">Dex v1.0 tag</a>. The code for this article is available in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</p>\n\n<p>We are using a Rails based project structure because that was how we setup our basic demo project in <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">\"Setting up Rails with React and Jest\"</a>. Tests are located in the <code>app/assets/javascripts/components/__tests__/</code> directory. The test file is named <code>[Component]-test.jsx</code>, where <code>[Component]</code> is the name of the component we are testing. So, the tests for Container will be in <code>app/assets/javascripts/components/__tests__/Container-test.jsx</code>, and can run it with <code>npm test Container</code>. It should be relatively easy to map this structure to whatever setup is being used.</p>\n\n<pre><code># Directory Structure\n/app\n  /assets\n    /javascripts\n      /components\n        /__tests__\n          Container-test.jsx \n        Container.jsx\n</code></pre>\n\n<p>Tests are run from the command line via <code>npm test</code> or <code>npm test [Component]</code>.</p>\n\n<h2 id=\"requirements\">Requirements  </h2>\n\n<p>The first step of testing a legacy app is to figure out the requirements of the original code. Reviewing the code, there are a few that come to mind quickly. Try to avoid getting too bogged down thinking of requirements, just get a good representation for now. It is easy to add tests for other requirements as they become apparent, which they usually will when working through the initial list.</p>\n\n<ul>\n<li>when given a list of items, it should render them all to the screen</li>\n<li>when given a list of items and a template, it should render the list using the template for each item</li>\n<li>items should be marked as draggable</li>\n<li>dragging an item should highlight the item being dragged</li>\n<li>dragging an item should call setData in the datatransfer with the right type and data being dragged</li>\n<li>dragging over a dropZone should highlight the drop zone</li>\n<li>dragging over the top half of an item should active the pervious drop zone</li>\n<li>dragging over the bottom half of an item should active the next drop zone</li>\n<li>dragging out of the container should clear any active drop zones</li>\n<li>dropping should add the item to the list</li>\n<li>dropping should remove selected items from the original list</li>\n</ul>\n\n<p>As stated previously, there are probably more, but this is a good start. Next we will start building out tests and validating that each one goes green.</p>\n\n<h2 id=\"thetests\">The Tests  </h2>\n\n<p>Jest tests follow the standard 'describe/it' syntax from Jasmine. Also, remember that Jest does automocking, so we need to tell it not to mock our test target. The file will start with something like the following.</p>\n\n<pre><code>jest.dontMock('../Container');\n\ndescribe('Container', function() {\n  // it('should put some tests in here', function() {});\n});\n</code></pre>\n\n<p><em>Side note: Jest provides an <code>it.only()</code> function to run a single test. This is highly useful when trying to fix a single test at a time.</em></p>\n\n<h3 id=\"whengivenalistofitemsitshouldrenderthemalltothescreen\">When given a list of items, it should render them all to the screen.</h3>\n\n<pre><code>it('should display items, by default, in a text template (span element)', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container items={randomWords} /&gt;);\n  expect(container.getDOMNode().textContent).toBe(randomWords.join(''));\n});\n</code></pre>\n\n<p>First, we start with the <code>it()</code> function. Like <code>describe()</code>, <code>it()</code> expects two parameters, a description and a function. We told Jest not to automock <code>Container</code> earlier, so <code>require()</code> works like normal. The <code>Container</code> is then rendered into the fake DOM with the React <code>TestUtils.renderIntoDocument()</code> function. By using a <code>jsx</code> extension, the <code>Container-test.jsx</code> will automatically convert <code>&lt;Container items={randomWords} /&gt;</code> into plain JavaScript. The returned <code>container</code> is the component that was rendered, and is the basis for all further testing.</p>\n\n<p>Jest tests pass if all expectations pass or if there are no expectations. An expectation is set with the <code>expect()</code> function. Here, we expect that the <code>Container</code> rendered the words to the page. <code>container.getDOMNode()</code> gets the DOM node. The <code>textContent</code> property contains all the text content that is rendered inside the node. <code>expect</code> then takes a matcher, in this case <code>toBe()</code>.</p>\n\n<h3 id=\"whengivenalistofitemsandatemplateitshouldrenderthelistusingthetemplateforeachitem\">When given a list of items and a template, it should render the list using the template for each item.</h3>\n\n<pre><code>var CustomTemplate = React.createClass({\n  displayName: 'CustomTemplate',\n  propTypes: { item: React.PropTypes.any.isRequired },\n  render: function() { return &lt;span className=\"customFinder\"&gt;{this.props.item}&lt;/span&gt;; }\n});\n\nit('should display items with a custom template', function() {\n  container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;);\n  var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n  expect(items).toEqual(randomWords);\n});\n</code></pre>\n\n<p>Just like the last test, we start with <code>renderIntoDocument</code>. However, this time we add the <code>itemTemplate={CustomTemplate}</code> property. The CustomTemplate is very similar to the default TextTemplate. The only difference between the default <code>TextTemplate</code> defined in <code>Container.jsx</code> is that we add <code>className=\"customFinder\"</code> to make it easy to find our rendered elements.</p>\n\n<p>The second line of our test uses this classname along with the <code>TestUtils.scryRenderedDOMComponentsWithClass()</code> function to retrieve the rendered items. <code>map()</code> is a standard Array function that iterates over the results of <code>scryRenderedDOMComponentsWithClass()</code> and creates an array of the returned items.</p>\n\n<p>Finally, we run our actual <code>expect()</code> test. This time we check that <code>items</code> is equal to the original array we passed to the <code>Container</code>. This works because we pulled out the actual item nodes and iterated each one into an array with map.</p>\n\n<h3 id=\"itemsshouldbemarkedasdraggable\">Items should be marked as draggable.</h3>\n\n<p>As we saw in the previous article, setting the <code>draggable</code> attribute is required for HTML5 Drag and Drop. That means we should probably guarantee that any refactoring does not forget to include it.</p>\n\n<pre><code>it('should mark items as draggable', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , item = TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[1];\n  expect(item.getDOMNode().getAttribute('draggable')).toBeTruthy();\n});\n</code></pre>\n\n<p>As with the last test, this one starts by creating a <code>container</code>. We then use <code>scryRenderedDOMComponentsWithTag()</code> to grab all of the 'li' components, keeping the second one (the first component is a drop zone). Finally, we test for the <code>draggable</code> attribute, expecting it <code>toBeTruthy()</code>.</p>\n\n<p>Of course, now that we think about it, it is probably important to be sure that drop zones are not accidentally marked as draggable. Normally, we would not test whether something was not marked. However, drop zones are very similar to items, so it makes sense. It also helps to reinforce that drop zones are always present and not generated during drag operations.</p>\n\n<pre><code>it('should not mark drop zones as draggable', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , dropZone = TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[0];\n  expect(dropZone.getDOMNode().getAttribute('draggable')).toBeFalsy();\n});\n</code></pre>\n\n<h3 id=\"dragginganitemshouldhighlighttheitembeingdragged\">Dragging an item should highlight the item being dragged.</h3>\n\n<p>In the original article we \"highlighted\" an item using the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> technique of embedded styles. <del>Now, we should be able to test this by calling <code>getDOMNode().style</code> or <code>props.style</code>, but neither seems to work. They both failed to return the style we set in our Container.jsx file.</del></p>\n\n<p><del>Instead, the solution we chose was the good old <code>className</code> property. It is always painful to change working code just for the sake of testing, but sometimes there is no other choice. We can call this pain point #1.</del></p>\n\n<p>For historical, <em>and stupidity</em> reasons, we modified the code to add a className attribute and test for that attirbute. We are keeping that solution here. See the <strong>Changes</strong> section at the bottom for an explanation.</p>\n\n<pre><code>it('highlights item as selected when being dragged', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , item = getItemFromContainer(container, 0)\n    , mockDataTransfer = { setData: jest.genMockFunction() };\n  expect(item.props.className).toBe('');\n  TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n  expect(item.props.className).toBe('container-selected');\n});\nfunction getItemFromContainer(container, itemId) {\n  return TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[2*itemId + 1];\n}\n</code></pre>\n\n<p>We do a couple things differently in this test. First we pull the  <code>scryRenderedDOMComponentsWithTag</code> logic into a separate function. This is both more readable and <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRYer</a>. Then we make sure the class name is blank initially. Next we simulate a dragStart event so the container only marks dragged items as selected. Then we check whether the className was applied. While we do not actually know that it was highlighted, we know a specific class was added, and presumably that class will trigger some highlighting.</p>\n\n<p>So, what about the <code>{ dataTransfer: mockDataTransfer }</code> property. <code>Simulate.dragSTart</code> takes an event properties parameter. In this case, we happen to know that our <code>dragStart</code> function handler requires a <code>dataTransfer.setData()</code> function, so we add a mock function. It slightly breaks black-box testing to know we need to supply a dataTransfer, but it is the only way to test. It would be much better if the React TestUtils supplied the required properties for the events they are simulating, but we can call that pain point #2.</p>\n\n<p>While we are talking about \"pain points\", I should mention one other. Jest does not support the HTMLElement <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset\"><code>dataset</code></a> property. It is probably better that we do not use it anyway because Internet Explorer did not support it until IE11. Also, as the Mozilla Developer Network points out in \"Issues\" section of the \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\">Using data attributes</a>\" guide that there is a performance penalty when using <code>dataset</code>.</p>\n\n<p>Bottom line, we need to make a few code changes so our tests can pass. First, replace all instances of <code>dataset.key</code> with <code>getAttribute('data-key')</code>. Second, we need to add the <code>className</code> prop to the selected item in <code>renderListItem</code>'s <code>&lt;li /&gt;</code> component.</p>\n\n<pre><code>`className={this.state.selected.has(key) ? 'container-selected' : ''}`\n</code></pre>\n\n<p>With these code changes, our tests now pass.</p>\n\n<h3 id=\"dragginganitemshouldcallsetdatainthedatatransferwiththerighttypeanddatabeingdragged\">Dragging an item should call setData in the datatransfer with the right type and data being dragged.</h3>\n\n<p>As we saw in the last test, React TestUtils <code>Simulate</code> functions do not replicate the <code>dataTransfer</code> event property, but we can mock it on a per call basis. To work with HTML5 Drag and Drop, we must call <code>dataTransfer.setData()</code>, so it is probably a really good idea to make sure the call was made.</p>\n\n<pre><code>var CONTAINER_TYPE = 'custom_container_type';\nit('should set the data transfer with the correct type and the items to being dragged', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , item = getItemFromContainer(container, 0)\n    , mockDataTransfer = { setData: jest.genMockFunction() };\n  TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n  expect(mockDataTransfer.setData).toBeCalledWith(CONTAINER_TYPE, '[\"apple\"]');\n});\n</code></pre>\n\n<p>This test is almost the same as the last one. In fact, many devs would combine this test with the last test, but I have found it makes requirements easier to determine if the tests are lower level. However it is arranged, it is important to check that the <code>mockDataTransfer.setData()</code> function was called with the right data type, <code>'custom_container_type'</code>, and the proper JSON representation of the data. For convenience later, we extract the dataType <code>'custom_container_type'</code> into the global variable, <code>CONTAINER_TYPE</code>.</p>\n\n<h3 id=\"draggingoveradropzoneshouldhighlightthedropzone\">Dragging over a dropZone should highlight the drop zone.</h3>\n\n<pre><code>var CONTAINER_DROP_ZONE_ACTIVE = 'container-dropZone-active';\nit('shows the current dropzone when hovering over drop zone', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , dropZone = getDropZone(container, 0)\n    , mockEvent = { dataTransfer: { types: [CONTAINER_TYPE] } };\n  expect(dropZone.props.className).toBe('');\n  TestUtils.Simulate.dragOver(dropZone, mockEvent);\n  expect(dropZone.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n});\nfunction getDropZone(container, itemId) {\n  return TestUtils.scryRenderedDOMComponentsWithTag(container, 'li')[2*itemId];\n}\n</code></pre>\n\n<p><del>Just like our test to see if selected items were highlighted, we run into pain point #1 (no access to style properties) all over again. Again, using the className solution works. This time we simulate a <code>dragOver</code> event. </del></p>\n\n<p>We are keeping the <code>className</code> solution becuase it is already done, but style is definitely accessible.</p>\n\n<p>Again, we need to change our code to make the test pass. This time, add the <code>className={this.state.hoverOver === index ? 'container-dropZone-active' : ''}</code> to the renderDropZone's <code>&lt;li /&gt;</code> component.</p>\n\n<p>And now we realize another requirement we had forgotten about in the original list. Part of the HTML5 drag and drop spec is that, by default, drop is not allowed. The spec requires calling <code>event.preventDefault()</code> on the dragEnter and/or dragOver operations. Also, our container only allows drops for certain types. Fortunately, we know how to mock functions for the simulated event. </p>\n\n<pre><code>mockEvent = {\n  dataTransfer: { types: [CONTAINER_TYPE] },\n  preventDefault: jest.genMockFunction()\n}\n</code></pre>\n\n<p>We can test that this was called using the expect <code>toBeCalled()</code> matcher. </p>\n\n<pre><code>expect(mockEvent.preventDefault).toBeCalled();\n</code></pre>\n\n<p>We only allow drops when a drop zone is activated, so it is perfectly acceptable to make this a second expectation of the current test. If you are really paranoid, you could create another test with a bad container type to verify the mock event <code>preventDefault()</code> function was <code>not.toBeCalled()</code> and that the drop zone was not activated.</p>\n\n<pre><code>it('should not activate a dropzone when the container type is wrong', function() {\n  var container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    , dropZone = getDropZone(container, 0)\n    , mockEvent = { dataTransfer: { types: ['bad_type'] } };\n  expect(dropZone.props.className).toBe('');\n  TestUtils.Simulate.dragOver(dropZone, mockEvent);\n  expect(dropZone.props.className).not.toBe(CONTAINER_DROP_ZONE_ACTIVE);\n  expect(mockEvent.preventDefault).not.toBeCalled();\n});\n</code></pre>\n\n<h3 id=\"draggingoverthetophalfofanitemshouldactivetheperviousdropzone\">Dragging over the top half of an item should active the pervious drop zone.</h3>\n\n<p>At this point we have started repeating ourselves. So first we are going to make use of the very helpful <code>beforeEach()</code> function. <code>beforeEach()</code> will run before each of the tests in a <code>describe()</code> block. This gives us a way of setting up some common variables and making sure they are the same for each test. As a side note, Jasmine has three other <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Setup_and_Teardown\">Setup and Teardown</a> functions that you might find useful.</p>\n\n<pre><code>var container, item, dropZoneAbove, dropZoneBelow, mockEvent;\nbeforeEach(function() {\n  mockEvent     = {\n    dataTransfer: { types: [CONTAINER_TYPE] },\n    preventDefault: jest.genMockFunction()\n  }\n  container     = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;);\n  overItem      = getItemFromContainer(container, 2)\n  dropZoneAbove = getDropZone(container, 2)\n  dropZoneBelow = getDropZone(container, 3)\n});\n</code></pre>\n\n<p>Do not forget to refactor the previous tests in the same describe block to use the variables defined in beforeEach, otherwise there is unnecessary duplicate code.</p>\n\n<p>Now, run the tests again. If every thing is still green, it is time to check that dragging over the top half of an item activates the drop zone above that item.</p>\n\n<pre><code>it('shows previous drop zone when hovering over top half of item', function() {\n  mockEvent.clientY = 2;\n  overItem.getDOMNode().offsetTop = 0;\n  overItem.getDOMNode().offsetHeight = 10;\n\n  expect(dropZoneAbove.props.className).toBe('');\n  expect(dropZoneBelow.props.className).toBe('');\n  TestUtils.Simulate.dragOver(overItem, mockEvent);\n  expect(dropZoneAbove.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n  expect(dropZoneBelow.props.className).toBe('');\n  expect(mockEvent.preventDefault).toBeCalled();\n});\n</code></pre>\n\n<p>Notice that we are specifying the mouse position (<code>clientY</code>) and item dimensions (<code>offsetTop</code> and <code>offsetHeight</code>). Interestingly, this test did pass in this environment. However, it might throw errors in other environments because those values are used but not defined. Also, Be sure to note that we have three expectations for this test. The first two check that the right drop zone was activated. The last checks that this method of activating a drop zone also calls prevent default.</p>\n\n<h3 id=\"draggingoverthebottomhalfofanitemshouldactivethenextdropzone\">Dragging over the bottom half of an item should active the next drop zone.</h3>\n\n<pre><code>it('shows next drop zone when hovering over bottom half of item', function() {\n  mockEvent.clientY = 7\n  overItem.getDOMNode().offsetTop = 0;\n  overItem.getDOMNode().offsetHeight = 10;\n\n  expect(dropZoneAbove.props.className).toBe('');\n  expect(dropZoneBelow.props.className).toBe('');\n  TestUtils.Simulate.dragOver(overItem, mockEvent);\n  expect(dropZoneAbove.props.className).toBe('');\n  expect(dropZoneBelow.props.className).toBe(CONTAINER_DROP_ZONE_ACTIVE);\n  expect(mockEvent.preventDefault).toBeCalled();\n});\n</code></pre>\n\n<p>This test looks almost identical to the last test. The only change is our mouse position (<code>clientY</code>) is now 7. We define the item to be 10px high with <code>offsetHeight</code>, so this puts the drag event in the bottom half of the item.</p>\n\n<p>Unlike the last test, this one will fail without the mouse position and item dimensions. In environments where the code does not throw an error, the wrong drop zone will be activated. Providing the mouse position and element height fix this problem.</p>\n\n<h3 id=\"draggingoutofthecontainershouldclearanyactivedropzones\">Dragging out of the container should clear any active drop zones.</h3>\n\n<p>This was an important fix from the last article. Otherwise drop zones remain active after dragging the item out of the container, even when just dragging over a container.</p>\n\n<pre><code>it(\"should clear any active drop zones when the dragged item leaves the container\", function() {\n  var containerElement = TestUtils.findRenderedDOMComponentWithTag(container, 'ul').getDOMNode();\n\n  TestUtils.Simulate.dragOver(overItem, mockEvent);\n  expect(TestUtils.scryRenderedDOMComponentsWithClass(container, CONTAINER_DROP_ZONE_ACTIVE).length).toBe(1);\n\n  mockEvent.clientX = 0;\n  mockEvent.clientY = 101;\n  containerElement.offsetTop = containerElement.offsetLeft = 0;\n  containerElement.offsetHeight = containerElement.offsetWidth = 100;\n\n  TestUtils.Simulate.dragLeave(containerElement, mockEvent);\n  expect(TestUtils.scryRenderedDOMComponentsWithClass(container, CONTAINER_DROP_ZONE_ACTIVE).length).toBe(0);\n});\n</code></pre>\n\n<p>First, our <code>container</code> is the React element, not the list element where we attached the <code>onDragLeave</code> event handler. That means we need to capture the <code>'ul'</code> element to <code>containerElement</code>. This is done with <code>findRenderedDOMComponentWithTag()</code>. So far we have been using the <code>scry</code> versions of these functions. <code>scry</code> will find all, <code>find</code> will find the single instance and throw an error if it is unable.</p>\n\n<p>Next, we simulate a dragOver event and check that it activated one of the drop zones. </p>\n\n<p>Then we setup the mouse coordinates and bounding dimensions of the list. We know from the code that these are important, but we also know from the HTML5 spec that they will be provided.</p>\n\n<p>Finally, we simulate the drag leave and check that the number of active drop zones is now back to zero.</p>\n\n<h3 id=\"droppingshouldaddtheitemtothelist\">Dropping should add the item to the list.</h3>\n\n<p>For our drop testing we will use a new beforeEach setup.</p>\n\n<pre><code>beforeEach(function() {\n  container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords.slice(0)} /&gt;);\n  overItem  = getDropZone(container, randomWords.length)\n  mockEvent = { dataTransfer: { types: [CONTAINER_TYPE] } }\n});\n</code></pre>\n\n<p>This will give us a container, with <code>overItem</code> pointing to the last dropZone and a basic mockEvent. Then we can test whether dropping adds the item.</p>\n\n<pre><code>it('adds dropped items to currently selected drop zone', function() {\n    mockEvent.dataTransfer.getData = function() { return '\"peaches\"'; };\n\n    TestUtils.Simulate.dragOver(overItem, mockEvent);\n    TestUtils.Simulate.drop(overItem, mockEvent);\n    var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n    expect(items).toEqual(randomWords.concat([\"peaches\"]));\n});\n</code></pre>\n\n<p>First, we add a mock getData function that just returns <code>\"peaches\"</code>. Then we simulate a drag over to activate a drop zone, and we simulate a drop event to put that data into the container. Finally, we extract the items and see if our new item has been appended to the end.</p>\n\n<h3 id=\"droppingshouldremoveselecteditemsfromtheoriginallist\">Dropping should remove selected items from the original list.</h3>\n\n<pre><code>it('removes selected items', function() {\n  var item = getItemFromContainer(container, 0);\n  mockEvent.dataTransfer.dropEffect = \"move\";\n  mockEvent.dataTransfer.setData = function() {};\n  mockEvent.dataTransfer.getData = function() { return \"[\\\"\" + randomWords[0] + \"\\\"]\"; };\n  TestUtils.Simulate.dragStart(item, mockEvent);\n  TestUtils.Simulate.dragOver(overItem, mockEvent);\n  TestUtils.Simulate.drop(overItem, mockEvent);\n  TestUtils.Simulate.dragEnd(item, mockEvent);\n  var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n  // array where first item is now last\n  expect(items).toEqual(randomWords.slice(1).concat(randomWords[0]));\n});\n</code></pre>\n\n<p>This time we grab the first item in the container. We setup the mockEvent dataTransfer with that item's information. Then we simulate all of the events that normally happen, including the dragEnd. Then we check that the result is the list with with the first item removed and pinned to the end (<code>randomWords.slice(1).concat(randomWords[0])</code>).</p>\n\n<h2 id=\"conclusion\">Conclusion  </h2>\n\n<p>This article should have provided a decent description of testing a complex React component with Jest. We covered basic Jasmine syntax (<code>describe</code>, <code>it</code>, <code>it.only</code>, <code>expect</code>, <code>toBe</code>, <code>toEqual</code>, <code>toBeCalled</code>, <code>not</code>, <code>beforeEach</code>). We covered how to actually run the tests <code>npm test</code>. We saw quite a few of the React test utilities (<code>Simulate.[click, dragStart, dragOver, dragLeave, drop, dragEnd]</code>, <code>scryRenderedDOMComponentsWithClass</code>, <code>scryRenderedDOMComponentsWithTag</code>, <code>findRenderedDOMComponentWithTag</code>). We covered mocking the event data object, and some of the pain that it causes. And we gave lots of working test code as examples in the process.</p>\n\n<p>This article also provides a decent starting point for the next article, <a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using Test Driven Development with React.js</a>. In fact, that article was originally part of this article. As the length of this article grew, it was clear it needed to be broken up a bit. On the bright side, that means there is already a draft, so it should be up in the next couple days.</p>\n\n<h2 id=\"changes\">Changes  </h2>\n\n<p>So, as often happens, the solution to a problem comes to us when doing <em>other</em> things. And, as is often the case, that solution humbles us and makes us feel stupid. This is one such solution. </p>\n\n<p>Originally, I argued that the <code>style</code> property was unavailable. This ruined the otherwise beautiful CSS in JS paradigm. I was wrong.</p>\n\n<p>The <code>style</code> property is perfectly available via <code>item.props.style</code>. However, what is not available is the <code>ObjectMerge</code> module, because we forgot to tell Jest not to auto-mock it. Since it was mocked, it does not actually merge anything. Solution, <code>jest.dontMock()</code> or move the ObjectMerge.jsxand Object.Assign.js to the <code>support/</code> directory, which is on the <code>unmockedModulePathPatterns</code> in package.json.</p>\n\n<p>I always try to look on the bright side of things, and there is a bright side to this story. My pain and humiliation serves as a <a href=\"http://www.despair.com/mistakes.html\">cautionary tale</a> of the to others. Auto-mocking is great, but it has some gotchas.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "Testing React Drag and Drop Components with Jest",
            "meta_description": "Test driven development (TDD) is an important part of software engineering. React and Jest make it relatively easy. This tutorial explains how they work.",
            "author_id": 8,
            "created_at": 1422243666362,
            "created_by": 8,
            "updated_at": 1423369742370,
            "updated_by": 8,
            "published_at": 1422244210627,
            "published_by": 8
          },
          {
            "id": 30,
            "uuid": "c18ed0c4-7c8e-4768-b071-c3d11c3c59f7",
            "title": "React Conf Recap",
            "slug": "react-conf-recap",
            "markdown": "After live tweeting the whole conference this past week, I feel obligated to write up on it. I'll be covering the main stuff announced, at any point feel free to leave a comment or a reply on Twitter [@ReactJSNews](http://twitter.com/reactjsnews) with any questions. I try my best to respond to everyone.\n\n##React Native\n\nThis is the most talked about thing that has come from this conference. The React team has been working on a way to solve problems with building native apps. React Native allows you to use React like you normally would, but with new native-specific components. It will allow you to code once and ship an android and iOS app simultaneously. Not only does this help further the team's \"Learn once, write everywhere\" concept, it is even more practical than that. This tweet sums it up nicely.\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>React is now iOSmorphic too... <a href=\"https://twitter.com/hashtag/reactnative?src=hash\">#reactnative</a></p>&mdash; Jeff Winkler (@winkler1) <a href=\"https://twitter.com/winkler1/status/560509563485843456\">January 28, 2015</a></blockquote>\n\nIf you don't get it, you really shouldn't be using React. On a more serious note, the coolest points about RN is live reloading. No waiting for it to compile your app after making a code change. The project is still in its infancy, there isn't really a complete routing solution, which is understandable considering it's not even public yet. The good news is that the [react-router](https://github.com/rackt/react-router) team has verbally committed to making it compatible with RN. \n\nIf you're curious about what these React Native components look like, I posted a picture from the conference:\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Native components. <a href=\"http://t.co/X8BtTEuWk6\">pic.twitter.com/X8BtTEuWk6</a></p>&mdash; ReactJS News (@ReactJSNews) <a href=\"https://twitter.com/ReactJSNews/status/560861371697332225\">January 29, 2015</a></blockquote>\nOne of the top features here is the fact that [@Vjeux](http://twitter.com/vjeux) brought over full [flexbox](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes) compatibility into React Native. So you can style things the way you're used to doing on the web.\n\nEverytime I remember another awesome feature that RN has, I keep wanting to say that it's the best feature, they're all just so awesome. The next thing it can do is use any npm module you're already using. It'll work out of the box!\n\nIf you were curious about how good the gestures are in a React Native app, Pete Hunt sums it up pretty well.\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>btw, it&#39;s really good: <a href=\"https://twitter.com/jordwalke\">@jordwalke</a> (react native guy) often uses a slow-mo camera to ensure <a href=\"https://twitter.com/hashtag/reactnative?src=hash\">#reactnative</a>&#39;s touch gestures are solid</p>&mdash; Pete Hunt (@floydophone) <a href=\"https://twitter.com/floydophone/status/560881445325926401\">January 29, 2015</a></blockquote>\nAnother good tweet from an iOS developer confirms that RN is really good.\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>People asked why I like React&#39;s model over UIKit&#39;s: it does a better job of promoting isolation and confining effects, while being simpler.</p>&mdash; Andy Matuschak (@andy_matuschak) <a href=\"https://twitter.com/andy_matuschak/status/560675254654078976\">January 29, 2015</a></blockquote>\n\nYou can see a deep dive into RN [on youtube](https://www.youtube.com/watch?v=7rDsRXj9-cU).\n\n##Relay & GraphQL\n\nRelay was mentioned a little, but after talking to some members on the team, I found out it'll be months before it's actually released. This is a shame because it solves the missing piece with Flux. It is a full framework that uses React and GraphQL. GraphQL, is a new way to fetch data from your backend and is meant to be a replacement for REST. What's really nice about it is that inside of your components you define the data you're checking. Not that much is known other than the fact that you can delay certain data from loading in your app if you need to. Facebook loads posts and then after that is finished, in a non-blocking way of course, then comments are fetched. You'll also be able to slowly migrate flux apps over to Relay. I'm very interested in seeing what this framework will have to offer.\n\n##What's Next\nYou can see all of the conference talks [on youtube](https://www.youtube.com/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr). I hope you liked my recap of the conference. \n\nAfter asking people on Twitter if there's any React jobs available I got an overwhelming response. I'm currently working on a job board built using React that'll hopefully be up soon. For now I'll continue to send out jobs and other secret stuff in the newsletter. You can subscribe to that in the sidebar!\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
            "html": "<p>After live tweeting the whole conference this past week, I feel obligated to write up on it. I'll be covering the main stuff announced, at any point feel free to leave a comment or a reply on Twitter <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> with any questions. I try my best to respond to everyone.</p>\n\n<h2 id=\"reactnative\">React Native</h2>\n\n<p>This is the most talked about thing that has come from this conference. The React team has been working on a way to solve problems with building native apps. React Native allows you to use React like you normally would, but with new native-specific components. It will allow you to code once and ship an android and iOS app simultaneously. Not only does this help further the team's \"Learn once, write everywhere\" concept, it is even more practical than that. This tweet sums it up nicely.  </p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>React is now iOSmorphic too... <a href=\"https://twitter.com/hashtag/reactnative?src=hash\">#reactnative</a></p>&mdash; Jeff Winkler (@winkler1) <a href=\"https://twitter.com/winkler1/status/560509563485843456\">January 28, 2015</a></blockquote>\n\n<p>If you don't get it, you really shouldn't be using React. On a more serious note, the coolest points about RN is live reloading. No waiting for it to compile your app after making a code change. The project is still in its infancy, there isn't really a complete routing solution, which is understandable considering it's not even public yet. The good news is that the <a href=\"https://github.com/rackt/react-router\">react-router</a> team has verbally committed to making it compatible with RN. </p>\n\n<p>If you're curious about what these React Native components look like, I posted a picture from the conference:  </p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Native components. <a href=\"http://t.co/X8BtTEuWk6\">pic.twitter.com/X8BtTEuWk6</a></p>&mdash; ReactJS News (@ReactJSNews) <a href=\"https://twitter.com/ReactJSNews/status/560861371697332225\">January 29, 2015</a></blockquote>  \n\n<p>One of the top features here is the fact that <a href=\"http://twitter.com/vjeux\">@Vjeux</a> brought over full <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">flexbox</a> compatibility into React Native. So you can style things the way you're used to doing on the web.</p>\n\n<p>Everytime I remember another awesome feature that RN has, I keep wanting to say that it's the best feature, they're all just so awesome. The next thing it can do is use any npm module you're already using. It'll work out of the box!</p>\n\n<p>If you were curious about how good the gestures are in a React Native app, Pete Hunt sums it up pretty well.  </p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>btw, it&#39;s really good: <a href=\"https://twitter.com/jordwalke\">@jordwalke</a> (react native guy) often uses a slow-mo camera to ensure <a href=\"https://twitter.com/hashtag/reactnative?src=hash\">#reactnative</a>&#39;s touch gestures are solid</p>&mdash; Pete Hunt (@floydophone) <a href=\"https://twitter.com/floydophone/status/560881445325926401\">January 29, 2015</a></blockquote>  \n\n<p>Another good tweet from an iOS developer confirms that RN is really good.  </p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>People asked why I like React&#39;s model over UIKit&#39;s: it does a better job of promoting isolation and confining effects, while being simpler.</p>&mdash; Andy Matuschak (@andy_matuschak) <a href=\"https://twitter.com/andy_matuschak/status/560675254654078976\">January 29, 2015</a></blockquote>\n\n<p>You can see a deep dive into RN <a href=\"https://www.youtube.com/watch?v=7rDsRXj9-cU\">on youtube</a>.</p>\n\n<h2 id=\"relaygraphql\">Relay &amp; GraphQL</h2>\n\n<p>Relay was mentioned a little, but after talking to some members on the team, I found out it'll be months before it's actually released. This is a shame because it solves the missing piece with Flux. It is a full framework that uses React and GraphQL. GraphQL, is a new way to fetch data from your backend and is meant to be a replacement for REST. What's really nice about it is that inside of your components you define the data you're checking. Not that much is known other than the fact that you can delay certain data from loading in your app if you need to. Facebook loads posts and then after that is finished, in a non-blocking way of course, then comments are fetched. You'll also be able to slowly migrate flux apps over to Relay. I'm very interested in seeing what this framework will have to offer.</p>\n\n<h2 id=\"whatsnext\">What's Next</h2>\n\n<p>You can see all of the conference talks <a href=\"https://www.youtube.com/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr\">on youtube</a>. I hope you liked my recap of the conference. </p>\n\n<p>After asking people on Twitter if there's any React jobs available I got an overwhelming response. I'm currently working on a job board built using React that'll hopefully be up soon. For now I'll continue to send out jobs and other secret stuff in the newsletter. You can subscribe to that in the sidebar!  </p>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1422740574053,
            "created_by": 1,
            "updated_at": 1422742659270,
            "updated_by": 1,
            "published_at": 1422742659276,
            "published_by": 1
          },
          {
            "id": 31,
            "uuid": "4be71a41-38b4-474b-9476-82433951c30a",
            "title": "Using Test Driven Development with React.js to Add Multi-Select to the Drag and Drop Component",
            "slug": "using-tdd-with-reactjs",
            "markdown": "[Test Driven Development (TDD)](http://en.wikipedia.org/wiki/Test-driven_development) is a very powerful and popular development methodology. Testing [React.js](http://facebook.github.io/react/) components is most easily accomplished with [Jest](https://facebook.github.io/jest/). However, I rarely see articles that cover the process with lots of examples, especially for React components. This article seeks to do just that. From requirements to all tests green, we will walk through the whole process.\n\nBackground\n----------\nIn our [last article](https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/), we added some Jest based tests to our Container. I highly recommend reading that article and the preceding articles, especially the article on [Complex Drag and Drop Lists Using React](https://reactjsnews.com/complex-drag-and-drop-lists-using-react/). We will be building on both of these articles for this installment.\n\nFor reference, the series so far is:\n\n- [Using TDD with React.js](https://reactjsnews.com/using-tdd-with-reactjs/) [this article]\n- [Testing the Drag and Drop Component with React.js and Jest](https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/)\n- [Complex Drag and Drop Lists Using React](https://reactjsnews.com/complex-drag-and-drop-lists-using-react/)\n- [Setting up Rails for React and Jest](https://reactjsnews.com/setting-up-rails-for-react-and-jest/)\n\n*All of the code is available on GitHub in the [Dex v2.0 tag](https://github.com/HurricaneJames/dex/tree/v2.0).*\n\n\nStarting with Tests\n-------------------\nTo expand on the last article, we will be using Test Driven Development [TDD](http://en.wikipedia.org/wiki/Test-driven_development) to enhance our Container. This type of development starts with a test, then creates code to make the test pass. Once the test passes, the code can be refactored with confidence.\n\nFirst, a little role playing. The project manager stopped by our desk and said we need some new functionality. They want our list container to support multi-select drag and drop. After some thought, we come up with some new requirements we can test.\n\n- clicking on an item should mark it as selected\n- clicking on a selected item should mark it as not selected\n- it should still mark an item as selected when dragging it with no click required\n- it should not mark a previously selected item as not selected when dragging it\n- it should add all of the items to the datatransfer\n- it should add all of the dragged items to the container\n- it should remove all of the selected items from the original container when requested\n\n\nWith these requirements in hand, let's get started.\n\nSelecting/De-Selecting Items\n----------------------------\n\nSince we are using TDD now, we will start with the tests. First up, clicking on an item.\n\n    describe(\"Selecting Items\", function() {\n      var container, item;\n      beforeEach(function() {\n        container = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        item      = getItemFromContainer(container, 0);\n      });\n\n      it('highlights item as selected when clicked', function() {\n        expect(item.props.className).toBe('');\n        TestUtils.Simulate.click(item);\n        expect(item.props.className).toBe('container-selected');\n      });\n\n      it('does not highlight items when they are un-selected', function() {\n        TestUtils.Simulate.click(item);\n        TestUtils.Simulate.click(item);\n        expect(item.props.className).toBe('');\n      });\n    });\n\nThese are both fairly simple to understand and appropriately red when running `npm test Container`. Next up, dragging. We already test that items are selected when dragged. But we should make sure that selected items are not un-selected when dragged.\n\n    describe(\"Drag Start\", function() {\n      // ...\n      it('should keep previously selected items as selected when dragged', function() {\n        TestUtils.Simulate.click(item);\n        expect(item.props.className).toBe('container-selected');\n        TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n        expect(item.props.className).toBe('container-selected');\n      });\n      // ...\n    });\n\nThis test also fails because we do not yet handle the click event. So let's turn these tests green.\n\n### Set\n\nThe basic data structure for a collection of unique items is a Set. It just so happens that ECMAScript 6 has such a [Set data structure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set). Even better, there is a [polyfill](http://en.wikipedia.org/wiki/Polyfill) available as a Node package, [es6-set](https://www.npmjs.com/package/es6-set). So, up at the top of `Container.jsx`, we should be able to add `var Set = require('es6-set');` and include 'es6-set' in our `package.json` file. Right? Wrong!\n\nIt turns out that at least the 'es6-set' package is extremely incompatible with Jest. Just including the library, without even instantiating a single Set, causes Jest to crash and burn. After hours of debugging, no solution was in sight. It seems to be an issue with node packages included by other node packages.\n\nThe solution we ultimately decided upon was the creation of a SimpleSet. SimpleSet uses the an almost native ECMAScript 6 Set object when available and a simple subset when not. The implementation is available on GitHub: [SimpleSet](https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/support/SimpleSet.js) and [SimpleSet-test](https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/__tests__/support/SimpleSet-test.js).\n\nWe did add one function that we consider missing from the ECMAScript 6 spec, toArray(). Technically, ES6 Set has `Array.from()`. However, `Array.from()` only has support in the latest versions of Firefox. We did not consider that an acceptable solution, even for future looking ES6.\n\nNow that we have a SimpleSet implementation, we include it by adding `var Set = require('./support/SimpleSet');` at the top of our `Container.jsx` file. We also need to include `\"support/\"` in the `unmockedModulePathPatterns` section of the package.json, otherwise Jest will auto-mock the SimpleSet module when it is required.\n\n\\* This article was 95% written, and 100% code locked, before I learned about [Immutable.js](https://www.npmjs.com/package/react-immutable-render-mixin). Immutable.js is a superior solution. It has a Set and List implementation. Combining those with the [react-immutable-render-mixin](https://www.npmjs.com/package/react-immutable-render-mixin) makes for a very powerful combination. Expect more on this topic in a future article.\n\n\n### Adding Multi-Select Support\n\nNow that we have a Set implementation, we need to replace the old `state.selected` with the new Set. Switching from a single `selected` to a `Set` for selected items will require the following changes to `Container.jsx`.\n\n- `NONE_SELECTED` - delete this variable completely\n\n- `getInitialState()` - replace `NONE_SELECTED` with `new Set()`\n\n- `renderListElement()` - add two new props to the `<li />` component\n    - `onClick={this.onClickOnListItem}` - to capture the click event\n    - `data-key={key}` - needed lookup the item when clicked\n\n- `onClickOnListItem()` [new function]\n\n        onClickOnListItem: function(e) {\n          var selectedIndex = parseInt(e.currentTarget.getAttribute('data-key'));\n          this.toggleSelectedItem(selectedIndex);\n          this.setState({ selected: this.state.selected });\n        },\n\n    Notice that we are using `getAttribute('data-key')` because Jest does not support the `dataset` property of elements.\n\n- `toggleSelectedItem()` [new function]\n\n        toggleSelectedItem: function(selectedIndex) {\n          return this.state.selected.has(selectedIndex) ? this.state.selected.delete(selectedIndex) : this.state.selected.add(selectedIndex);\n        },\n\nWith these changes, the tests for selecting items should go green.\n\nStarting Drag Operations\n------------------------\n\nNow that we have item selection working, we need to turn our attention to requirements for when dragging operations begin. Again, we are going to start with our tests. Fortunately, these tests are pretty self explanatory.\n\n- it should still mark an item as selected when dragging it with no click required (existing test, no changes required)\n\n- it should not mark a previously selected item as not selected when dragging it\n\n        it('should keep previously selected items as selected when dragged', function() {\n          TestUtils.Simulate.click(item);\n          expect(item.props.className).toBe('container-selected');\n          TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n          expect(item.props.className).toBe('container-selected');\n        });\n\n- it should add all of the items to the datatransfer\n\n        it(\"should put all selected items into the data transfer\", function() {\n          TestUtils.Simulate.click(item);\n          var item2 = getItemFromContainer(container, 1);\n          TestUtils.Simulate.dragStart(item2, { dataTransfer: mockDataTransfer });\n          expect(mockDataTransfer.setData).toBeCalledWith(CONTAINER_TYPE, '[\"apple\",\"banana\"]');\n        });\n\nThese tests depend on a beforeEach that sets\n\n        mockDataTransfer = { setData: jest.genMockFunction() }\n        container        = TestUtils.renderIntoDocument(<Container itemTemplate={CustomTemplate} items={randomWords} />)\n        item             = getItemFromContainer(container, 0);\n\nRunning the tests will, as expected, produce nice red responses.\n\n### Making Drag Start Operations Green\n\nNow we need to turn that red to green. Looking at our first set of errors leads to `onDragStart`. It is doing many bad things, from trying to set `selected = selectedIndex` to not including all of the items. So we can start by changing that function.\n\n    onDragStart: function(e) {\n      var selectedIndex = parseInt(e.currentTarget.getAttribute('data-key'));\n      this.state.selected.add(selectedIndex);\n      e.dataTransfer.effectAllowed = ALLOWED_DROP_EFFECT;\n      e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.getSelectedItems()));\n      this.setState({ selected: this.state.selected });\n    },\n\nFirst, instead of straight assignment, we add the selected index to the selected set. We still limit the drop effect, but now we stringify all the selected items with the help of a `getSelectedItems()` function. Finally we set the new state.\n\n`getSelectedItems()` is fairly simple. It just copies out the selected items into an array, sorts them, and maps the resulting ids to the actual items.\n\n    getSelectedItems: function() {\n      return this.state.selected.toArray().sort().map(function(itemIndex) { return this.state.items[itemIndex]; }, this);\n    },\n\nA colleague asked me, \"why are you sorting the selected items?\" We sort the array because Set does not specify or guarantee an order to the items it contains. So, we sort the array to guarantee the component works the same on every possible implementation and environment. This produces an array of items that matches the order of the items as they are displayed.\n\nAlso, we now have another set of green tests again. However, our drag and drop tests are still failing.\n\nDrop Operations\n---------------\n\nThe drag over operations did not change, but we do need to address the differences in drop operations. Our requirements translate fairly well to tests that are already in our spec, they just need to be updated.\n\n### It Should Add All of the Dragged Items to the Container\n\nStarting with our test:\n\n    it('adds dropped items to currently selected drop zone', function() {\n        var randomDropWords = '[\"peaches\", \"cream\"]';\n        mockEvent.dataTransfer.getData = function() { return randomDropWords; };\n\n        TestUtils.Simulate.dragOver(overItem, mockEvent);\n        TestUtils.Simulate.drop(overItem, mockEvent);\n        var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n        expect(items).toEqual(randomWords.concat([\"peaches\", \"cream\"]));\n    });\n\nIn the original test we only added \"peaches\". This time we are adding `[\"peaches\", \"cream\"]`. The only other thing that changes is we expect items to equal a slightly longer list. It is still red, but now we can make the changes required to turn this red to green, and they are fairly straight forward.\n\n    onDrop: function(e) {\n      var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));\n      if(this.state.hoverOver !== NO_HOVER) {\n        Array.prototype.splice.apply(this.state.items, [this.state.hoverOver, 0].concat(data));\n        this.correctSelectedAfterDrop(data);\n        this.setState({\n          items: this.state.items,\n          selected: this.state.selected,\n          hoverOver: NO_HOVER\n        });\n      }\n    },\n\nFirst we change the splice function to add in all of the data with a little trick. Instead of calling `this.state.items` directly, we call `Array.prototype.splice.apply`. Then we pass in `this.state.items` as the `this` argument for the function and an array for our parameters. If you are unfamiliar with this trick, I highly recommend reading John Resig's and Bear Bibeault's excellent book \"[Secrets of the JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/).\"\n\nWe setState as before. For now, `correctSelectedAfterDrop = function() {}`. Run the tests. . . and green. Well, at least this test went green. We will need to update the `correctSelectedAfterDrop` to make the next test pass.\n\n### It Should Remove All of the Selected Items from the Original Container\n\nThe previous test, `it('removes selected items', function() {...}`, should still work, but something is wrong with removing the selected items. Looking at `onDragEnd`, it obviously needs some changes. It is still splicing a single item, based on a variable that is not a number anymore, and it is trying to set selected to NONE_SELECTED, which does not exist. Let's take a stab a rewriting this.\n\n*The astute reader will also notice that we made a *faux pas* in our previous version in that we are setting state variables directly. We are going to clean that up now too.*\n\n    onDragEnd: function(e) {\n      if(e.dataTransfer.dropEffect === ALLOWED_DROP_EFFECT) {\n        this.removeSelectedItems();\n        this.state.selected.clear();\n        this.setState({\n          items:    this.state.items,\n          selected: this.state.selected,\n          hoverOver: NO_HOVER\n        });\n        return;\n      }\n      if(this.state.hoverOver !== NO_HOVER || this.state.selected.size !== 0) {\n        this.state.selected.clear();\n        this.setState({ hoverOver: NO_HOVER, selected: this.state.selected });\n      }\n    },\n\nWe moved the code for removing selected items into a a separate function, `removeSelectedItems()`. Then we properly clear the set. We set the state correctly. We also fixed the second if statement to properly clear and set the state when the drag operation was cancelled.\n\nThe new function to remove selected items is a little more complex than the original splice.\n\n    removeSelectedItems: function() {\n      return this.state.selected.toArray().sort().reverse().map(function(itemId) { return this.state.items.splice(itemId, 1); }, this);\n    },\n\nWe start by converting the selected set into an array and, as before, sorting it. We then reverse that sort so we start from the last selected item first. Going from the first would mess up the indices with every item we removed.\n\nPerformance of reverse is unlikely to become a problem with the number of items we have selected, which is probably hundreds at most. However, if ever ever becomes a problem, just remove the `reverse().map()` and replace with a for loop iterating from length down to zero. Yes, we could do it now, but that would be \"premature optimization.\" As Donald Knuth once said \"Premature optimization is the root of all evil (or at least most of it) in programming.\"\n\nWe could run our test now, but we are forgetting that we took a pass on `correctSelectedAfterDrop()` in the `onDrop()` function. We need to implement that for real now. Feel free to run the tests, but it will still be red.\n\n    correctSelectedAfterDrop: function(droppedItems) {\n      if(this.state.hoverOver !== NO_HOVER) {\n        var bumpSet = []\n          , bumpBy  = droppedItems.length;\n        this.state.selected.forEach(function(itemId) { if(itemId >= this.state.hoverOver) { bumpSet.push(itemId); } }, this);\n        bumpSet.forEach(function(itemId) { this.state.selected.delete(itemId); }, this);\n        bumpSet.forEach(function(itemId) { this.state.selected.add(itemId + bumpBy); }, this);\n      }\n    },\n\nFirst we start by creating a bumpSet. This is an array of selected indices that are greater than or equal to the dropZone index, `hoverOver`. You may remember from an earlier article that we have to correct our selected index pointers for those selected items below the active drop zone because `drop` adds new items to the container before we remove the old ones. Once we have identified the item indices that need to change, we remove each of them from the selected set. Finally, we add them back, bumped by the number of items dropped into the container.\n\nHowever, we only want to do this if we dropped the items into the container from which they were extracted. This is a bit tricky since the drop event it called on the target container, but not the source container. The solution is to rely on the fact that only one container will have an active drop zone at a time (drop zones are deactivated when the pointer leaves the container). So if we have a drop event and hoverOver is **not** NO_HOVER, then we know we need to modify the selected item indices.\n\nNow, when we run our tests, we see all green. And when we fire up our browser, it works as expected.\n\n\nConclusion\n----------\nThis article shows the TDD process for adding a new feature from start (new requirements) to finish (tests updated, added, and passing). As articles go, it is not particularly exciting or ground breaking. However, for developers who have not written (m)any tests, especially for JavaScript code, I have seen precious few articles giving must direction. Hopefully some developers will find it useful.\n\n\nComing Soon\n-----------\nI am working on an in-depth walk through of [Flux](http://facebook.github.io/flux/) architecture, focusing on the [Reflux](https://github.com/spoike/refluxjs/) library. Reflux is one of the simplest implementations of Flux. If everything goes well, I should have that online by the end of February.\n\nAlso, on a side note, a colleague suggested that I start recording these tutorials as screencasts. Before I spend a substantial amount of time, energy, and resources learning how to do that, I would love some feedback on whether anybody would even find it useful.",
            "html": "<p><a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development (TDD)</a> is a very powerful and popular development methodology. Testing <a href=\"http://facebook.github.io/react/\">React.js</a> components is most easily accomplished with <a href=\"https://facebook.github.io/jest/\">Jest</a>. However, I rarely see articles that cover the process with lots of examples, especially for React components. This article seeks to do just that. From requirements to all tests green, we will walk through the whole process.</p>\n\n<h2 id=\"background\">Background  </h2>\n\n<p>In our <a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">last article</a>, we added some Jest based tests to our Container. I highly recommend reading that article and the preceding articles, especially the article on <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a>. We will be building on both of these articles for this installment.</p>\n\n<p>For reference, the series so far is:</p>\n\n<ul>\n<li><a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using TDD with React.js</a> [this article]</li>\n<li><a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">Testing the Drag and Drop Component with React.js and Jest</a></li>\n<li><a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a></li>\n<li><a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting up Rails for React and Jest</a></li>\n</ul>\n\n<p><em>All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p>\n\n<h2 id=\"startingwithtests\">Starting with Tests  </h2>\n\n<p>To expand on the last article, we will be using Test Driven Development <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> to enhance our Container. This type of development starts with a test, then creates code to make the test pass. Once the test passes, the code can be refactored with confidence.</p>\n\n<p>First, a little role playing. The project manager stopped by our desk and said we need some new functionality. They want our list container to support multi-select drag and drop. After some thought, we come up with some new requirements we can test.</p>\n\n<ul>\n<li>clicking on an item should mark it as selected</li>\n<li>clicking on a selected item should mark it as not selected</li>\n<li>it should still mark an item as selected when dragging it with no click required</li>\n<li>it should not mark a previously selected item as not selected when dragging it</li>\n<li>it should add all of the items to the datatransfer</li>\n<li>it should add all of the dragged items to the container</li>\n<li>it should remove all of the selected items from the original container when requested</li>\n</ul>\n\n<p>With these requirements in hand, let's get started.</p>\n\n<h2 id=\"selectingdeselectingitems\">Selecting/De-Selecting Items  </h2>\n\n<p>Since we are using TDD now, we will start with the tests. First up, clicking on an item.</p>\n\n<pre><code>describe(\"Selecting Items\", function() {\n  var container, item;\n  beforeEach(function() {\n    container = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    item      = getItemFromContainer(container, 0);\n  });\n\n  it('highlights item as selected when clicked', function() {\n    expect(item.props.className).toBe('');\n    TestUtils.Simulate.click(item);\n    expect(item.props.className).toBe('container-selected');\n  });\n\n  it('does not highlight items when they are un-selected', function() {\n    TestUtils.Simulate.click(item);\n    TestUtils.Simulate.click(item);\n    expect(item.props.className).toBe('');\n  });\n});\n</code></pre>\n\n<p>These are both fairly simple to understand and appropriately red when running <code>npm test Container</code>. Next up, dragging. We already test that items are selected when dragged. But we should make sure that selected items are not un-selected when dragged.</p>\n\n<pre><code>describe(\"Drag Start\", function() {\n  // ...\n  it('should keep previously selected items as selected when dragged', function() {\n    TestUtils.Simulate.click(item);\n    expect(item.props.className).toBe('container-selected');\n    TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n    expect(item.props.className).toBe('container-selected');\n  });\n  // ...\n});\n</code></pre>\n\n<p>This test also fails because we do not yet handle the click event. So let's turn these tests green.</p>\n\n<h3 id=\"set\">Set</h3>\n\n<p>The basic data structure for a collection of unique items is a Set. It just so happens that ECMAScript 6 has such a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set data structure</a>. Even better, there is a <a href=\"http://en.wikipedia.org/wiki/Polyfill\">polyfill</a> available as a Node package, <a href=\"https://www.npmjs.com/package/es6-set\">es6-set</a>. So, up at the top of <code>Container.jsx</code>, we should be able to add <code>var Set = require('es6-set');</code> and include 'es6-set' in our <code>package.json</code> file. Right? Wrong!</p>\n\n<p>It turns out that at least the 'es6-set' package is extremely incompatible with Jest. Just including the library, without even instantiating a single Set, causes Jest to crash and burn. After hours of debugging, no solution was in sight. It seems to be an issue with node packages included by other node packages.</p>\n\n<p>The solution we ultimately decided upon was the creation of a SimpleSet. SimpleSet uses the an almost native ECMAScript 6 Set object when available and a simple subset when not. The implementation is available on GitHub: <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/support/SimpleSet.js\">SimpleSet</a> and <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/__tests__/support/SimpleSet-test.js\">SimpleSet-test</a>.</p>\n\n<p>We did add one function that we consider missing from the ECMAScript 6 spec, toArray(). Technically, ES6 Set has <code>Array.from()</code>. However, <code>Array.from()</code> only has support in the latest versions of Firefox. We did not consider that an acceptable solution, even for future looking ES6.</p>\n\n<p>Now that we have a SimpleSet implementation, we include it by adding <code>var Set = require('./support/SimpleSet');</code> at the top of our <code>Container.jsx</code> file. We also need to include <code>\"support/\"</code> in the <code>unmockedModulePathPatterns</code> section of the package.json, otherwise Jest will auto-mock the SimpleSet module when it is required.</p>\n\n<p>* This article was 95% written, and 100% code locked, before I learned about <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">Immutable.js</a>. Immutable.js is a superior solution. It has a Set and List implementation. Combining those with the <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">react-immutable-render-mixin</a> makes for a very powerful combination. Expect more on this topic in a future article.</p>\n\n<h3 id=\"addingmultiselectsupport\">Adding Multi-Select Support</h3>\n\n<p>Now that we have a Set implementation, we need to replace the old <code>state.selected</code> with the new Set. Switching from a single <code>selected</code> to a <code>Set</code> for selected items will require the following changes to <code>Container.jsx</code>.</p>\n\n<ul>\n<li><p><code>NONE_SELECTED</code> - delete this variable completely</p></li>\n<li><p><code>getInitialState()</code> - replace <code>NONE_SELECTED</code> with <code>new Set()</code></p></li>\n<li><p><code>renderListElement()</code> - add two new props to the <code>&lt;li /&gt;</code> component</p>\n\n<ul><li><code>onClick={this.onClickOnListItem}</code> - to capture the click event</li>\n<li><code>data-key={key}</code> - needed lookup the item when clicked</li></ul></li>\n<li><p><code>onClickOnListItem()</code> [new function]</p>\n\n<pre><code>onClickOnListItem: function(e) {\n  var selectedIndex = parseInt(e.currentTarget.getAttribute('data-key'));\n  this.toggleSelectedItem(selectedIndex);\n  this.setState({ selected: this.state.selected });\n},\n</code></pre>\n\n<p>Notice that we are using <code>getAttribute('data-key')</code> because Jest does not support the <code>dataset</code> property of elements.</p></li>\n<li><p><code>toggleSelectedItem()</code> [new function]</p>\n\n<pre><code>toggleSelectedItem: function(selectedIndex) {\n  return this.state.selected.has(selectedIndex) ? this.state.selected.delete(selectedIndex) : this.state.selected.add(selectedIndex);\n},\n</code></pre></li>\n</ul>\n\n<p>With these changes, the tests for selecting items should go green.</p>\n\n<h2 id=\"startingdragoperations\">Starting Drag Operations  </h2>\n\n<p>Now that we have item selection working, we need to turn our attention to requirements for when dragging operations begin. Again, we are going to start with our tests. Fortunately, these tests are pretty self explanatory.</p>\n\n<ul>\n<li><p>it should still mark an item as selected when dragging it with no click required (existing test, no changes required)</p></li>\n<li><p>it should not mark a previously selected item as not selected when dragging it</p>\n\n<pre><code>it('should keep previously selected items as selected when dragged', function() {\n  TestUtils.Simulate.click(item);\n  expect(item.props.className).toBe('container-selected');\n  TestUtils.Simulate.dragStart(item, { dataTransfer: mockDataTransfer });\n  expect(item.props.className).toBe('container-selected');\n});\n</code></pre></li>\n<li><p>it should add all of the items to the datatransfer</p>\n\n<pre><code>it(\"should put all selected items into the data transfer\", function() {\n  TestUtils.Simulate.click(item);\n  var item2 = getItemFromContainer(container, 1);\n  TestUtils.Simulate.dragStart(item2, { dataTransfer: mockDataTransfer });\n  expect(mockDataTransfer.setData).toBeCalledWith(CONTAINER_TYPE, '[\"apple\",\"banana\"]');\n});\n</code></pre></li>\n</ul>\n\n<p>These tests depend on a beforeEach that sets</p>\n\n<pre><code>    mockDataTransfer = { setData: jest.genMockFunction() }\n    container        = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)\n    item             = getItemFromContainer(container, 0);\n</code></pre>\n\n<p>Running the tests will, as expected, produce nice red responses.</p>\n\n<h3 id=\"makingdragstartoperationsgreen\">Making Drag Start Operations Green</h3>\n\n<p>Now we need to turn that red to green. Looking at our first set of errors leads to <code>onDragStart</code>. It is doing many bad things, from trying to set <code>selected = selectedIndex</code> to not including all of the items. So we can start by changing that function.</p>\n\n<pre><code>onDragStart: function(e) {\n  var selectedIndex = parseInt(e.currentTarget.getAttribute('data-key'));\n  this.state.selected.add(selectedIndex);\n  e.dataTransfer.effectAllowed = ALLOWED_DROP_EFFECT;\n  e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.getSelectedItems()));\n  this.setState({ selected: this.state.selected });\n},\n</code></pre>\n\n<p>First, instead of straight assignment, we add the selected index to the selected set. We still limit the drop effect, but now we stringify all the selected items with the help of a <code>getSelectedItems()</code> function. Finally we set the new state.</p>\n\n<p><code>getSelectedItems()</code> is fairly simple. It just copies out the selected items into an array, sorts them, and maps the resulting ids to the actual items.</p>\n\n<pre><code>getSelectedItems: function() {\n  return this.state.selected.toArray().sort().map(function(itemIndex) { return this.state.items[itemIndex]; }, this);\n},\n</code></pre>\n\n<p>A colleague asked me, \"why are you sorting the selected items?\" We sort the array because Set does not specify or guarantee an order to the items it contains. So, we sort the array to guarantee the component works the same on every possible implementation and environment. This produces an array of items that matches the order of the items as they are displayed.</p>\n\n<p>Also, we now have another set of green tests again. However, our drag and drop tests are still failing.</p>\n\n<h2 id=\"dropoperations\">Drop Operations  </h2>\n\n<p>The drag over operations did not change, but we do need to address the differences in drop operations. Our requirements translate fairly well to tests that are already in our spec, they just need to be updated.</p>\n\n<h3 id=\"itshouldaddallofthedraggeditemstothecontainer\">It Should Add All of the Dragged Items to the Container</h3>\n\n<p>Starting with our test:</p>\n\n<pre><code>it('adds dropped items to currently selected drop zone', function() {\n    var randomDropWords = '[\"peaches\", \"cream\"]';\n    mockEvent.dataTransfer.getData = function() { return randomDropWords; };\n\n    TestUtils.Simulate.dragOver(overItem, mockEvent);\n    TestUtils.Simulate.drop(overItem, mockEvent);\n    var items = TestUtils.scryRenderedDOMComponentsWithClass(container, 'customFinder').map(function(item) { return item.getDOMNode().textContent; });\n    expect(items).toEqual(randomWords.concat([\"peaches\", \"cream\"]));\n});\n</code></pre>\n\n<p>In the original test we only added \"peaches\". This time we are adding <code>[\"peaches\", \"cream\"]</code>. The only other thing that changes is we expect items to equal a slightly longer list. It is still red, but now we can make the changes required to turn this red to green, and they are fairly straight forward.</p>\n\n<pre><code>onDrop: function(e) {\n  var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));\n  if(this.state.hoverOver !== NO_HOVER) {\n    Array.prototype.splice.apply(this.state.items, [this.state.hoverOver, 0].concat(data));\n    this.correctSelectedAfterDrop(data);\n    this.setState({\n      items: this.state.items,\n      selected: this.state.selected,\n      hoverOver: NO_HOVER\n    });\n  }\n},\n</code></pre>\n\n<p>First we change the splice function to add in all of the data with a little trick. Instead of calling <code>this.state.items</code> directly, we call <code>Array.prototype.splice.apply</code>. Then we pass in <code>this.state.items</code> as the <code>this</code> argument for the function and an array for our parameters. If you are unfamiliar with this trick, I highly recommend reading John Resig's and Bear Bibeault's excellent book \"<a href=\"http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/\">Secrets of the JavaScript Ninja</a>.\"</p>\n\n<p>We setState as before. For now, <code>correctSelectedAfterDrop = function() {}</code>. Run the tests. . . and green. Well, at least this test went green. We will need to update the <code>correctSelectedAfterDrop</code> to make the next test pass.</p>\n\n<h3 id=\"itshouldremovealloftheselecteditemsfromtheoriginalcontainer\">It Should Remove All of the Selected Items from the Original Container</h3>\n\n<p>The previous test, <code>it('removes selected items', function() {...}</code>, should still work, but something is wrong with removing the selected items. Looking at <code>onDragEnd</code>, it obviously needs some changes. It is still splicing a single item, based on a variable that is not a number anymore, and it is trying to set selected to NONE_SELECTED, which does not exist. Let's take a stab a rewriting this.</p>\n\n<p><em>The astute reader will also notice that we made a *faux pas</em> in our previous version in that we are setting state variables directly. We are going to clean that up now too.*</p>\n\n<pre><code>onDragEnd: function(e) {\n  if(e.dataTransfer.dropEffect === ALLOWED_DROP_EFFECT) {\n    this.removeSelectedItems();\n    this.state.selected.clear();\n    this.setState({\n      items:    this.state.items,\n      selected: this.state.selected,\n      hoverOver: NO_HOVER\n    });\n    return;\n  }\n  if(this.state.hoverOver !== NO_HOVER || this.state.selected.size !== 0) {\n    this.state.selected.clear();\n    this.setState({ hoverOver: NO_HOVER, selected: this.state.selected });\n  }\n},\n</code></pre>\n\n<p>We moved the code for removing selected items into a a separate function, <code>removeSelectedItems()</code>. Then we properly clear the set. We set the state correctly. We also fixed the second if statement to properly clear and set the state when the drag operation was cancelled.</p>\n\n<p>The new function to remove selected items is a little more complex than the original splice.</p>\n\n<pre><code>removeSelectedItems: function() {\n  return this.state.selected.toArray().sort().reverse().map(function(itemId) { return this.state.items.splice(itemId, 1); }, this);\n},\n</code></pre>\n\n<p>We start by converting the selected set into an array and, as before, sorting it. We then reverse that sort so we start from the last selected item first. Going from the first would mess up the indices with every item we removed.</p>\n\n<p>Performance of reverse is unlikely to become a problem with the number of items we have selected, which is probably hundreds at most. However, if ever ever becomes a problem, just remove the <code>reverse().map()</code> and replace with a for loop iterating from length down to zero. Yes, we could do it now, but that would be \"premature optimization.\" As Donald Knuth once said \"Premature optimization is the root of all evil (or at least most of it) in programming.\"</p>\n\n<p>We could run our test now, but we are forgetting that we took a pass on <code>correctSelectedAfterDrop()</code> in the <code>onDrop()</code> function. We need to implement that for real now. Feel free to run the tests, but it will still be red.</p>\n\n<pre><code>correctSelectedAfterDrop: function(droppedItems) {\n  if(this.state.hoverOver !== NO_HOVER) {\n    var bumpSet = []\n      , bumpBy  = droppedItems.length;\n    this.state.selected.forEach(function(itemId) { if(itemId &gt;= this.state.hoverOver) { bumpSet.push(itemId); } }, this);\n    bumpSet.forEach(function(itemId) { this.state.selected.delete(itemId); }, this);\n    bumpSet.forEach(function(itemId) { this.state.selected.add(itemId + bumpBy); }, this);\n  }\n},\n</code></pre>\n\n<p>First we start by creating a bumpSet. This is an array of selected indices that are greater than or equal to the dropZone index, <code>hoverOver</code>. You may remember from an earlier article that we have to correct our selected index pointers for those selected items below the active drop zone because <code>drop</code> adds new items to the container before we remove the old ones. Once we have identified the item indices that need to change, we remove each of them from the selected set. Finally, we add them back, bumped by the number of items dropped into the container.</p>\n\n<p>However, we only want to do this if we dropped the items into the container from which they were extracted. This is a bit tricky since the drop event it called on the target container, but not the source container. The solution is to rely on the fact that only one container will have an active drop zone at a time (drop zones are deactivated when the pointer leaves the container). So if we have a drop event and hoverOver is <strong>not</strong> NO_HOVER, then we know we need to modify the selected item indices.</p>\n\n<p>Now, when we run our tests, we see all green. And when we fire up our browser, it works as expected.</p>\n\n<h2 id=\"conclusion\">Conclusion  </h2>\n\n<p>This article shows the TDD process for adding a new feature from start (new requirements) to finish (tests updated, added, and passing). As articles go, it is not particularly exciting or ground breaking. However, for developers who have not written (m)any tests, especially for JavaScript code, I have seen precious few articles giving must direction. Hopefully some developers will find it useful.</p>\n\n<h2 id=\"comingsoon\">Coming Soon  </h2>\n\n<p>I am working on an in-depth walk through of <a href=\"http://facebook.github.io/flux/\">Flux</a> architecture, focusing on the <a href=\"https://github.com/spoike/refluxjs/\">Reflux</a> library. Reflux is one of the simplest implementations of Flux. If everything goes well, I should have that online by the end of February.</p>\n\n<p>Also, on a side note, a colleague suggested that I start recording these tutorials as screencasts. Before I spend a substantial amount of time, energy, and resources learning how to do that, I would love some feedback on whether anybody would even find it useful.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "Using TDD with React.js",
            "meta_description": "A walkthrough of the Test Driven Development (TDD) process for testing React.js components with Jest from requirements to passing tests.",
            "author_id": 8,
            "created_at": 1423369275120,
            "created_by": 8,
            "updated_at": 1423369629944,
            "updated_by": 8,
            "published_at": 1423369629963,
            "published_by": 8
          },
          {
            "id": 32,
            "uuid": "c6c29827-d1c9-44e3-b802-ea687a3e0d4b",
            "title": "I Hear You Want A React Europe Ticket!",
            "slug": "i-hear-you-want-a-react-europe-ticket",
            "markdown": "The React Europe team has been kind enough to offer me two tickets. One for me to use, and another to giveaway. I'm excited about this conference, but I'm not 100% sure yet if I'll be going. Either way, someone will win a ticket. If I do end up being able to go, I'll be helping at the check in booth, so anyone who didn't see me at the first conference definitely would this time!\n\n##The Details\n\nI'm going to give it away similar to last time, but the criteria is going to be much simpler. Whichever article I consider to be the most influential and impactful will win. It's that simple. You can submit an article or video. It just has to be a minimum of 300 words and high quality. The video needs to be useful as well, obviously a two-second video won't be accepted. If you have any questions, leave a comment! You can send in your submissions to: zackify(at)gmail.com!\n\n**Deadline:** May 1st",
            "html": "<p>The React Europe team has been kind enough to offer me two tickets. One for me to use, and another to giveaway. I'm excited about this conference, but I'm not 100% sure yet if I'll be going. Either way, someone will win a ticket. If I do end up being able to go, I'll be helping at the check in booth, so anyone who didn't see me at the first conference definitely would this time!</p>\n\n<h2 id=\"thedetails\">The Details</h2>\n\n<p>I'm going to give it away similar to last time, but the criteria is going to be much simpler. Whichever article I consider to be the most influential and impactful will win. It's that simple. You can submit an article or video. It just has to be a minimum of 300 words and high quality. The video needs to be useful as well, obviously a two-second video won't be accepted. If you have any questions, leave a comment! You can send in your submissions to: zackify(at)gmail.com!</p>\n\n<p><strong>Deadline:</strong> May 1st</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1426127899981,
            "created_by": 1,
            "updated_at": 1426129447721,
            "updated_by": 1,
            "published_at": 1426128241358,
            "published_by": 1
          },
          {
            "id": 33,
            "uuid": "c8d064fa-1b70-4b60-80ac-6822e83e01a0",
            "title": "Getting Started with Flux",
            "slug": "getting-started-with-flux",
            "markdown": "## What is flux?\n\n[Flux](http://facebook.github.io/flux/docs/overview.html) is an application architecture for building complex user interfaces. It eschews MVC in favor of unidirectional data flow. What this means is that data enters through a single place (your actions) and then flows outward through to their state manager (the store) and finally onto the view. The view can then restart the flow by calling other actions in response to user input.\n\nWe'll be using [Alt](https://github.com/goatslacker/alt) for flux because it removes away some of the boilerplate, is isomorphic (meaning you can use it to render content server side), and it uses the flux dispatcher under the hood.\n\nThe full code for this tutorial is available [here](https://github.com/goatslacker/alt-tutorial).\n\n## Setup\n\nFor this tutorial I'll be assuming you're familiar with [React](https://facebook.github.io/react/), [CommonJS](http://www.commonjs.org/), [ES5 JavaScript](https://es5.github.io/), and a subset of [ES6](https://people.mozilla.org/~jorendorff/es6-draft.html) specifically the one that works with react's transform. I'll also assume you're on a modern browser or a node environment. \n\n## Installing\n\nIf you're using a package manager like npm or bower then go ahead and install alt.\n\n```bash\nnpm install alt\n```\n\n## Folder structure\n\nA typical folder structure would like like this\n\n```txt\nyour_project\n|--actions/\n|  |--MyActions.js\n|--stores/\n|  |--MyStore.js\n|--components/\n|  |--MyComponent.jsx\n|--alt.js\n|--app.js\n```\n\n## Creating your first alt\n\nFor this guide we'll be creating a very simple application which has a list of travel destinations and allows you to favorite which ones you're interested in. Let's get started.\n\nWe'll be creating an instance of alt, this instantiates a [Flux dispatcher](http://facebook.github.io/flux/docs/dispatcher.html#content) for you and gives you methods to create your actions and stores. We'll be referring back to this file throughout this guide.\n\nIn the root of your project, create a new file called `alt.js`.\n\n```js\nvar Alt = require('alt');\nvar alt = new Alt();\n\nmodule.exports = alt;\n```\n\n---\n\n## Creating Actions\n\nActions are how you get data into your stores and then onto your view. They kick-off the dispatch loop and are the single entry point of data flow.\n\nThe first actions we create will be simple, they'll take in an array of locations we'll pass in at the start of the application and just dispatch them to the store.\n\nWe create an action by creating a class, the class' prototype methods will become the actions. The class syntax is completely optional you can use regular constructors and prototypes.\n\nInside those actions you can use `this.dispatch` to dispatch your payload through the Dispatcher and onto the stores. Finally, make sure you export the created actions using `alt.createActions`.\n\n`actions/LocationActions.js`\n\n```js\nvar alt = require('../alt');\n\nclass LocationActions {\n  updateLocations(locations) {\n    this.dispatch(locations);\n  }\n}\n\nmodule.exports = alt.createActions(LocationActions);\n```\n\n---\n\n\n## Creating a Store\n\nThe store is your data warehouse. This is the single source of truth for a particular piece of your application's state. \n\nSimilar to actions, we'll be creating a class for the store. Also like the actions, the class syntax is completely optional, you can use regular constructors and prototypes.\n\n```js\nclass LocationStore {\n  constructor() {\n  }\n}\n```\n\n\nInstance variables defined anywhere in the store will become the state. This resembles how we reason about and build normal JS classes. You can initiaize these in the constructor and then update them directly in the prototype methods.\n\n```js\nthis.locations = [];\n```\n\nNext, we define methods in the store's prototype that will deal with the actions. These are called action handlers.\nStores automatically emit a change event when an action is dispatched through the store and the action handler ends. In order to suppress the change event you can return false from the action handler.\n\n```js\nhandleUpdateLocations(locations) {\n  this.locations = locations;\n}\n```\n\nAnd then in the constructor, we bind our action handlers to our actions.\n\n```js\nthis.bindListeners({\n  handleUpdateLocations: LocationActions.UPDATE_LOCATIONS\n});\n```\n\nFinally, we export our newly created store.\n\n```js\nmodule.exports = alt.createStore(LocationStore, 'LocationStore');\n```\n\n---\n\n\n## Using your View\n\nWe won't spend too much time on all the parts of the view since it is more about React than it is Flux, however, the important piece is how you listen to stores and get data out of it.\n\nGetting the state out of your store is simple, every alt store has a method which returns its state. The state is copied over as a value when returned so you accidentally don't mutate it by reference. We can use React's `getInitialState` to set the initial state using the store's state.\n\n```js\ngetInitialState() {\n  return LocationStore.getState();\n},\n```\n\nBut then we'll want to listen to changes once the state in the store is updated. In your react component on `componentDidMount` you can add an event handler using `LocationStore.listen`.\n\n```js\ncomponentDidMount() {\n  LocationStore.listen(this.onChange);\n},\n```\n\nAnd, don't forget to remove your event listener.\n\n```js\ncomponentWillUnmount() {\n  LocationStore.unlisten(this.onChange);\n},\n```\n\nA few [mixins](https://github.com/goatslacker/alt/tree/master/mixins) are available to make this boilerplate go away.\n\n---\n\n## Fetching Data\n\nOne of the most common questions people have when they are new to flux is: where should async go?\n\nThere is no right answer right now and don't feel bad if you're putting it in actions or in stores. In this tutorial we'll be calling async from the actions and the data fetching will exist in a new folder `utils`. This tutorial will handle fetching the data and failure states.\n\nSo we create `utils/LocationsFetcher.js`. We can use something like [fetch](https://github.com/github/fetch) to fetch some data from a server, but for the purposes of this tutorial we'll just simulate an XHR with good ol' `setTimeout` and `Promise` so we copy fetch's API.\n\nHere's some mock data we'll be using\n\n```js\nvar mockData = [\n  { id: 0, name: 'Abu Dhabi' },\n  { id: 1, name: 'Berlin' },\n  { id: 2, name: 'Bogota' },\n  { id: 3, name: 'Buenos Aires' },\n  { id: 4, name: 'Cairo' },\n  { id: 5, name: 'Chicago' },\n  { id: 6, name: 'Lima' },\n  { id: 7, name: 'London' },\n  { id: 8, name: 'Miami' },\n  { id: 9, name: 'Moscow' },\n  { id: 10, name: 'Mumbai' },\n  { id: 11, name: 'Paris' },\n  { id: 12, name: 'San Francisco' }\n];\n```\n\nSo let's create the LocationsFetcher.\n\n`utils/LocationsFetcher.js`\n\n```js\nvar LocationsFetcher = {\n  fetch: function () {\n    // returning a Promise because that is what fetch does.\n    return new Promise(function (resolve, reject) {\n      // simulate an asynchronous action where data is fetched on\n      // a remote server somewhere.\n      setTimeout(function () {\n\n        // resolve with some mock data\n        resolve(mockData);\n      }, 250);\n    });\n  }\n};\n```\n\nNext, wel'll need to change the actions to use this new method we created. We will add an action called `fetchLocations` which will fetch the locations and then call `updateLocations` when it successfully completes. A new action is also added, `locationsFailed` which deals with the locations not being available. Add these methods to the class.\n\n`actions/LocationActions.js`\n\n```js\nfetchLocations() {\n  // we dispatch an event here so we can have \"loading\" state.\n  this.dispatch();\n\n  LocationsFetcher.fetch()\n    .then((locations) => {\n      // we can access other actions within our action through `this.actions`\n      this.actions.updateLocations(locations);\n    })\n    .catch((errorMessage) => {\n      this.actions.locationsFailed(errorMessage);\n    });\n}\n\nlocationsFailed(errorMessage) {\n  this.dispatch(errorMessage);\n}\n```\n\nNext we'll update our store to handle these new actions. It's just a matter of adding the new actions and their handlers to `bindListeners`. We'll be adding a new piece of state though, 'errorMessage' to deal with any potential error messages.\n\n`stores/LocationStore.js`\n\n```js\nclass LocationStore {\n  constructor() {\n    this.locations = [];\n    this.errorMessage = null;\n\n    this.bindListeners({\n      handleUpdateLocations: LocationActions.UPDATE_LOCATIONS,\n      handleFetchLocations: LocationActions.FETCH_LOCATIONS,\n      handleLocationsFailed: LocationActions.LOCATIONS_FAILED\n    });\n  }\n\n  handleUpdateLocations(locations) {\n    this.locations = locations;\n    this.errorMessage = null;\n  }\n\n  handleFetchLocations() {\n    // reset the array while we're fetching new locations so React can\n    // be smart and render a spinner for us since the data is empty.\n    this.locations = [];\n  }\n\n  handleLocationsFailed(errorMessage) {\n    this.errorMessage = errorMessage;\n  }\n}\n```\n\nAnd finally, the view will change slightly. We'll be displaying an error message if it exists and showing a spinner if the content is loading.\n\n```js\ncomponentDidMount() {\n  LocationStore.listen(this.onChange);\n\n  LocationActions.fetchLocations();\n},\n\nrender() {\n  if (this.state.errorMessage) {\n    return (\n      <div>Something is wrong</div>\n    );\n  }\n\n  if (!this.state.locations.length) {\n    return (\n      <div>\n        <img src=\"/my-cool-spinner.gif\" />\n      </div>\n    )\n  }\n\n  return (\n    <ul>\n      {this.state.locations.map((location) => {\n        return (\n          <li>{location.name}</li>\n        );\n      })}\n    </ul>\n  );\n}\n```\n\n---\n\n## Data Dependencies\n\nOne of the best features of using Flux's dispatcher is the ability to explicitly declare data dependencies between stores.\n\nDealing with data dependencies is often tricky and time consuming. This is one of the reasons why flux was originally built. \n\nFlux comes with this method called `waitFor` which signals to the dispatcher that this store depends on another store for its data.\n\nSay we have a new `FavoritesStore` where you'll be able to mark your favorite locations. We want to update the LocationStore only after the FavoriteStore gets its update.\n\nFirst lets add a new action to our LocationActions.\n\n`actions/LocationActions.js`\n\n```js\nfavoriteLocation(locationId) {\n  this.dispatch(locationId);\n}\n```\n\nNext, lets build our FavoritesStore.\n\n`stores/FavoritesStore.js`\n\n```js\nvar alt = require('../alt');\nvar LocationActions = require('../actions/LocationActions');\n\nclass FavoritesStore {\n  constructor() {\n    this.locations = [];\n\n    this.bindListeners({\n      addFavoriteLocation: LocationActions.FAVORITE_LOCATION\n    });\n  }\n\n  addFavoriteLocation(location) {\n    this.locations.push(location);\n  }\n}\n\nmodule.exports = alt.createStore(FavoritesStore, 'FavoritesStore');\n```\n\nAnd finally lets set the waitFor dependency in our LocationStore. But first, make sure you bind the new action to a new action handler in the store.\n\n```js\nthis.bindListeners({\n  handleUpdateLocations: LocationActions.UPDATE_LOCATIONS,\n  handleFetchLocations: LocationActions.FETCH_LOCATIONS,\n  handleLocationsFailed: LocationActions.LOCATIONS_FAILED,\n  setFavorites: LocationActions.FAVORITE_LOCATION\n});\n```\n\nAnd lets create the action handler with `waitFor`.\n\n```js\nresetAllFavorites() {\n  this.locations = this.locations.map((location) => {\n    return {\n      id: location.id,\n      name: location.name,\n      has_favorite: false\n    };\n  });\n}\n\nsetFavorites(location) {\n  this.waitFor(FavoritesStore);\n\n  var favoritedLocations = FavoritesStore.getState().locations;\n\n  this.resetAllFavorites();\n\n  favoritedLocations.forEach((location) => {\n    // find each location in the array\n    for (var i = 0; i < this.locations.length; i += 1) {\n\n      // set has_favorite to true\n      if (this.locations[i].id === location.id) {\n        this.locations[i].has_favorite = true;\n        break;\n      }\n    }\n  });\n}\n```\n\n---\n\n## Conclusion\n\nIn this guide you've learned about creating actions, creating a store, tying your view to the store updates, dealing with asynchronous data, and dealing with store dependencies.\n\nYou can check out the code for the final result [here](https://github.com/goatslacker/alt-tutorial).\n\nIf you have any questions feel free to reach out to me on twitter [@goatslacker](https://twitter.com/goatslacker), or hit up the [Alt Support channel](https://gitter.im/goatslacker/alt), and there's also a great community around react and flux over at [Reactiflux](http://reactiflux.com/).",
            "html": "<h2 id=\"whatisflux\">What is flux?</h2>\n\n<p><a href=\"http://facebook.github.io/flux/docs/overview.html\">Flux</a> is an application architecture for building complex user interfaces. It eschews MVC in favor of unidirectional data flow. What this means is that data enters through a single place (your actions) and then flows outward through to their state manager (the store) and finally onto the view. The view can then restart the flow by calling other actions in response to user input.</p>\n\n<p>We'll be using <a href=\"https://github.com/goatslacker/alt\">Alt</a> for flux because it removes away some of the boilerplate, is isomorphic (meaning you can use it to render content server side), and it uses the flux dispatcher under the hood.</p>\n\n<p>The full code for this tutorial is available <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>For this tutorial I'll be assuming you're familiar with <a href=\"https://facebook.github.io/react/\">React</a>, <a href=\"http://www.commonjs.org/\">CommonJS</a>, <a href=\"https://es5.github.io/\">ES5 JavaScript</a>, and a subset of <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6</a> specifically the one that works with react's transform. I'll also assume you're on a modern browser or a node environment. </p>\n\n<h2 id=\"installing\">Installing</h2>\n\n<p>If you're using a package manager like npm or bower then go ahead and install alt.</p>\n\n<pre><code class=\"bash\">npm install alt  \n</code></pre>\n\n<h2 id=\"folderstructure\">Folder structure</h2>\n\n<p>A typical folder structure would like like this</p>\n\n<pre><code class=\"txt\">your_project  \n|--actions/\n|  |--MyActions.js\n|--stores/\n|  |--MyStore.js\n|--components/\n|  |--MyComponent.jsx\n|--alt.js\n|--app.js\n</code></pre>\n\n<h2 id=\"creatingyourfirstalt\">Creating your first alt</h2>\n\n<p>For this guide we'll be creating a very simple application which has a list of travel destinations and allows you to favorite which ones you're interested in. Let's get started.</p>\n\n<p>We'll be creating an instance of alt, this instantiates a <a href=\"http://facebook.github.io/flux/docs/dispatcher.html#content\">Flux dispatcher</a> for you and gives you methods to create your actions and stores. We'll be referring back to this file throughout this guide.</p>\n\n<p>In the root of your project, create a new file called <code>alt.js</code>.</p>\n\n<pre><code class=\"js\">var Alt = require('alt');  \nvar alt = new Alt();\n\nmodule.exports = alt;  \n</code></pre>\n\n<hr />\n\n<h2 id=\"creatingactions\">Creating Actions</h2>\n\n<p>Actions are how you get data into your stores and then onto your view. They kick-off the dispatch loop and are the single entry point of data flow.</p>\n\n<p>The first actions we create will be simple, they'll take in an array of locations we'll pass in at the start of the application and just dispatch them to the store.</p>\n\n<p>We create an action by creating a class, the class' prototype methods will become the actions. The class syntax is completely optional you can use regular constructors and prototypes.</p>\n\n<p>Inside those actions you can use <code>this.dispatch</code> to dispatch your payload through the Dispatcher and onto the stores. Finally, make sure you export the created actions using <code>alt.createActions</code>.</p>\n\n<p><code>actions/LocationActions.js</code></p>\n\n<pre><code class=\"js\">var alt = require('../alt');\n\nclass LocationActions {  \n  updateLocations(locations) {\n    this.dispatch(locations);\n  }\n}\n\nmodule.exports = alt.createActions(LocationActions);  \n</code></pre>\n\n<hr />\n\n<h2 id=\"creatingastore\">Creating a Store</h2>\n\n<p>The store is your data warehouse. This is the single source of truth for a particular piece of your application's state. </p>\n\n<p>Similar to actions, we'll be creating a class for the store. Also like the actions, the class syntax is completely optional, you can use regular constructors and prototypes.</p>\n\n<pre><code class=\"js\">class LocationStore {  \n  constructor() {\n  }\n}\n</code></pre>\n\n<p>Instance variables defined anywhere in the store will become the state. This resembles how we reason about and build normal JS classes. You can initiaize these in the constructor and then update them directly in the prototype methods.</p>\n\n<pre><code class=\"js\">this.locations = [];  \n</code></pre>\n\n<p>Next, we define methods in the store's prototype that will deal with the actions. These are called action handlers. <br />\nStores automatically emit a change event when an action is dispatched through the store and the action handler ends. In order to suppress the change event you can return false from the action handler.</p>\n\n<pre><code class=\"js\">handleUpdateLocations(locations) {  \n  this.locations = locations;\n}\n</code></pre>\n\n<p>And then in the constructor, we bind our action handlers to our actions.</p>\n\n<pre><code class=\"js\">this.bindListeners({  \n  handleUpdateLocations: LocationActions.UPDATE_LOCATIONS\n});\n</code></pre>\n\n<p>Finally, we export our newly created store.</p>\n\n<pre><code class=\"js\">module.exports = alt.createStore(LocationStore, 'LocationStore');  \n</code></pre>\n\n<hr />\n\n<h2 id=\"usingyourview\">Using your View</h2>\n\n<p>We won't spend too much time on all the parts of the view since it is more about React than it is Flux, however, the important piece is how you listen to stores and get data out of it.</p>\n\n<p>Getting the state out of your store is simple, every alt store has a method which returns its state. The state is copied over as a value when returned so you accidentally don't mutate it by reference. We can use React's <code>getInitialState</code> to set the initial state using the store's state.</p>\n\n<pre><code class=\"js\">getInitialState() {  \n  return LocationStore.getState();\n},\n</code></pre>\n\n<p>But then we'll want to listen to changes once the state in the store is updated. In your react component on <code>componentDidMount</code> you can add an event handler using <code>LocationStore.listen</code>.</p>\n\n<pre><code class=\"js\">componentDidMount() {  \n  LocationStore.listen(this.onChange);\n},\n</code></pre>\n\n<p>And, don't forget to remove your event listener.</p>\n\n<pre><code class=\"js\">componentWillUnmount() {  \n  LocationStore.unlisten(this.onChange);\n},\n</code></pre>\n\n<p>A few <a href=\"https://github.com/goatslacker/alt/tree/master/mixins\">mixins</a> are available to make this boilerplate go away.</p>\n\n<hr />\n\n<h2 id=\"fetchingdata\">Fetching Data</h2>\n\n<p>One of the most common questions people have when they are new to flux is: where should async go?</p>\n\n<p>There is no right answer right now and don't feel bad if you're putting it in actions or in stores. In this tutorial we'll be calling async from the actions and the data fetching will exist in a new folder <code>utils</code>. This tutorial will handle fetching the data and failure states.</p>\n\n<p>So we create <code>utils/LocationsFetcher.js</code>. We can use something like <a href=\"https://github.com/github/fetch\">fetch</a> to fetch some data from a server, but for the purposes of this tutorial we'll just simulate an XHR with good ol' <code>setTimeout</code> and <code>Promise</code> so we copy fetch's API.</p>\n\n<p>Here's some mock data we'll be using</p>\n\n<pre><code class=\"js\">var mockData = [  \n  { id: 0, name: 'Abu Dhabi' },\n  { id: 1, name: 'Berlin' },\n  { id: 2, name: 'Bogota' },\n  { id: 3, name: 'Buenos Aires' },\n  { id: 4, name: 'Cairo' },\n  { id: 5, name: 'Chicago' },\n  { id: 6, name: 'Lima' },\n  { id: 7, name: 'London' },\n  { id: 8, name: 'Miami' },\n  { id: 9, name: 'Moscow' },\n  { id: 10, name: 'Mumbai' },\n  { id: 11, name: 'Paris' },\n  { id: 12, name: 'San Francisco' }\n];\n</code></pre>\n\n<p>So let's create the LocationsFetcher.</p>\n\n<p><code>utils/LocationsFetcher.js</code></p>\n\n<pre><code class=\"js\">var LocationsFetcher = {  \n  fetch: function () {\n    // returning a Promise because that is what fetch does.\n    return new Promise(function (resolve, reject) {\n      // simulate an asynchronous action where data is fetched on\n      // a remote server somewhere.\n      setTimeout(function () {\n\n        // resolve with some mock data\n        resolve(mockData);\n      }, 250);\n    });\n  }\n};\n</code></pre>\n\n<p>Next, wel'll need to change the actions to use this new method we created. We will add an action called <code>fetchLocations</code> which will fetch the locations and then call <code>updateLocations</code> when it successfully completes. A new action is also added, <code>locationsFailed</code> which deals with the locations not being available. Add these methods to the class.</p>\n\n<p><code>actions/LocationActions.js</code></p>\n\n<pre><code class=\"js\">fetchLocations() {  \n  // we dispatch an event here so we can have \"loading\" state.\n  this.dispatch();\n\n  LocationsFetcher.fetch()\n    .then((locations) =&gt; {\n      // we can access other actions within our action through `this.actions`\n      this.actions.updateLocations(locations);\n    })\n    .catch((errorMessage) =&gt; {\n      this.actions.locationsFailed(errorMessage);\n    });\n}\n\nlocationsFailed(errorMessage) {  \n  this.dispatch(errorMessage);\n}\n</code></pre>\n\n<p>Next we'll update our store to handle these new actions. It's just a matter of adding the new actions and their handlers to <code>bindListeners</code>. We'll be adding a new piece of state though, 'errorMessage' to deal with any potential error messages.</p>\n\n<p><code>stores/LocationStore.js</code></p>\n\n<pre><code class=\"js\">class LocationStore {  \n  constructor() {\n    this.locations = [];\n    this.errorMessage = null;\n\n    this.bindListeners({\n      handleUpdateLocations: LocationActions.UPDATE_LOCATIONS,\n      handleFetchLocations: LocationActions.FETCH_LOCATIONS,\n      handleLocationsFailed: LocationActions.LOCATIONS_FAILED\n    });\n  }\n\n  handleUpdateLocations(locations) {\n    this.locations = locations;\n    this.errorMessage = null;\n  }\n\n  handleFetchLocations() {\n    // reset the array while we're fetching new locations so React can\n    // be smart and render a spinner for us since the data is empty.\n    this.locations = [];\n  }\n\n  handleLocationsFailed(errorMessage) {\n    this.errorMessage = errorMessage;\n  }\n}\n</code></pre>\n\n<p>And finally, the view will change slightly. We'll be displaying an error message if it exists and showing a spinner if the content is loading.</p>\n\n<pre><code class=\"js\">componentDidMount() {  \n  LocationStore.listen(this.onChange);\n\n  LocationActions.fetchLocations();\n},\n\nrender() {  \n  if (this.state.errorMessage) {\n    return (\n      &lt;div&gt;Something is wrong&lt;/div&gt;\n    );\n  }\n\n  if (!this.state.locations.length) {\n    return (\n      &lt;div&gt;\n        &lt;img src=\"/my-cool-spinner.gif\" /&gt;\n      &lt;/div&gt;\n    )\n  }\n\n  return (\n    &lt;ul&gt;\n      {this.state.locations.map((location) =&gt; {\n        return (\n          &lt;li&gt;{location.name}&lt;/li&gt;\n        );\n      })}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>\n\n<hr />\n\n<h2 id=\"datadependencies\">Data Dependencies</h2>\n\n<p>One of the best features of using Flux's dispatcher is the ability to explicitly declare data dependencies between stores.</p>\n\n<p>Dealing with data dependencies is often tricky and time consuming. This is one of the reasons why flux was originally built. </p>\n\n<p>Flux comes with this method called <code>waitFor</code> which signals to the dispatcher that this store depends on another store for its data.</p>\n\n<p>Say we have a new <code>FavoritesStore</code> where you'll be able to mark your favorite locations. We want to update the LocationStore only after the FavoriteStore gets its update.</p>\n\n<p>First lets add a new action to our LocationActions.</p>\n\n<p><code>actions/LocationActions.js</code></p>\n\n<pre><code class=\"js\">favoriteLocation(locationId) {  \n  this.dispatch(locationId);\n}\n</code></pre>\n\n<p>Next, lets build our FavoritesStore.</p>\n\n<p><code>stores/FavoritesStore.js</code></p>\n\n<pre><code class=\"js\">var alt = require('../alt');  \nvar LocationActions = require('../actions/LocationActions');\n\nclass FavoritesStore {  \n  constructor() {\n    this.locations = [];\n\n    this.bindListeners({\n      addFavoriteLocation: LocationActions.FAVORITE_LOCATION\n    });\n  }\n\n  addFavoriteLocation(location) {\n    this.locations.push(location);\n  }\n}\n\nmodule.exports = alt.createStore(FavoritesStore, 'FavoritesStore');  \n</code></pre>\n\n<p>And finally lets set the waitFor dependency in our LocationStore. But first, make sure you bind the new action to a new action handler in the store.</p>\n\n<pre><code class=\"js\">this.bindListeners({  \n  handleUpdateLocations: LocationActions.UPDATE_LOCATIONS,\n  handleFetchLocations: LocationActions.FETCH_LOCATIONS,\n  handleLocationsFailed: LocationActions.LOCATIONS_FAILED,\n  setFavorites: LocationActions.FAVORITE_LOCATION\n});\n</code></pre>\n\n<p>And lets create the action handler with <code>waitFor</code>.</p>\n\n<pre><code class=\"js\">resetAllFavorites() {  \n  this.locations = this.locations.map((location) =&gt; {\n    return {\n      id: location.id,\n      name: location.name,\n      has_favorite: false\n    };\n  });\n}\n\nsetFavorites(location) {  \n  this.waitFor(FavoritesStore);\n\n  var favoritedLocations = FavoritesStore.getState().locations;\n\n  this.resetAllFavorites();\n\n  favoritedLocations.forEach((location) =&gt; {\n    // find each location in the array\n    for (var i = 0; i &lt; this.locations.length; i += 1) {\n\n      // set has_favorite to true\n      if (this.locations[i].id === location.id) {\n        this.locations[i].has_favorite = true;\n        break;\n      }\n    }\n  });\n}\n</code></pre>\n\n<hr />\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this guide you've learned about creating actions, creating a store, tying your view to the store updates, dealing with asynchronous data, and dealing with store dependencies.</p>\n\n<p>You can check out the code for the final result <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p>\n\n<p>If you have any questions feel free to reach out to me on twitter <a href=\"https://twitter.com/goatslacker\">@goatslacker</a>, or hit up the <a href=\"https://gitter.im/goatslacker/alt\">Alt Support channel</a>, and there's also a great community around react and flux over at <a href=\"http://reactiflux.com/\">Reactiflux</a>.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 12,
            "created_at": 1427047745843,
            "created_by": 12,
            "updated_at": 1427142750142,
            "updated_by": 1,
            "published_at": 1427142750178,
            "published_by": 1
          },
          {
            "id": 34,
            "uuid": "ef75867f-b52e-41e2-beb1-1c06c0a1ce07",
            "title": "Building Components with React.js and Reflux",
            "slug": "building-components-with-react-js-and-flux",
            "markdown": "React is a great view library. If used just right, it even makes an alright controller. However, sometimes you need something more. That is where Flux can be handy.\n\nFlux is the Facebook solution to keep the MVC paradigm from becoming unmanageable. If you are wondering whether Flux is right for your project, Dan Abramov made [\"The Case for Flux\"](https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6) a few weeks ago. I cannot recommend his article enough. To summarize, Dan points out that Flux is great if:\n\n* \"your data changes over time\" and you \"care about immediately reflecting those changes in the UI\"\n* \"you want to cache data in memory, but it can change while cached\"\n* \"your data is relational and models include and depend on each other\"\n* \"data is assembled from different sources and can be rendered in several places throughout the UI\"\n\nIf none of that sounds important, you probably do not need Flux. Let's assume it does sound important though. What next?\n\n\nThe Assignment\n--------------\n\nWe are going to write a very simple edit tool. Our component will have two parts. First, a label telling users to \"Enter Some Text.\" Second, a block where a user can enter some text. That is pretty simple.\n\nHowever, we are going to complicate things by requiring that multiple components on the same page display that data in different ways. We are going to complicate things a little further by requiring that there is no global \"parent\" app. Instead, it is important that we can \"sprinkle\" the react components on to our page.\n\n\"Why?,\" you say. A lot of us are trying to augment legacy apps. While you can generally add sprinkles to a cake, it is often harder to convince your boss to let you re-bake the whole cake. Also, because coordinating such a large single root starts to become really complex as the app grows. And it becomes painful once we need to start making ajax calls or, or add a backbone layer, or, well, anything not display related.\n\n\nGetting Started\n---------------\n\nThe examples in this article are based on the [Dex](https://github.com/HurricaneJames/dex) code base. Dex is a Rails and Browserify webapp. However, the concepts in this article should be easily transferrable. We will be working on the BlueBird component, located in `app/assets/javascripts/components/BlueBird.jsx`. BlueBird is put in the global scope in `components.js` and loaded onto the page by `react_component` from the [react-rails](https://github.com/reactjs/react-rails) package.\n\nIf you want to follow along and write code as we go grab [Dex v3.0](https://github.com/HurricaneJames/dex/tree/v3.0).\n\n    git clone https://github.com/HurricaneJames/dex/tree/v3.0\n    cd dex\n    bundle install\n    npm install\n    rails s\n\nIf you just want to jump to the end, grab [Dex v3.1](https://github.com/HurricaneJames/dex/tree/v3.1). All of the code from this article will be available there.\n\n    git clone https://github.com/HurricaneJames/dex/tree/v3.1\n    cd dex\n    bundle install\n    npm install\n    # separate console\n    rails s\n    # optional, and from a different console\n    npm run fayeserver\n    # open a browser and point it to http://localhost:3000/pages/index\n\n\nBlueBird\n--------\n\nThis is a super simple React.js component. We will create a two files in the `components` directory, `BlueBird.jsx` and `BlueBirdContainer.jsx.` The container handles any state, the actual component is stateless. This is the container design pattern. and is very useful when creating React components. Since we are using React-Rails, we will also require the container file as a global variable in the  `components.js` file.\n\nStarting with the `BlueBird` component:\n\n    // app/assets/javascripts/components/BlueBird.jsx\n    var React = require('react');\n\n    var BlueBird = React.createClass({\n      displayName: 'BlueBird',\n      propTypes: {\n        content: React.PropTypes.string,\n        onChange: React.PropTypes.func\n      },\n      onChange: function(e) {\n        this.props.onChange(e.target.value);\n      },\n      render: function() {\n        return (\n          <div>\n            <span>Enter Some Text</span>\n            <textarea\n              value={this.props.content}\n              onChange={this.onChange}\n              rows={15}\n            />\n          </div>\n        );\n      }\n    });\n\n    module.exports = BlueBirdBody;\n\nAs you can see, this really is a very simple React component. The render function has a span telling users to `Enter Some Text` and a textarea to actual enter that text. Next, we create our container, a separate component where we will keep state.\n\n    var React = require('react')\n      , BlueBird = require('./BlueBird');\n\n    var BlueBirdContainer = React.createClass({\n      displayName: 'BlueBirdContainer',\n      propTypes: {\n        reverse: React.PropTypes.bool\n      },\n      getInitialState: function() {\n        return {\n          bluebirdBody: ''\n        }\n      }\n      getContent: function() {\n        if(this.props.reverse) {\n          return this.state.bluebirdBody.split('').reverse().join('');\n        }else {\n          return this.state.bluebirdBody;\n        }\n      },\n      onBodyChange: function(newValue) {\n        this.setState({bluebirdBody: newValue});\n      },\n      render: function() {\n        return (\n          <div>\n            <BlueBird content={this.getContent()} onChange={this.onBodyChange} />\n          </div>\n        );\n      }\n    });\n\n    module.exports = BlueBirdContainer;\n\nThis component is fairly straightforward. It holds an internal state for the text, and if the `reverse` prop is set to `true`, then it will reverse the text in the text box. This is not particularly useful, except as something interesting we can demo.\n\nFinally, we will add the component to our app:\n\n- add the component to our components.js file\n    \n        BlueBirdContainer = require('./components/BlueBirdContainer');\n\n- add the component to our page\n    \n        <%# app/views/pages/index.html.erb %>\n        <h1>BlueBird - Index</h1>\n        <%= react_component 'BlueBirdContainer' %>\n\n- start our server\n\n        rails s\n\n- and load the page in a browser `http://localhost:3000/pages/index`).\n\nThis gives us a nice simple text box.\n\n![Basic BlueBird Container](/content/images/2015/04/BuildingInteractive-001.png)\n\n\nMultiple BlueBirds\n------------------\n\nNow that we have a basic component, we want to be able to add it to our page multiple times. Since we are using Rails, we can create a new view `pages/bluebird.html.erb`.\n\n    <h1>BlueBird</h1>\n    <%= react_component \"BlueBirdContainer\", {} %>\n    <%= react_component \"BlueBirdContainer\", { reverse: true } %>\n\nWe add two components, the second one set to reverse. Then we add it to our `routes.rb`.\n\n      get 'pages/bluebird'\n\nNext we setup our `pages_controller.rb`.\n\n      def bluebird\n      end\n\nThen, when we point our browser to `http://localhost:3000/pages/bluebird`...\n\n![Double Blue Birds](/content/images/2015/04/BuildingInteractive-002.png)\n\nWe get two text boxes that are completely unrelated to each other. Not surprising since we never linked the state of the two container components. So, how do we link the two components together. Well, we have a couple options.\n\nFirst, we could create a BlueBirdRootApp component. All state for the entire app would be contained in this single component, and it would pass that state down to its children along with callback props. This works great in simple cases, and even in cases where we are designing the entire app from scratch. However, it is a bit limiting when we need to sprinkle our React components into an existing app.\n\nSecond, we use Flux! When thinking back to Abramov's four cases, our requirement fits perfectly.\n\n\nFlux / Reflux\n-------------\n\nSo, what is flux?\n\n    ╔═════════╗     ╔════════════╗     ╔════════╗     ╔═════════════════╗\n    ║ Actions ║────>║ Dispatcher ║────>║ Stores ║────>║ View Components ║\n    ╚═════════╝     ╚════════════╝     ╚════════╝     ╚═════════════════╝\n         ^                                                    │\n         └────────────────────────────────────────────────────┘\n\n\nFlux is a version of the Model View Controller paradigm that focuses on unidirectional dataflow. It specifies a dispatcher, some stores, some views, and some actions. Actions trigger the dispatcher. The dispatcher routes actions to interested stores. The stores update based on the action, and then notify the views to rerender. Then, the cycle starts all over again.\n\nThere is a lot more detail, but this is where I'm going to stop. Why, because we are going to use Reflux, which is even easier.\n\n    ╔═════════╗       ╔════════╗       ╔═════════════════╗\n    ║ Actions ║──────>║ Stores ║──────>║ View Components ║\n    ╚═════════╝       ╚════════╝       ╚═════════════════╝\n         ^                                      │\n         └──────────────────────────────────────┘\n\n[Reflux](https://github.com/spoike/refluxjs) is an implementation of the basic concepts of Flux by Mikael Brassman. It greatly simplifies Flux by removing the dispatcher. Rather than actions flowing through a dispatcher, actions flow directly to the stores.\n\nIt is still possible to do everything with Reflux that can be done with Flux because stores can listen to other stores. However, in practice, I have yet to find that useful. Mostly, it just leads to overly complex code.\n\n\nAdding Reflux to Our Project\n----------------------------\n\nThe first thing we will need to do is add Reflux to our project. Since we are using browserify, we can add to the `package.json` dependencies.\n\n    \"reflux\": \"^0.2.7\"\n\nAlternatively, you can install it from the command line.\n\n    npm install --save reflux\n\nThen we need to create some actions, create a store to listen to those actions, and finally link that store to our `BlueBirdContainer` state. Fortunately, Reflux makes this easy.\n\n\nCreate Actions\n--------------\n\nReflux provides many ways to create actions. It provides options for sync/async, promises, callbacks, etc... However, every time I have tried anything but the simplest, I have come to regret it. Flux, as an architecture, really wants us to stick to the `Actions -> Stores -> Components -> Actions` model. Chen Zihui wrote an interesting article, [\"Hello, React.js,\"](https://medium.com/@jetupper/hello-react-js-b87c63526e3a) about some common React.js/Flux mistakes. One of his stories speaks directly to complicating the Flux paradigm.\n\nSo, what is the simple way that you will probably use 99.99999% of the time. `Reflux.createActions([])`. That's it, a single function call with an array of action names. Let's look at it in the case of `BlueBirdActions.jsx`.\n\n    // app/assets/javascripts/components/BlueBirdActions.js\n    var Reflux = require('reflux');\n\n    module.exports = Reflux.createActions([\n      \"inputChange\"\n    ]);\n\nProject BlueBird is unrealistically simple, and it shows in our actions. We only have, or need, one: `inputChange`. To use this action we will add `BlueBirdActions` to our module and then call `BlueBirdActions.inputChange(newInput)`.\n\n\nCreating a Store\n----------------\n\nNext we need to create a store. We will call this `BlueBirdStore.js`. Some people like to create separate folders for stores and actions, but we will keep them in the main `components` folder for now since we only have a few components.\n\nAs with actions, Reflux gives us a few options with stores that you probably will not use very much. At the lowest level, it is possible to link an arbitrary action with an arbitrary function via the `listenTo` function.\n\n    var Store = Reflux.createStore({\n      init: function() {\n        this.listenTo(MyActionSet.myAction1, this.onMyAction1);\n        this.listenTo(MyActionSet.myAction2, this.onMyAction2);\n        this.listenTo(DifferentActions.myAction1, this.onMyConfusedAction);\n      }\n      onMyAction1: function() {},\n      onMyAction2: function() {},\n      onMyConfusedAction: function() {}\n    });\n\nHowever, there is an easier way that will simultaneously keep your code simpler too, `listenables`. `listenables` takes an array of Action classes and links the actions to their `onAction` functions. This can be a problem if you have actions with the same name, but in practice you should only have a single action class for each store (ex. `BlueBirdActions` with `BlueBirdStore`). As with most things code, keep your life simple and you will have fewer confusing bugs.\n\nSo for our BlueBird example, we would have:\n\n    // app/assets/javascripts/components/BlueBirdStore.js\n    var Reflux = require('reflux')\n      , BlueBirdActions = require('./BlueBirdActions');\n\n    var input = \"\";\n\n    var Store = Reflux.createStore({\n      listenables: [BlueBirdActions],\n      init: function() { },\n      getInitialState: function() { return input; },\n      onInputChange: function(newValue) {\n        input = newValue;\n        this.trigger(input);\n      }\n    });\n\n    module.exports = Store;\n\n`listenables: [BlueBirdActions]` tries to link every `action` in `BlueBirdActions` to `onAction` if `onAction` is a function in the store. In this case that means `inputChange` is linked to `onInputChange`. `onInputChange` updates the internal model (`input = newValue;`) and calls `trigger` on the new data. Any components that are listening for store changes will receive an update with the new data.\n\nYou might also notice that we added a `getInitialState` function. to our store. Technically, you can add any functions you want. However, `getInitialState` is called by the `Reflux.connect` function when we start linking our store to our component state. It makes things easier by providing the component an initial state that matches the current state used by the other components.\n\n\nAdding the new Store/Actions to BlueBird\n----------------------------------------\n\nNow that we have actions and a store, we need to link them into our BlueBirdContainer. It turns out that this is fairly simple.\n\nFirst we need to require the new modules:\n\n    var Reflux = require('reflux')\n      , BlueBirdActions = require('./BlueBirdActions')\n      , BlueBirdStore = require('./BlueBirdStore');\n\nNext, we need to connect the store to the component's state. There are a couple ways to do this. The easiest is to use the `Reflux.connect` convenience mixin on our BlueBirdContainer component.\n\n    mixins: [Reflux.connect(BlueBirdStore, 'bluebirdBody')],\n\nIt is important to note that mixins are discouraged in the React.js world these days. In fact, this is one of the very few mixins I still use. I use it because it makes the code very readable and keeps the logic simple. However, if you are dead set against mixins, or you want to use ES6 class syntax, you can fall back to calling the `listen` and `unsubscribe` functions in the `componentDidMount` and `componentWillUnmount` functions respectively.\n\n    componentDidMount: function() {\n      this.unsubscribe = BlueBirdStore.listen(this.onBlueBirdChange);\n    },\n    componentWillUnmount: function() {\n      this.unsubscribe();\n    },\n    onBlueBirdChange: function(newBlueBird) {\n      this.setState({ bluebirdBody: newState });\n    }\n\nBe warned, try to avoid being *\"clever\"* with these. Yes, you can manipulate the data in the `onBlueBirdChange` function. You could fire actions, ajax calls, all kinds of things. These will nearly always come back to bite you.\n\nThe only thing you might want to consider doing in the `onBlueBirdChange` method is some kind of filtering. For example, if we had a lot of BlueBirds, it might be useful to specify that a component is only rendering a specific bluebird. When we get the updates we could filter out any bluebirds that do not match our id. That way `bluebirdBody` represents our bluebird. In fact, Reflux provides the `connectFilter` mixin function for that exactly purpose. \n\nNow that our store is talking to our component, we need a way to update the store when the user types. This is where `BlueBirdActions` come in handy. We are going to update the `onBodyChange` function, replacing `setState` with an action call.\n\n    onBodyChange: function(newValue) {\n      // this.setState({bluebirdBody: newValue});\n      BlueBirdActions.inputChange(newValue);\n    },\n\nWe can also delete `getInitialState`. When we registered our component with the store via `Reflux.connect`, the store's `getInitialState` function is called and merged with the component's `getInitialState`.\n\nNow, when we reload our page (http://localhost:3000/pages/bluebird), we get two text boxes that are actually linked.\n\n![BlueBirds Talking](/content/images/2015/04/BuildingInteractive-003.png)\n\n\nBonus Birds\n-----------\n\nJust for the fun of it, lets add another component that uses the data slightly differently. We will call it `BlueBirdStats.jsx`.\n\n    var React = require('react')\n      , Reflux = require('reflux')\n      , BlueBirdStore = require('./BlueBirdStore');\n\n    var BlueBirdStats = React.createClass({\n      displayName: \"BlueBirdStats\",\n      mixins: [Reflux.connect(BlueBirdStore, 'somethingElse')],\n      render: function() {\n        return (\n          <div style={{float: 'right', maxWidth: 350}}>\n            <div>Body Size: {this.state.somethingElse.length}</div>\n            <div>{this.state.somethingElse}</div>\n          </div>\n        );\n      }\n\n    });\n\n    module.exports = BlueBirdStats;\n\nAs you can see, it is also a simple component. It connects the BlueBirdStore to the `this.state.somethingElse`. That's right, we can call it anything we want. The component then styles itself as a box floating on the right side of the screen and shows the string length and the actual message.\n\nFinally, we add it to our application. First, add the `BlueBirdStats` component to our `components.js` file, `BlueBirdStates = require('./components/BlueBirdStats');`. Then add it to our `bluebird.html.erb` file, `<%= react_component \"BlueBirdStats\", {} %>`. Finally, reload the page.\n\n![BlueBird with Stats](/content/images/2015/04/BuildingInteractive-004.png)\n\n\nMore Bonus Birds\n----------------\n\nLet's really see how powerful the Flux model can be. Let's connect it to a [Faye](http://faye.jcoglan.com/) server.\n\nFirst, if you do not already have a Faye server running, it is really easy to add one for demo purposes. Update `package.json` with the required dependencies.\n\n    \"dependencies\": {\n      \"faye\": \"^1.1.1\",\n      \"http\": \"0.0.0\"\n    },\n    \"scripts\": {\n      \"fayeserver\": \"node fayeserver.js\"\n    },\n\nThen, add the actual server code.\n\n    var http = require('http'),\n        faye = require('faye');\n\n    var server = http.createServer(),\n        bayeux = new faye.NodeAdapter({mount: '/'});\n\n    bayeux.attach(server);\n    server.listen(8000);\n\nRun `npm install`.\n\nFinally, launch our new Faye pub/sub server: `npm run fayeserver`.\n\nNow that we have a simple pub/sub server running, we only need to modify our store to take advantage.\n\nFirst, we will establish a connection when the store is created.\n\n    init: function() {\n      // client/sub are scoped by var statements at the module level\n      client = new Faye.Client('http://localhost:8000/');\n      sub    = client.subscribe('/messages', this.onMessage);\n    },\n\n`Faye.Client` will establish a connection to our server. We set this up on `localhost:8000` in our `fayeserver.js` file. Then we `subscribe` to the `'/messages'` queue on the server. Anything that is published to that queue will be directed to our `onMessage` function.\n\nNext, we update the `onInputChange` method to post messages to the server when we the user types.\n\n    onInputChange: function(newValue) {\n      input = newValue;\n      this.trigger(input);\n      if(client) { client.publish('/messages', { text: newValue }); }\n    }\n\nFinally, we add the `onMessage` function to process messages.\n\n    onMessage: function(message) {\n      if(input !== message.text) {\n        input = message.text;\n        this.trigger(input);\n      }\n    },\n\nHere we get the message, if it is different from what we already have, we trigger an update.\n\nNone of our components changed. We can implement our data layer in the store however we want, and the components just keep working. Also, by keeping all of that logic in the store, it presents one convenient test target.\n\n\nBugs\n----\n\nOf course there are some bugs, there are always bugs. The biggest one is synchronization with the textarea. You probably did not notice, but typing in our textarea is \"buggy\". Everything is fine as long as we are appending to the end of the text, but try putting the cursor in the middle somewhere and type a few keys. You get one character at the cursor, and then the cursor jumps to the end of the line. This is a synchronization bug common to React and Flux.\n\nThere are no great solutions to this problem. It is inherent to the Flux architecture. However, there are some workarounds that involve adding a slight buffer to the text area. I implemented one such workaround, [lazy-input (GitHub)](https://github.com/HurricaneJames/lazy-input), and published it to [lazy-input (npmjs)](https://www.npmjs.com/package/lazy-input).\n\nSimply add it to the `package.json` dependencies: `npm install --save lazy-input`.\n\nThen, require it in any modules that use `textarea` or `input` fields. So, for example, the render function in `BlueBird.jsx` will become:\n\n    render: function() {\n      return (\n        <div>\n          <span>Enter Some Text</span>\n          <LazyInput\n            type=\"textarea\"\n            value={this.props.content}\n            onChange={this.onChange}\n            style={this.props.style}\n            rows={15}\n          />\n        </div>\n      );\n    }\n\nReload the page, and everything just works.\n\n\nStore Hydration\n---------------\n\nFinally, we should talk a little bit about hydration. Hydrating a store means getting some initial data into the store. There are almost limitless ways to hydrate the store. The version I like involved serializing our data on the backend and attaching it to the body element via data attributes.\n\nIn Rails, this can be accomplished by changing the body tag in 'application.html.erb'.\n\n    <body <%= yield :seed_attributes %>>\n\nThen, somewhere in the view chain, add `content_for`. For this demo, we will add it to `bluebird.html.erb`. We should probably consider adding it to `index.html.erb`, but we will skip that to show what happens when no hydration data is present.\n\n    <% content_for :seed_attributes do %>\n    data-bluebird-store=\"an initial message\"\n    <% end %>\n\nNormally, we would seed with some data from the database, but you get the point. It is possible to pack just about anything into the `data-attributes`. For more complex stores, we generally use JSON. Rails has an awesome `json_escape` helper function you should be sure to check out. Combined with the [jbuilder](https://github.com/rails/jbuilder) gem, it is possible to export some really complex data structures.\n\nFinally, we need to add some code to the BlueBirdStore `init` method to hydrate the store from the data attribute.\n\n    init: function() {\n      if(document.body) {\n        input = document.body.getAttribute('data-bluebird-store') || \"\";\n      }\n    },\n\n\nOne caveat. This only works if the JavaScript is loaded after the body tag has been processed by the browser. If the JavaScript is in the head tag, the seed data will not arrive. Generally speaking, it is considered best practices to load the JavaScript at the end of the HTML, so it has not be a problem for any of our projects.\n\n\nConclusion\n----------\n\nWe walked through adding Reflux to a relatively simple component. We looked at some of the advantages this gave us. We saw one of the big drawbacks, and we solved it. I certainly hope that this has been a useful walkthrough for you.\n\nDon't forget, the completed code is available on GitHub [Dex v3.1](https://github.com/HurricaneJames/dex/tree/v3.1).\n",
            "html": "<p>React is a great view library. If used just right, it even makes an alright controller. However, sometimes you need something more. That is where Flux can be handy.</p>\n\n<p>Flux is the Facebook solution to keep the MVC paradigm from becoming unmanageable. If you are wondering whether Flux is right for your project, Dan Abramov made <a href=\"https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6\">\"The Case for Flux\"</a> a few weeks ago. I cannot recommend his article enough. To summarize, Dan points out that Flux is great if:</p>\n\n<ul>\n<li>\"your data changes over time\" and you \"care about immediately reflecting those changes in the UI\"</li>\n<li>\"you want to cache data in memory, but it can change while cached\"</li>\n<li>\"your data is relational and models include and depend on each other\"</li>\n<li>\"data is assembled from different sources and can be rendered in several places throughout the UI\"</li>\n</ul>\n\n<p>If none of that sounds important, you probably do not need Flux. Let's assume it does sound important though. What next?</p>\n\n<h2 id=\"theassignment\">The Assignment  </h2>\n\n<p>We are going to write a very simple edit tool. Our component will have two parts. First, a label telling users to \"Enter Some Text.\" Second, a block where a user can enter some text. That is pretty simple.</p>\n\n<p>However, we are going to complicate things by requiring that multiple components on the same page display that data in different ways. We are going to complicate things a little further by requiring that there is no global \"parent\" app. Instead, it is important that we can \"sprinkle\" the react components on to our page.</p>\n\n<p>\"Why?,\" you say. A lot of us are trying to augment legacy apps. While you can generally add sprinkles to a cake, it is often harder to convince your boss to let you re-bake the whole cake. Also, because coordinating such a large single root starts to become really complex as the app grows. And it becomes painful once we need to start making ajax calls or, or add a backbone layer, or, well, anything not display related.</p>\n\n<h2 id=\"gettingstarted\">Getting Started  </h2>\n\n<p>The examples in this article are based on the <a href=\"https://github.com/HurricaneJames/dex\">Dex</a> code base. Dex is a Rails and Browserify webapp. However, the concepts in this article should be easily transferrable. We will be working on the BlueBird component, located in <code>app/assets/javascripts/components/BlueBird.jsx</code>. BlueBird is put in the global scope in <code>components.js</code> and loaded onto the page by <code>react_component</code> from the <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> package.</p>\n\n<p>If you want to follow along and write code as we go grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.0\">Dex v3.0</a>.</p>\n\n<pre><code>git clone https://github.com/HurricaneJames/dex/tree/v3.0\ncd dex\nbundle install\nnpm install\nrails s\n</code></pre>\n\n<p>If you just want to jump to the end, grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>. All of the code from this article will be available there.</p>\n\n<pre><code>git clone https://github.com/HurricaneJames/dex/tree/v3.1\ncd dex\nbundle install\nnpm install\n# separate console\nrails s\n# optional, and from a different console\nnpm run fayeserver\n# open a browser and point it to http://localhost:3000/pages/index\n</code></pre>\n\n<h2 id=\"bluebird\">BlueBird  </h2>\n\n<p>This is a super simple React.js component. We will create a two files in the <code>components</code> directory, <code>BlueBird.jsx</code> and <code>BlueBirdContainer.jsx.</code> The container handles any state, the actual component is stateless. This is the container design pattern. and is very useful when creating React components. Since we are using React-Rails, we will also require the container file as a global variable in the  <code>components.js</code> file.</p>\n\n<p>Starting with the <code>BlueBird</code> component:</p>\n\n<pre><code>// app/assets/javascripts/components/BlueBird.jsx\nvar React = require('react');\n\nvar BlueBird = React.createClass({\n  displayName: 'BlueBird',\n  propTypes: {\n    content: React.PropTypes.string,\n    onChange: React.PropTypes.func\n  },\n  onChange: function(e) {\n    this.props.onChange(e.target.value);\n  },\n  render: function() {\n    return (\n      &lt;div&gt;\n        &lt;span&gt;Enter Some Text&lt;/span&gt;\n        &lt;textarea\n          value={this.props.content}\n          onChange={this.onChange}\n          rows={15}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nmodule.exports = BlueBirdBody;\n</code></pre>\n\n<p>As you can see, this really is a very simple React component. The render function has a span telling users to <code>Enter Some Text</code> and a textarea to actual enter that text. Next, we create our container, a separate component where we will keep state.</p>\n\n<pre><code>var React = require('react')\n  , BlueBird = require('./BlueBird');\n\nvar BlueBirdContainer = React.createClass({\n  displayName: 'BlueBirdContainer',\n  propTypes: {\n    reverse: React.PropTypes.bool\n  },\n  getInitialState: function() {\n    return {\n      bluebirdBody: ''\n    }\n  }\n  getContent: function() {\n    if(this.props.reverse) {\n      return this.state.bluebirdBody.split('').reverse().join('');\n    }else {\n      return this.state.bluebirdBody;\n    }\n  },\n  onBodyChange: function(newValue) {\n    this.setState({bluebirdBody: newValue});\n  },\n  render: function() {\n    return (\n      &lt;div&gt;\n        &lt;BlueBird content={this.getContent()} onChange={this.onBodyChange} /&gt;\n      &lt;/div&gt;\n    );\n  }\n});\n\nmodule.exports = BlueBirdContainer;\n</code></pre>\n\n<p>This component is fairly straightforward. It holds an internal state for the text, and if the <code>reverse</code> prop is set to <code>true</code>, then it will reverse the text in the text box. This is not particularly useful, except as something interesting we can demo.</p>\n\n<p>Finally, we will add the component to our app:</p>\n\n<ul>\n<li><p>add the component to our components.js file</p>\n\n<pre><code>BlueBirdContainer = require('./components/BlueBirdContainer');\n</code></pre></li>\n<li><p>add the component to our page</p>\n\n<pre><code>&lt;%# app/views/pages/index.html.erb %&gt;\n&lt;h1&gt;BlueBird - Index&lt;/h1&gt;\n&lt;%= react_component 'BlueBirdContainer' %&gt;\n</code></pre></li>\n<li><p>start our server</p>\n\n<pre><code>rails s\n</code></pre></li>\n<li><p>and load the page in a browser <code>http://localhost:3000/pages/index</code>).</p></li>\n</ul>\n\n<p>This gives us a nice simple text box.</p>\n\n<p><img src=\"/content/images/2015/04/BuildingInteractive-001.png\" alt=\"Basic BlueBird Container\" /></p>\n\n<h2 id=\"multiplebluebirds\">Multiple BlueBirds  </h2>\n\n<p>Now that we have a basic component, we want to be able to add it to our page multiple times. Since we are using Rails, we can create a new view <code>pages/bluebird.html.erb</code>.</p>\n\n<pre><code>&lt;h1&gt;BlueBird&lt;/h1&gt;\n&lt;%= react_component \"BlueBirdContainer\", {} %&gt;\n&lt;%= react_component \"BlueBirdContainer\", { reverse: true } %&gt;\n</code></pre>\n\n<p>We add two components, the second one set to reverse. Then we add it to our <code>routes.rb</code>.</p>\n\n<pre><code>  get 'pages/bluebird'\n</code></pre>\n\n<p>Next we setup our <code>pages_controller.rb</code>.</p>\n\n<pre><code>  def bluebird\n  end\n</code></pre>\n\n<p>Then, when we point our browser to <code>http://localhost:3000/pages/bluebird</code>...</p>\n\n<p><img src=\"/content/images/2015/04/BuildingInteractive-002.png\" alt=\"Double Blue Birds\" /></p>\n\n<p>We get two text boxes that are completely unrelated to each other. Not surprising since we never linked the state of the two container components. So, how do we link the two components together. Well, we have a couple options.</p>\n\n<p>First, we could create a BlueBirdRootApp component. All state for the entire app would be contained in this single component, and it would pass that state down to its children along with callback props. This works great in simple cases, and even in cases where we are designing the entire app from scratch. However, it is a bit limiting when we need to sprinkle our React components into an existing app.</p>\n\n<p>Second, we use Flux! When thinking back to Abramov's four cases, our requirement fits perfectly.</p>\n\n<h2 id=\"fluxreflux\">Flux / Reflux  </h2>\n\n<p>So, what is flux?</p>\n\n<pre><code>╔═════════╗     ╔════════════╗     ╔════════╗     ╔═════════════════╗\n║ Actions ║────&gt;║ Dispatcher ║────&gt;║ Stores ║────&gt;║ View Components ║\n╚═════════╝     ╚════════════╝     ╚════════╝     ╚═════════════════╝\n     ^                                                    │\n     └────────────────────────────────────────────────────┘\n</code></pre>\n\n<p>Flux is a version of the Model View Controller paradigm that focuses on unidirectional dataflow. It specifies a dispatcher, some stores, some views, and some actions. Actions trigger the dispatcher. The dispatcher routes actions to interested stores. The stores update based on the action, and then notify the views to rerender. Then, the cycle starts all over again.</p>\n\n<p>There is a lot more detail, but this is where I'm going to stop. Why, because we are going to use Reflux, which is even easier.</p>\n\n<pre><code>╔═════════╗       ╔════════╗       ╔═════════════════╗\n║ Actions ║──────&gt;║ Stores ║──────&gt;║ View Components ║\n╚═════════╝       ╚════════╝       ╚═════════════════╝\n     ^                                      │\n     └──────────────────────────────────────┘\n</code></pre>\n\n<p><a href=\"https://github.com/spoike/refluxjs\">Reflux</a> is an implementation of the basic concepts of Flux by Mikael Brassman. It greatly simplifies Flux by removing the dispatcher. Rather than actions flowing through a dispatcher, actions flow directly to the stores.</p>\n\n<p>It is still possible to do everything with Reflux that can be done with Flux because stores can listen to other stores. However, in practice, I have yet to find that useful. Mostly, it just leads to overly complex code.</p>\n\n<h2 id=\"addingrefluxtoourproject\">Adding Reflux to Our Project  </h2>\n\n<p>The first thing we will need to do is add Reflux to our project. Since we are using browserify, we can add to the <code>package.json</code> dependencies.</p>\n\n<pre><code>\"reflux\": \"^0.2.7\"\n</code></pre>\n\n<p>Alternatively, you can install it from the command line.</p>\n\n<pre><code>npm install --save reflux\n</code></pre>\n\n<p>Then we need to create some actions, create a store to listen to those actions, and finally link that store to our <code>BlueBirdContainer</code> state. Fortunately, Reflux makes this easy.</p>\n\n<h2 id=\"createactions\">Create Actions  </h2>\n\n<p>Reflux provides many ways to create actions. It provides options for sync/async, promises, callbacks, etc... However, every time I have tried anything but the simplest, I have come to regret it. Flux, as an architecture, really wants us to stick to the <code>Actions -&gt; Stores -&gt; Components -&gt; Actions</code> model. Chen Zihui wrote an interesting article, <a href=\"https://medium.com/@jetupper/hello-react-js-b87c63526e3a\">\"Hello, React.js,\"</a> about some common React.js/Flux mistakes. One of his stories speaks directly to complicating the Flux paradigm.</p>\n\n<p>So, what is the simple way that you will probably use 99.99999% of the time. <code>Reflux.createActions([])</code>. That's it, a single function call with an array of action names. Let's look at it in the case of <code>BlueBirdActions.jsx</code>.</p>\n\n<pre><code>// app/assets/javascripts/components/BlueBirdActions.js\nvar Reflux = require('reflux');\n\nmodule.exports = Reflux.createActions([\n  \"inputChange\"\n]);\n</code></pre>\n\n<p>Project BlueBird is unrealistically simple, and it shows in our actions. We only have, or need, one: <code>inputChange</code>. To use this action we will add <code>BlueBirdActions</code> to our module and then call <code>BlueBirdActions.inputChange(newInput)</code>.</p>\n\n<h2 id=\"creatingastore\">Creating a Store  </h2>\n\n<p>Next we need to create a store. We will call this <code>BlueBirdStore.js</code>. Some people like to create separate folders for stores and actions, but we will keep them in the main <code>components</code> folder for now since we only have a few components.</p>\n\n<p>As with actions, Reflux gives us a few options with stores that you probably will not use very much. At the lowest level, it is possible to link an arbitrary action with an arbitrary function via the <code>listenTo</code> function.</p>\n\n<pre><code>var Store = Reflux.createStore({\n  init: function() {\n    this.listenTo(MyActionSet.myAction1, this.onMyAction1);\n    this.listenTo(MyActionSet.myAction2, this.onMyAction2);\n    this.listenTo(DifferentActions.myAction1, this.onMyConfusedAction);\n  }\n  onMyAction1: function() {},\n  onMyAction2: function() {},\n  onMyConfusedAction: function() {}\n});\n</code></pre>\n\n<p>However, there is an easier way that will simultaneously keep your code simpler too, <code>listenables</code>. <code>listenables</code> takes an array of Action classes and links the actions to their <code>onAction</code> functions. This can be a problem if you have actions with the same name, but in practice you should only have a single action class for each store (ex. <code>BlueBirdActions</code> with <code>BlueBirdStore</code>). As with most things code, keep your life simple and you will have fewer confusing bugs.</p>\n\n<p>So for our BlueBird example, we would have:</p>\n\n<pre><code>// app/assets/javascripts/components/BlueBirdStore.js\nvar Reflux = require('reflux')\n  , BlueBirdActions = require('./BlueBirdActions');\n\nvar input = \"\";\n\nvar Store = Reflux.createStore({\n  listenables: [BlueBirdActions],\n  init: function() { },\n  getInitialState: function() { return input; },\n  onInputChange: function(newValue) {\n    input = newValue;\n    this.trigger(input);\n  }\n});\n\nmodule.exports = Store;\n</code></pre>\n\n<p><code>listenables: [BlueBirdActions]</code> tries to link every <code>action</code> in <code>BlueBirdActions</code> to <code>onAction</code> if <code>onAction</code> is a function in the store. In this case that means <code>inputChange</code> is linked to <code>onInputChange</code>. <code>onInputChange</code> updates the internal model (<code>input = newValue;</code>) and calls <code>trigger</code> on the new data. Any components that are listening for store changes will receive an update with the new data.</p>\n\n<p>You might also notice that we added a <code>getInitialState</code> function. to our store. Technically, you can add any functions you want. However, <code>getInitialState</code> is called by the <code>Reflux.connect</code> function when we start linking our store to our component state. It makes things easier by providing the component an initial state that matches the current state used by the other components.</p>\n\n<h2 id=\"addingthenewstoreactionstobluebird\">Adding the new Store/Actions to BlueBird  </h2>\n\n<p>Now that we have actions and a store, we need to link them into our BlueBirdContainer. It turns out that this is fairly simple.</p>\n\n<p>First we need to require the new modules:</p>\n\n<pre><code>var Reflux = require('reflux')\n  , BlueBirdActions = require('./BlueBirdActions')\n  , BlueBirdStore = require('./BlueBirdStore');\n</code></pre>\n\n<p>Next, we need to connect the store to the component's state. There are a couple ways to do this. The easiest is to use the <code>Reflux.connect</code> convenience mixin on our BlueBirdContainer component.</p>\n\n<pre><code>mixins: [Reflux.connect(BlueBirdStore, 'bluebirdBody')],\n</code></pre>\n\n<p>It is important to note that mixins are discouraged in the React.js world these days. In fact, this is one of the very few mixins I still use. I use it because it makes the code very readable and keeps the logic simple. However, if you are dead set against mixins, or you want to use ES6 class syntax, you can fall back to calling the <code>listen</code> and <code>unsubscribe</code> functions in the <code>componentDidMount</code> and <code>componentWillUnmount</code> functions respectively.</p>\n\n<pre><code>componentDidMount: function() {\n  this.unsubscribe = BlueBirdStore.listen(this.onBlueBirdChange);\n},\ncomponentWillUnmount: function() {\n  this.unsubscribe();\n},\nonBlueBirdChange: function(newBlueBird) {\n  this.setState({ bluebirdBody: newState });\n}\n</code></pre>\n\n<p>Be warned, try to avoid being <em>\"clever\"</em> with these. Yes, you can manipulate the data in the <code>onBlueBirdChange</code> function. You could fire actions, ajax calls, all kinds of things. These will nearly always come back to bite you.</p>\n\n<p>The only thing you might want to consider doing in the <code>onBlueBirdChange</code> method is some kind of filtering. For example, if we had a lot of BlueBirds, it might be useful to specify that a component is only rendering a specific bluebird. When we get the updates we could filter out any bluebirds that do not match our id. That way <code>bluebirdBody</code> represents our bluebird. In fact, Reflux provides the <code>connectFilter</code> mixin function for that exactly purpose. </p>\n\n<p>Now that our store is talking to our component, we need a way to update the store when the user types. This is where <code>BlueBirdActions</code> come in handy. We are going to update the <code>onBodyChange</code> function, replacing <code>setState</code> with an action call.</p>\n\n<pre><code>onBodyChange: function(newValue) {\n  // this.setState({bluebirdBody: newValue});\n  BlueBirdActions.inputChange(newValue);\n},\n</code></pre>\n\n<p>We can also delete <code>getInitialState</code>. When we registered our component with the store via <code>Reflux.connect</code>, the store's <code>getInitialState</code> function is called and merged with the component's <code>getInitialState</code>.</p>\n\n<p>Now, when we reload our page (<a href=\"http://localhost:3000/pages/bluebird\">http://localhost:3000/pages/bluebird</a>), we get two text boxes that are actually linked.</p>\n\n<p><img src=\"/content/images/2015/04/BuildingInteractive-003.png\" alt=\"BlueBirds Talking\" /></p>\n\n<h2 id=\"bonusbirds\">Bonus Birds  </h2>\n\n<p>Just for the fun of it, lets add another component that uses the data slightly differently. We will call it <code>BlueBirdStats.jsx</code>.</p>\n\n<pre><code>var React = require('react')\n  , Reflux = require('reflux')\n  , BlueBirdStore = require('./BlueBirdStore');\n\nvar BlueBirdStats = React.createClass({\n  displayName: \"BlueBirdStats\",\n  mixins: [Reflux.connect(BlueBirdStore, 'somethingElse')],\n  render: function() {\n    return (\n      &lt;div style={{float: 'right', maxWidth: 350}}&gt;\n        &lt;div&gt;Body Size: {this.state.somethingElse.length}&lt;/div&gt;\n        &lt;div&gt;{this.state.somethingElse}&lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n\n});\n\nmodule.exports = BlueBirdStats;\n</code></pre>\n\n<p>As you can see, it is also a simple component. It connects the BlueBirdStore to the <code>this.state.somethingElse</code>. That's right, we can call it anything we want. The component then styles itself as a box floating on the right side of the screen and shows the string length and the actual message.</p>\n\n<p>Finally, we add it to our application. First, add the <code>BlueBirdStats</code> component to our <code>components.js</code> file, <code>BlueBirdStates = require('./components/BlueBirdStats');</code>. Then add it to our <code>bluebird.html.erb</code> file, <code>&lt;%= react_component \"BlueBirdStats\", {} %&gt;</code>. Finally, reload the page.</p>\n\n<p><img src=\"/content/images/2015/04/BuildingInteractive-004.png\" alt=\"BlueBird with Stats\" /></p>\n\n<h2 id=\"morebonusbirds\">More Bonus Birds  </h2>\n\n<p>Let's really see how powerful the Flux model can be. Let's connect it to a <a href=\"http://faye.jcoglan.com/\">Faye</a> server.</p>\n\n<p>First, if you do not already have a Faye server running, it is really easy to add one for demo purposes. Update <code>package.json</code> with the required dependencies.</p>\n\n<pre><code>\"dependencies\": {\n  \"faye\": \"^1.1.1\",\n  \"http\": \"0.0.0\"\n},\n\"scripts\": {\n  \"fayeserver\": \"node fayeserver.js\"\n},\n</code></pre>\n\n<p>Then, add the actual server code.</p>\n\n<pre><code>var http = require('http'),\n    faye = require('faye');\n\nvar server = http.createServer(),\n    bayeux = new faye.NodeAdapter({mount: '/'});\n\nbayeux.attach(server);\nserver.listen(8000);\n</code></pre>\n\n<p>Run <code>npm install</code>.</p>\n\n<p>Finally, launch our new Faye pub/sub server: <code>npm run fayeserver</code>.</p>\n\n<p>Now that we have a simple pub/sub server running, we only need to modify our store to take advantage.</p>\n\n<p>First, we will establish a connection when the store is created.</p>\n\n<pre><code>init: function() {\n  // client/sub are scoped by var statements at the module level\n  client = new Faye.Client('http://localhost:8000/');\n  sub    = client.subscribe('/messages', this.onMessage);\n},\n</code></pre>\n\n<p><code>Faye.Client</code> will establish a connection to our server. We set this up on <code>localhost:8000</code> in our <code>fayeserver.js</code> file. Then we <code>subscribe</code> to the <code>'/messages'</code> queue on the server. Anything that is published to that queue will be directed to our <code>onMessage</code> function.</p>\n\n<p>Next, we update the <code>onInputChange</code> method to post messages to the server when we the user types.</p>\n\n<pre><code>onInputChange: function(newValue) {\n  input = newValue;\n  this.trigger(input);\n  if(client) { client.publish('/messages', { text: newValue }); }\n}\n</code></pre>\n\n<p>Finally, we add the <code>onMessage</code> function to process messages.</p>\n\n<pre><code>onMessage: function(message) {\n  if(input !== message.text) {\n    input = message.text;\n    this.trigger(input);\n  }\n},\n</code></pre>\n\n<p>Here we get the message, if it is different from what we already have, we trigger an update.</p>\n\n<p>None of our components changed. We can implement our data layer in the store however we want, and the components just keep working. Also, by keeping all of that logic in the store, it presents one convenient test target.</p>\n\n<h2 id=\"bugs\">Bugs  </h2>\n\n<p>Of course there are some bugs, there are always bugs. The biggest one is synchronization with the textarea. You probably did not notice, but typing in our textarea is \"buggy\". Everything is fine as long as we are appending to the end of the text, but try putting the cursor in the middle somewhere and type a few keys. You get one character at the cursor, and then the cursor jumps to the end of the line. This is a synchronization bug common to React and Flux.</p>\n\n<p>There are no great solutions to this problem. It is inherent to the Flux architecture. However, there are some workarounds that involve adding a slight buffer to the text area. I implemented one such workaround, <a href=\"https://github.com/HurricaneJames/lazy-input\">lazy-input (GitHub)</a>, and published it to <a href=\"https://www.npmjs.com/package/lazy-input\">lazy-input (npmjs)</a>.</p>\n\n<p>Simply add it to the <code>package.json</code> dependencies: <code>npm install --save lazy-input</code>.</p>\n\n<p>Then, require it in any modules that use <code>textarea</code> or <code>input</code> fields. So, for example, the render function in <code>BlueBird.jsx</code> will become:</p>\n\n<pre><code>render: function() {\n  return (\n    &lt;div&gt;\n      &lt;span&gt;Enter Some Text&lt;/span&gt;\n      &lt;LazyInput\n        type=\"textarea\"\n        value={this.props.content}\n        onChange={this.onChange}\n        style={this.props.style}\n        rows={15}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<p>Reload the page, and everything just works.</p>\n\n<h2 id=\"storehydration\">Store Hydration  </h2>\n\n<p>Finally, we should talk a little bit about hydration. Hydrating a store means getting some initial data into the store. There are almost limitless ways to hydrate the store. The version I like involved serializing our data on the backend and attaching it to the body element via data attributes.</p>\n\n<p>In Rails, this can be accomplished by changing the body tag in 'application.html.erb'.</p>\n\n<pre><code>&lt;body &lt;%= yield :seed_attributes %&gt;&gt;\n</code></pre>\n\n<p>Then, somewhere in the view chain, add <code>content_for</code>. For this demo, we will add it to <code>bluebird.html.erb</code>. We should probably consider adding it to <code>index.html.erb</code>, but we will skip that to show what happens when no hydration data is present.</p>\n\n<pre><code>&lt;% content_for :seed_attributes do %&gt;\ndata-bluebird-store=\"an initial message\"\n&lt;% end %&gt;\n</code></pre>\n\n<p>Normally, we would seed with some data from the database, but you get the point. It is possible to pack just about anything into the <code>data-attributes</code>. For more complex stores, we generally use JSON. Rails has an awesome <code>json_escape</code> helper function you should be sure to check out. Combined with the <a href=\"https://github.com/rails/jbuilder\">jbuilder</a> gem, it is possible to export some really complex data structures.</p>\n\n<p>Finally, we need to add some code to the BlueBirdStore <code>init</code> method to hydrate the store from the data attribute.</p>\n\n<pre><code>init: function() {\n  if(document.body) {\n    input = document.body.getAttribute('data-bluebird-store') || \"\";\n  }\n},\n</code></pre>\n\n<p>One caveat. This only works if the JavaScript is loaded after the body tag has been processed by the browser. If the JavaScript is in the head tag, the seed data will not arrive. Generally speaking, it is considered best practices to load the JavaScript at the end of the HTML, so it has not be a problem for any of our projects.</p>\n\n<h2 id=\"conclusion\">Conclusion  </h2>\n\n<p>We walked through adding Reflux to a relatively simple component. We looked at some of the advantages this gave us. We saw one of the big drawbacks, and we solved it. I certainly hope that this has been a useful walkthrough for you.</p>\n\n<p>Don't forget, the completed code is available on GitHub <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>.</p>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "published",
            "language": "en_US",
            "meta_title": "Building Components with React.js and Flux",
            "meta_description": "We walk through using Flux (Reflux) and React.js to build interactive components.",
            "author_id": 8,
            "created_at": 1428931115976,
            "created_by": 8,
            "updated_at": 1428974786730,
            "updated_by": 8,
            "published_at": 1428974786747,
            "published_by": 8
          },
          {
            "id": 35,
            "uuid": "8ffaf45c-710a-46e6-bdc6-244bb1ff464b",
            "title": "Setting up Webpack in 5 Minutes",
            "slug": "how-to-setup-webpack",
            "markdown": "Browserify, Grunt, Gulp.... munch? What will come next? Nobody knows, but the good news is that Webpack makes everything so much easier. I'm going to quickly go over two ways you can set up your code so that you can forget about build tools and get to writing some React code!\n\nI spent what seemed like a lot of time trying to understand how to use all the various build tools out there and I don't want you to deal with the same problem. This guide's two scenerios are straight forward. The first way I will teach is for people who want to throw in some React into an existing project. You'll have to add a script tag to your html, and the rest is handled for you. The other, more preferable (but even easier to setup) way is for people who want to hot module reloading and their React code to be server rendered as well as use react router.\n\n##Let me throw in some React\n\nIn the next 5 minutes you'll be on your way mixing in React with your current app. Let's start off by installing the two required modules:\n\n    npm install webpack\n    npm install babel-loader",
            "html": "<p>Browserify, Grunt, Gulp.... munch? What will come next? Nobody knows, but the good news is that Webpack makes everything so much easier. I'm going to quickly go over two ways you can set up your code so that you can forget about build tools and get to writing some React code!</p>\n\n<p>I spent what seemed like a lot of time trying to understand how to use all the various build tools out there and I don't want you to deal with the same problem. This guide's two scenerios are straight forward. The first way I will teach is for people who want to throw in some React into an existing project. You'll have to add a script tag to your html, and the rest is handled for you. The other, more preferable (but even easier to setup) way is for people who want to hot module reloading and their React code to be server rendered as well as use react router.</p>\n\n<h2 id=\"letmethrowinsomereact\">Let me throw in some React</h2>\n\n<p>In the next 5 minutes you'll be on your way mixing in React with your current app. Let's start off by installing the two required modules:</p>\n\n<pre><code>npm install webpack\nnpm install babel-loader\n</code></pre>",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "draft",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1431413445970,
            "created_by": 1,
            "updated_at": 1431413958477,
            "updated_by": 1,
            "published_at": null,
            "published_by": null
          },
          {
            "id": 36,
            "uuid": "063ba428-7c4f-4ca4-a5e2-004dd5a866c8",
            "title": "Starting with ReactJS is Easier Than Ever!",
            "slug": "starting-with-reactjs-is-easier-than-ever",
            "markdown": "",
            "html": "",
            "image": null,
            "featured": 0,
            "page": 0,
            "status": "draft",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "author_id": 1,
            "created_at": 1431538738339,
            "created_by": 1,
            "updated_at": 1431538742312,
            "updated_by": 1,
            "published_at": null,
            "published_by": null
          }
        ],
        "users": [
          {
            "id": 1,
            "uuid": "9815917a-2c86-45e4-92c3-0d604a31e8b5",
            "name": "Zach Silveira",
            "slug": "zach-silveira",
            "password": "$2a$10$Ap4p3xr.qWAXc7oIJWDlIedPYwkhx.qxN/kp11v1n/JmoTEfZVsKa",
            "email": "zackify@gmail.com",
            "image": "//www.gravatar.com/avatar/9bde5a8d4015ff4e59b60adfd3223280?d=404&s=250",
            "cover": null,
            "bio": "Web Developer and founder of ReactJSNews.\n",
            "website": "http://procoder.io",
            "location": "California",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1432431313963,
            "created_at": 1413152814298,
            "created_by": 1,
            "updated_at": 1432431313964,
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "688064e3-66e3-4c26-9c83-a42e937e68c2",
            "name": "Jorge Cuadra",
            "slug": "jorgecuadrafueyo",
            "password": "$2a$10$EwBYxfNsQvYVW6BHDWUOSOLBtgbe8E8IWV2nfuTvfbQBMY9NGC642",
            "email": "jorgecuadrafueyo@gmail.com",
            "image": "//www.gravatar.com/avatar/862e3481a71903871a667e1f243fd9c5?d=404&s=250",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1413177201782,
            "created_at": 1413157514899,
            "created_by": 1,
            "updated_at": 1413177201783,
            "updated_by": 2
          },
          {
            "id": 3,
            "uuid": "9c74774e-16e9-4a51-9706-4ccbf00e2c9a",
            "name": "David Chang",
            "slug": "david",
            "password": "$2a$10$uib1T0HW7eUoUCvlyYWC/O4O3/tmIjedEwwB.6YZlbjHEUagLEnDS",
            "email": "dchang.me@gmail.com",
            "image": "/content/images/2014/11/580857_10152149427142495_1066327689_n.jpg",
            "cover": null,
            "bio": null,
            "website": "http://davidandsuzi.com",
            "location": "Seattle",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1420580645538,
            "created_at": 1413229421093,
            "created_by": 1,
            "updated_at": 1420580645538,
            "updated_by": 3
          },
          {
            "id": 4,
            "uuid": "b1ce8ff2-d28e-41cc-990f-ae2c6a0dd631",
            "name": "Ferran Negre",
            "slug": "ferrannp",
            "password": "$2a$10$NVjLnTdUQXV3T74OGeOnt.l4uA8wF/Rn0lnHHbid.iRaly9HnJs7y",
            "email": "fnp.developer@gmail.com",
            "image": "/content/images/2014/10/10690302_10203672742493610_4250870704504131847_n.jpg",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1416092981932,
            "created_at": 1413229438556,
            "created_by": 1,
            "updated_at": 1416092981933,
            "updated_by": 4
          },
          {
            "id": 5,
            "uuid": "5035d996-dcfc-441d-98d3-a09003b31d62",
            "name": "aleeex kang",
            "slug": "aleeex",
            "password": "$2a$10$k0SVRsJJ/vpm0g0BJq7Qne9xlVXAztJml4aEDskbH5oElc2eZarU.",
            "email": "akang2@gmail.com",
            "image": "//www.gravatar.com/avatar/adaf41c08c442ef906ccddedeb45db91?d=404&s=250",
            "cover": null,
            "bio": "@rodneystrong",
            "website": "http://www.heyitsalex.com",
            "location": "cali",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1417036880226,
            "created_at": 1414790950604,
            "created_by": 1,
            "updated_at": 1417036880233,
            "updated_by": 5
          },
          {
            "id": 6,
            "uuid": "bc673603-cd93-428a-aeff-4c5f4503f970",
            "name": "Jack Callister",
            "slug": "jack",
            "password": "$2a$10$lFJuFAKEqSZ.20tYpu5d5uwjz9DMJr8GzQViOMX6INEM3vQyD8avy",
            "email": "jarsbe@gmail.com",
            "image": "//www.gravatar.com/avatar/6f12b2d2b3221d1e8705520e7e7aec30?d=404&s=250",
            "cover": null,
            "bio": "My name is Jack Callister and I'm a Wellington based developer (soon to be traveler). I enjoy crafting applications with Ruby, Javascript, and Objective-C. I enjoy collaborating with others.",
            "website": "http://jackcallister.com",
            "location": "Wellington",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1418017655256,
            "created_at": 1417852903165,
            "created_by": 1,
            "updated_at": 1418017869282,
            "updated_by": 6
          },
          {
            "id": 7,
            "uuid": "1d1c3793-6d4e-49af-a8e9-086789092178",
            "name": "flarnie.marchan",
            "slug": "flarnie",
            "password": "$2a$10$PYhE7vzkp.gl7fWRdJTAFeK8E8W53GBO.zkPpUCClMZsjidpESZmO",
            "email": "flarnie.marchan@brigade.com",
            "image": null,
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "invited",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": null,
            "created_at": 1418327884168,
            "created_by": 1,
            "updated_at": 1418327884168,
            "updated_by": 1
          },
          {
            "id": 8,
            "uuid": "7dd9e100-d79b-4ba6-bd05-c8ff807f7779",
            "name": "James Burnett",
            "slug": "james",
            "password": "$2a$10$uYa5kUbFlv6/1n5OouuQTO6WJDUUsB8EXM2V84xiB41KtXiAwbx1m",
            "email": "hurricanejamesesq@gmail.com",
            "image": "/content/images/2014/12/IMG_2389.JPG",
            "cover": null,
            "bio": "I write software for fun and profit. At the moment, I'm doing front-end web development because it is fun.",
            "website": "",
            "location": "Orlando, Florida USA",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1428931096014,
            "created_at": 1418689355344,
            "created_by": 1,
            "updated_at": 1428931096015,
            "updated_by": 8
          },
          {
            "id": 10,
            "uuid": "8682e649-4e10-49b3-96d0-8c75523764d3",
            "name": "David Wells",
            "slug": "david-wells",
            "password": "$2a$10$mEzIunlQaoP4wnRynwtNouqWI7/2csDUbJ0qNA1XbEMu.//I09Cf2",
            "email": "david@inboundnow.com",
            "image": "//www.gravatar.com/avatar/6b77b67821c491baf74ab8a4a59a0181?d=404&s=250",
            "cover": null,
            "bio": "Founder of Inbound Now. Node + React JavaScript Developer. I build the internets + marketing tools for WordPress.",
            "website": "http://www.inboundnow.com",
            "location": "San Francisco",
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1419997787745,
            "created_at": 1419883153114,
            "created_by": 1,
            "updated_at": 1420002459023,
            "updated_by": 10
          },
          {
            "id": 11,
            "uuid": "01c76f0c-13ef-472c-b694-075dc3e5d14e",
            "name": "Ken",
            "slug": "ken",
            "password": "$2a$10$jR0BBv7.jUgoga7MEnEX9O73EwvH8z1JS2iZNt5cDuioUg055rx9y",
            "email": "Ken@outlook.com",
            "image": "//www.gravatar.com/avatar/4060c0b98896d85a55cfa13231deb674?d=404&s=250",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "invited",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": null,
            "created_at": 1426538829228,
            "created_by": 1,
            "updated_at": 1426538829228,
            "updated_by": 1
          },
          {
            "id": 12,
            "uuid": "1f349103-c54e-4266-b6e9-15f4ab935c79",
            "name": "Josh Perez",
            "slug": "josh-perez",
            "password": "$2a$10$A9FRlnqqjvmWpxk0VBXF7Oqf.F4DA3M5QVdBGKB6PDLfzq/nuUXJi",
            "email": "josh@goatslacker.com",
            "image": "//www.gravatar.com/avatar/8e830af2c64e2a4bbda590f2d7b95053?d=404&s=250",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1426828607790,
            "created_at": 1426798624804,
            "created_by": 1,
            "updated_at": 1426828607792,
            "updated_by": 12
          },
          {
            "id": 13,
            "uuid": "9818e0c1-a658-460b-8960-1e2e67927471",
            "name": "Adam Miskiewicz",
            "slug": "adam-miskiewicz",
            "password": "$2a$10$7WolkKErK58hdACXz0ufxOK5iErguhMxlM6vYyQdfum8kuv990U3u",
            "email": "adam@sk3vy.com",
            "image": "//www.gravatar.com/avatar/1f5244fa097e110ccd722ae41403cee3?d=404&s=250",
            "cover": null,
            "bio": null,
            "website": null,
            "location": null,
            "accessibility": null,
            "status": "active",
            "language": "en_US",
            "meta_title": null,
            "meta_description": null,
            "last_login": 1432431429599,
            "created_at": 1432431405421,
            "created_by": 1,
            "updated_at": 1432431429600,
            "updated_by": 13
          }
        ],
        "roles": [
          {
            "id": 1,
            "uuid": "d816177a-32d7-4877-8029-8e9bb20d9d9d",
            "name": "Administrator",
            "description": "Administrators",
            "created_at": 1413152813245,
            "created_by": 1,
            "updated_at": 1413152813245,
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "1a6d71ed-8265-472b-a4e6-1bdbf3562af1",
            "name": "Editor",
            "description": "Editors",
            "created_at": 1413152813245,
            "created_by": 1,
            "updated_at": 1413152813245,
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "e448f7e7-a3e4-46b5-a247-4331d98c0a94",
            "name": "Author",
            "description": "Authors",
            "created_at": 1413152813246,
            "created_by": 1,
            "updated_at": 1413152813246,
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "71824536-1a52-48bb-83a4-8c0e5cbb9659",
            "name": "Owner",
            "description": "Blog Owner",
            "created_at": 1413152813247,
            "created_by": 1,
            "updated_at": 1413152813247,
            "updated_by": 1
          }
        ],
        "roles_users": [
          {
            "id": 1,
            "role_id": 4,
            "user_id": 1
          },
          {
            "id": 2,
            "role_id": 1,
            "user_id": 2
          },
          {
            "id": 3,
            "role_id": 3,
            "user_id": 3
          },
          {
            "id": 4,
            "role_id": 3,
            "user_id": 4
          },
          {
            "id": 5,
            "role_id": 1,
            "user_id": 5
          },
          {
            "id": 6,
            "role_id": 3,
            "user_id": 6
          },
          {
            "id": 7,
            "role_id": 3,
            "user_id": 7
          },
          {
            "id": 8,
            "role_id": 3,
            "user_id": 8
          },
          {
            "id": 9,
            "role_id": 3,
            "user_id": 9
          },
          {
            "id": 10,
            "role_id": 3,
            "user_id": 10
          },
          {
            "id": 11,
            "role_id": 3,
            "user_id": 11
          },
          {
            "id": 12,
            "role_id": 3,
            "user_id": 12
          },
          {
            "id": 13,
            "role_id": 2,
            "user_id": 13
          }
        ],
        "permissions": [
          {
            "id": 1,
            "uuid": "4fa57cb4-be74-4cc4-ae53-e7cd3bb5473f",
            "name": "Export database",
            "object_type": "db",
            "action_type": "exportContent",
            "object_id": null,
            "created_at": 1413152813331,
            "created_by": 1,
            "updated_at": 1413152813331,
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "f22d4ae5-77b8-4871-a93d-b3c59b17d768",
            "name": "Import database",
            "object_type": "db",
            "action_type": "importContent",
            "object_id": null,
            "created_at": 1413152813339,
            "created_by": 1,
            "updated_at": 1413152813339,
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "07069969-2477-4c00-b2e5-0c7b18713318",
            "name": "Delete all content",
            "object_type": "db",
            "action_type": "deleteAllContent",
            "object_id": null,
            "created_at": 1413152813346,
            "created_by": 1,
            "updated_at": 1413152813346,
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "e93149b6-4fca-4042-a8b4-24c66d789114",
            "name": "Send mail",
            "object_type": "mail",
            "action_type": "send",
            "object_id": null,
            "created_at": 1413152813352,
            "created_by": 1,
            "updated_at": 1413152813352,
            "updated_by": 1
          },
          {
            "id": 5,
            "uuid": "552c481b-5a74-4043-9e4c-84d573c4dad8",
            "name": "Browse notifications",
            "object_type": "notification",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813360,
            "created_by": 1,
            "updated_at": 1413152813360,
            "updated_by": 1
          },
          {
            "id": 6,
            "uuid": "b9a0ecaf-c36a-43c2-9b87-1b1c8be8728e",
            "name": "Add notifications",
            "object_type": "notification",
            "action_type": "add",
            "object_id": null,
            "created_at": 1413152813367,
            "created_by": 1,
            "updated_at": 1413152813367,
            "updated_by": 1
          },
          {
            "id": 7,
            "uuid": "62b7aa50-ebeb-4aec-b5c9-6c7af87be574",
            "name": "Delete notifications",
            "object_type": "notification",
            "action_type": "destroy",
            "object_id": null,
            "created_at": 1413152813374,
            "created_by": 1,
            "updated_at": 1413152813374,
            "updated_by": 1
          },
          {
            "id": 8,
            "uuid": "9b3d460a-40e4-4cd0-b86d-f55036748d51",
            "name": "Browse posts",
            "object_type": "post",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813379,
            "created_by": 1,
            "updated_at": 1413152813379,
            "updated_by": 1
          },
          {
            "id": 9,
            "uuid": "c03f2f00-154a-42e9-aa32-903442a66f34",
            "name": "Read posts",
            "object_type": "post",
            "action_type": "read",
            "object_id": null,
            "created_at": 1413152813387,
            "created_by": 1,
            "updated_at": 1413152813387,
            "updated_by": 1
          },
          {
            "id": 10,
            "uuid": "005303dd-4d1c-4154-bb76-5eb88acee60d",
            "name": "Edit posts",
            "object_type": "post",
            "action_type": "edit",
            "object_id": null,
            "created_at": 1413152813394,
            "created_by": 1,
            "updated_at": 1413152813394,
            "updated_by": 1
          },
          {
            "id": 11,
            "uuid": "e5b9ce03-108b-4c8f-81aa-2495397f62a2",
            "name": "Add posts",
            "object_type": "post",
            "action_type": "add",
            "object_id": null,
            "created_at": 1413152813402,
            "created_by": 1,
            "updated_at": 1413152813402,
            "updated_by": 1
          },
          {
            "id": 12,
            "uuid": "2456a56f-ffa6-464f-81cc-76e522c16db5",
            "name": "Delete posts",
            "object_type": "post",
            "action_type": "destroy",
            "object_id": null,
            "created_at": 1413152813407,
            "created_by": 1,
            "updated_at": 1413152813407,
            "updated_by": 1
          },
          {
            "id": 13,
            "uuid": "60d2fc6c-2696-47b1-a204-283d0b12c0bc",
            "name": "Browse settings",
            "object_type": "setting",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813412,
            "created_by": 1,
            "updated_at": 1413152813412,
            "updated_by": 1
          },
          {
            "id": 14,
            "uuid": "bb443ee8-ff3c-4fcd-a486-dca4a17c65f1",
            "name": "Read settings",
            "object_type": "setting",
            "action_type": "read",
            "object_id": null,
            "created_at": 1413152813416,
            "created_by": 1,
            "updated_at": 1413152813416,
            "updated_by": 1
          },
          {
            "id": 15,
            "uuid": "3bc818ec-bdd3-4ba8-b2e9-e00d1ba82361",
            "name": "Edit settings",
            "object_type": "setting",
            "action_type": "edit",
            "object_id": null,
            "created_at": 1413152813420,
            "created_by": 1,
            "updated_at": 1413152813420,
            "updated_by": 1
          },
          {
            "id": 16,
            "uuid": "ec11ca9e-b5a2-416f-8bd7-d60c0d428878",
            "name": "Generate slugs",
            "object_type": "slug",
            "action_type": "generate",
            "object_id": null,
            "created_at": 1413152813428,
            "created_by": 1,
            "updated_at": 1413152813428,
            "updated_by": 1
          },
          {
            "id": 17,
            "uuid": "1f2a713f-b1bb-48ce-a039-b7b99da8e446",
            "name": "Browse tags",
            "object_type": "tag",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813434,
            "created_by": 1,
            "updated_at": 1413152813434,
            "updated_by": 1
          },
          {
            "id": 18,
            "uuid": "b5362323-017f-4808-97f7-bac8e6798307",
            "name": "Read tags",
            "object_type": "tag",
            "action_type": "read",
            "object_id": null,
            "created_at": 1413152813439,
            "created_by": 1,
            "updated_at": 1413152813439,
            "updated_by": 1
          },
          {
            "id": 19,
            "uuid": "38b961db-d074-4fbb-874a-784af909f27b",
            "name": "Edit tags",
            "object_type": "tag",
            "action_type": "edit",
            "object_id": null,
            "created_at": 1413152813443,
            "created_by": 1,
            "updated_at": 1413152813443,
            "updated_by": 1
          },
          {
            "id": 20,
            "uuid": "fd1d4e71-f476-444c-a717-2d3a56661c30",
            "name": "Add tags",
            "object_type": "tag",
            "action_type": "add",
            "object_id": null,
            "created_at": 1413152813447,
            "created_by": 1,
            "updated_at": 1413152813447,
            "updated_by": 1
          },
          {
            "id": 21,
            "uuid": "abd1776c-eee6-45cd-9fec-68b32c7f1fca",
            "name": "Delete tags",
            "object_type": "tag",
            "action_type": "destroy",
            "object_id": null,
            "created_at": 1413152813454,
            "created_by": 1,
            "updated_at": 1413152813454,
            "updated_by": 1
          },
          {
            "id": 22,
            "uuid": "51cc627c-ef9a-490b-b7c2-991e1d66bce9",
            "name": "Browse themes",
            "object_type": "theme",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813461,
            "created_by": 1,
            "updated_at": 1413152813461,
            "updated_by": 1
          },
          {
            "id": 23,
            "uuid": "ca7ac336-f004-4720-bd44-da9774e43c0f",
            "name": "Edit themes",
            "object_type": "theme",
            "action_type": "edit",
            "object_id": null,
            "created_at": 1413152813467,
            "created_by": 1,
            "updated_at": 1413152813467,
            "updated_by": 1
          },
          {
            "id": 24,
            "uuid": "726cbaca-693c-41e5-872f-f0ddbd18fdcb",
            "name": "Browse users",
            "object_type": "user",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813471,
            "created_by": 1,
            "updated_at": 1413152813471,
            "updated_by": 1
          },
          {
            "id": 25,
            "uuid": "e1c8472f-8303-4bd6-8340-f843ec65b34c",
            "name": "Read users",
            "object_type": "user",
            "action_type": "read",
            "object_id": null,
            "created_at": 1413152813474,
            "created_by": 1,
            "updated_at": 1413152813474,
            "updated_by": 1
          },
          {
            "id": 26,
            "uuid": "b9b3eda4-1dbd-4bd1-810c-95596f096bd4",
            "name": "Edit users",
            "object_type": "user",
            "action_type": "edit",
            "object_id": null,
            "created_at": 1413152813481,
            "created_by": 1,
            "updated_at": 1413152813481,
            "updated_by": 1
          },
          {
            "id": 27,
            "uuid": "ca655aa0-6e0f-4c95-a0ea-c9e40df973a1",
            "name": "Add users",
            "object_type": "user",
            "action_type": "add",
            "object_id": null,
            "created_at": 1413152813490,
            "created_by": 1,
            "updated_at": 1413152813490,
            "updated_by": 1
          },
          {
            "id": 28,
            "uuid": "3ded24eb-eab8-4c36-a2a8-612215725f88",
            "name": "Delete users",
            "object_type": "user",
            "action_type": "destroy",
            "object_id": null,
            "created_at": 1413152813495,
            "created_by": 1,
            "updated_at": 1413152813495,
            "updated_by": 1
          },
          {
            "id": 29,
            "uuid": "e933befa-ec5c-4d90-8bf5-bbcefdc28443",
            "name": "Assign a role",
            "object_type": "role",
            "action_type": "assign",
            "object_id": null,
            "created_at": 1413152813498,
            "created_by": 1,
            "updated_at": 1413152813498,
            "updated_by": 1
          },
          {
            "id": 30,
            "uuid": "a9dccf78-8920-42fb-a543-75ed827a8e96",
            "name": "Browse roles",
            "object_type": "role",
            "action_type": "browse",
            "object_id": null,
            "created_at": 1413152813501,
            "created_by": 1,
            "updated_at": 1413152813501,
            "updated_by": 1
          }
        ],
        "permissions_users": [],
        "permissions_roles": [
          {
            "id": 1,
            "role_id": 1,
            "permission_id": 1
          },
          {
            "id": 2,
            "role_id": 1,
            "permission_id": 2
          },
          {
            "id": 3,
            "role_id": 1,
            "permission_id": 3
          },
          {
            "id": 4,
            "role_id": 1,
            "permission_id": 4
          },
          {
            "id": 5,
            "role_id": 1,
            "permission_id": 5
          },
          {
            "id": 6,
            "role_id": 1,
            "permission_id": 6
          },
          {
            "id": 7,
            "role_id": 1,
            "permission_id": 7
          },
          {
            "id": 8,
            "role_id": 1,
            "permission_id": 8
          },
          {
            "id": 9,
            "role_id": 1,
            "permission_id": 9
          },
          {
            "id": 10,
            "role_id": 1,
            "permission_id": 10
          },
          {
            "id": 11,
            "role_id": 1,
            "permission_id": 11
          },
          {
            "id": 12,
            "role_id": 1,
            "permission_id": 12
          },
          {
            "id": 13,
            "role_id": 1,
            "permission_id": 13
          },
          {
            "id": 14,
            "role_id": 1,
            "permission_id": 14
          },
          {
            "id": 15,
            "role_id": 1,
            "permission_id": 15
          },
          {
            "id": 16,
            "role_id": 1,
            "permission_id": 16
          },
          {
            "id": 17,
            "role_id": 1,
            "permission_id": 17
          },
          {
            "id": 18,
            "role_id": 1,
            "permission_id": 18
          },
          {
            "id": 19,
            "role_id": 1,
            "permission_id": 19
          },
          {
            "id": 20,
            "role_id": 1,
            "permission_id": 20
          },
          {
            "id": 21,
            "role_id": 1,
            "permission_id": 21
          },
          {
            "id": 22,
            "role_id": 1,
            "permission_id": 22
          },
          {
            "id": 23,
            "role_id": 1,
            "permission_id": 23
          },
          {
            "id": 24,
            "role_id": 1,
            "permission_id": 24
          },
          {
            "id": 25,
            "role_id": 1,
            "permission_id": 25
          },
          {
            "id": 26,
            "role_id": 1,
            "permission_id": 26
          },
          {
            "id": 27,
            "role_id": 1,
            "permission_id": 27
          },
          {
            "id": 28,
            "role_id": 1,
            "permission_id": 28
          },
          {
            "id": 29,
            "role_id": 1,
            "permission_id": 29
          },
          {
            "id": 30,
            "role_id": 1,
            "permission_id": 30
          },
          {
            "id": 31,
            "role_id": 2,
            "permission_id": 8
          },
          {
            "id": 32,
            "role_id": 2,
            "permission_id": 9
          },
          {
            "id": 33,
            "role_id": 2,
            "permission_id": 10
          },
          {
            "id": 34,
            "role_id": 2,
            "permission_id": 11
          },
          {
            "id": 35,
            "role_id": 2,
            "permission_id": 12
          },
          {
            "id": 36,
            "role_id": 2,
            "permission_id": 13
          },
          {
            "id": 37,
            "role_id": 2,
            "permission_id": 14
          },
          {
            "id": 38,
            "role_id": 2,
            "permission_id": 16
          },
          {
            "id": 39,
            "role_id": 2,
            "permission_id": 17
          },
          {
            "id": 40,
            "role_id": 2,
            "permission_id": 18
          },
          {
            "id": 41,
            "role_id": 2,
            "permission_id": 19
          },
          {
            "id": 42,
            "role_id": 2,
            "permission_id": 20
          },
          {
            "id": 43,
            "role_id": 2,
            "permission_id": 21
          },
          {
            "id": 44,
            "role_id": 2,
            "permission_id": 24
          },
          {
            "id": 45,
            "role_id": 2,
            "permission_id": 25
          },
          {
            "id": 46,
            "role_id": 2,
            "permission_id": 26
          },
          {
            "id": 47,
            "role_id": 2,
            "permission_id": 27
          },
          {
            "id": 48,
            "role_id": 2,
            "permission_id": 28
          },
          {
            "id": 49,
            "role_id": 2,
            "permission_id": 29
          },
          {
            "id": 50,
            "role_id": 2,
            "permission_id": 30
          },
          {
            "id": 51,
            "role_id": 3,
            "permission_id": 8
          },
          {
            "id": 52,
            "role_id": 3,
            "permission_id": 9
          },
          {
            "id": 53,
            "role_id": 3,
            "permission_id": 11
          },
          {
            "id": 54,
            "role_id": 3,
            "permission_id": 13
          },
          {
            "id": 55,
            "role_id": 3,
            "permission_id": 14
          },
          {
            "id": 56,
            "role_id": 3,
            "permission_id": 16
          },
          {
            "id": 57,
            "role_id": 3,
            "permission_id": 17
          },
          {
            "id": 58,
            "role_id": 3,
            "permission_id": 18
          },
          {
            "id": 59,
            "role_id": 3,
            "permission_id": 20
          },
          {
            "id": 60,
            "role_id": 3,
            "permission_id": 24
          },
          {
            "id": 61,
            "role_id": 3,
            "permission_id": 25
          },
          {
            "id": 62,
            "role_id": 3,
            "permission_id": 30
          }
        ],
        "permissions_apps": [],
        "settings": [
          {
            "id": 1,
            "uuid": "fa766a58-9981-43e8-9ced-c075bc3d5597",
            "key": "databaseVersion",
            "value": "003",
            "type": "core",
            "created_at": 1413152814327,
            "created_by": 1,
            "updated_at": 1413152814327,
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "bbecee68-0743-401e-959c-b8610fb4d90b",
            "key": "dbHash",
            "value": "8c0b204e-1050-430e-aa3d-8e7682f70933",
            "type": "core",
            "created_at": 1413152814340,
            "created_by": 1,
            "updated_at": 1413152814457,
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "07f66f29-988d-44a2-add8-f44a68609bdc",
            "key": "nextUpdateCheck",
            "value": "1432517700",
            "type": "core",
            "created_at": 1413152814341,
            "created_by": 1,
            "updated_at": 1432431300330,
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "875a6874-8f93-49ff-877a-94d3d4e4ff74",
            "key": "displayUpdateNotification",
            "value": "0.5.0",
            "type": "core",
            "created_at": 1413152814342,
            "created_by": 1,
            "updated_at": 1432431300354,
            "updated_by": 1
          },
          {
            "id": 5,
            "uuid": "1dd36b06-f49a-46e1-a581-53f801967663",
            "key": "title",
            "value": "ReactJS News",
            "type": "blog",
            "created_at": 1413152814342,
            "created_by": 1,
            "updated_at": 1415230358453,
            "updated_by": 1
          },
          {
            "id": 6,
            "uuid": "4066320e-9815-4c44-bf2c-f5def05aeff3",
            "key": "description",
            "value": "ReactJS News and tutorials from the community.",
            "type": "blog",
            "created_at": 1413152814343,
            "created_by": 1,
            "updated_at": 1415230358456,
            "updated_by": 1
          },
          {
            "id": 7,
            "uuid": "db98e0ca-769f-46f1-89c9-2247f21630c1",
            "key": "email",
            "value": "zackify@gmail.com",
            "type": "blog",
            "created_at": 1413152814343,
            "created_by": 1,
            "updated_at": 1415230358458,
            "updated_by": 1
          },
          {
            "id": 8,
            "uuid": "71d756e4-89e5-497a-93ca-afeb2e9f375a",
            "key": "logo",
            "value": "/content/images/2014/10/logomain.png",
            "type": "blog",
            "created_at": 1413152814343,
            "created_by": 1,
            "updated_at": 1415230358460,
            "updated_by": 1
          },
          {
            "id": 9,
            "uuid": "7b25d565-7290-4b7d-a78f-e5a7afb6b515",
            "key": "cover",
            "value": "",
            "type": "blog",
            "created_at": 1413152814343,
            "created_by": 1,
            "updated_at": 1415230358461,
            "updated_by": 1
          },
          {
            "id": 10,
            "uuid": "99f809f9-0511-405a-820a-2fed4fd7e802",
            "key": "defaultLang",
            "value": "en_US",
            "type": "blog",
            "created_at": 1413152814344,
            "created_by": 1,
            "updated_at": 1415230358462,
            "updated_by": 1
          },
          {
            "id": 11,
            "uuid": "6f31b612-e2da-418f-88b1-5560a1ed0601",
            "key": "postsPerPage",
            "value": "5",
            "type": "blog",
            "created_at": 1413152814344,
            "created_by": 1,
            "updated_at": 1415230358464,
            "updated_by": 1
          },
          {
            "id": 12,
            "uuid": "56bcd7e0-8886-4333-83d5-b3d49fa78f72",
            "key": "forceI18n",
            "value": "true",
            "type": "blog",
            "created_at": 1413152814344,
            "created_by": 1,
            "updated_at": 1415230358465,
            "updated_by": 1
          },
          {
            "id": 13,
            "uuid": "2cea6c54-90bf-4e4d-bb21-c3495e064811",
            "key": "permalinks",
            "value": "/:slug/",
            "type": "blog",
            "created_at": 1413152814345,
            "created_by": 1,
            "updated_at": 1415230358467,
            "updated_by": 1
          },
          {
            "id": 14,
            "uuid": "eb55f8d0-794a-4f53-84c4-4eb945ff0cb4",
            "key": "activeApps",
            "value": "[]",
            "type": "app",
            "created_at": 1413152814346,
            "created_by": 1,
            "updated_at": 1413152814346,
            "updated_by": 1
          },
          {
            "id": 15,
            "uuid": "7b8d2622-d016-49ce-8d42-29412dc22629",
            "key": "installedApps",
            "value": "[]",
            "type": "app",
            "created_at": 1413152814346,
            "created_by": 1,
            "updated_at": 1430687348175,
            "updated_by": 1
          },
          {
            "id": 16,
            "uuid": "7d777397-f178-4507-ae01-48c811cc091a",
            "key": "activeTheme",
            "value": "orcatheme",
            "type": "theme",
            "created_at": 1413152814345,
            "created_by": 1,
            "updated_at": 1415230358471,
            "updated_by": 1
          }
        ],
        "tags": [
          {
            "id": 1,
            "uuid": "c0e18c34-d882-4525-8255-0b2031374318",
            "name": "Getting Started",
            "slug": "getting-started",
            "description": null,
            "image": null,
            "hidden": 0,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": 1413152813244,
            "created_by": 1,
            "updated_at": 1413152813244,
            "updated_by": 1
          },
          {
            "id": 2,
            "uuid": "07ed6090-c6fe-464c-aaab-8c2917975462",
            "name": "roundup",
            "slug": "roundup",
            "description": null,
            "image": null,
            "hidden": 0,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": 1413178330520,
            "created_by": 1,
            "updated_at": 1413178330520,
            "updated_by": 1
          },
          {
            "id": 3,
            "uuid": "4af4ea82-64c4-4942-802a-c1487c1aa704",
            "name": "weekly",
            "slug": "weekly",
            "description": null,
            "image": null,
            "hidden": 0,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": 1413178342428,
            "created_by": 1,
            "updated_at": 1413178342428,
            "updated_by": 1
          },
          {
            "id": 4,
            "uuid": "bd96af3e-c2d8-4107-b98a-acfd2eaef6e2",
            "name": "twir",
            "slug": "twir",
            "description": null,
            "image": null,
            "hidden": 0,
            "parent_id": null,
            "meta_title": null,
            "meta_description": null,
            "created_at": 1414618806992,
            "created_by": 1,
            "updated_at": 1414618806992,
            "updated_by": 1
          }
        ],
        "posts_tags": [
          {
            "id": 10,
            "post_id": 7,
            "tag_id": 4
          },
          {
            "id": 11,
            "post_id": 3,
            "tag_id": 4
          }
        ],
        "apps": [],
        "app_settings": [],
        "app_fields": []
      }
    }
  ]
}
